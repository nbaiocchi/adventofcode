{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3","program":"/home/nbaiocchi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bitvec","--edition=2018","/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"atomic\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=fd5041c45b730bf3","-C","extra-filename=-fd5041c45b730bf3","--out-dir","/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps","-L","dependency=/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps","--extern","funty=/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps/libfunty-7907d4fb477cb75f.rmeta","--extern","radium=/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps/libradium-3fb03e0f3cce1149.rmeta","--extern","tap=/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps/libtap-7b9871d2cf696d00.rmeta","--extern","wyz=/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps/libwyz-bb4278cd01418d32.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/nbaiocchi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps/libbitvec-fd5041c45b730bf3.rmeta"},"prelude":{"crate_id":{"name":"bitvec","disambiguator":[14733630852106092410,0]},"crate_root":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src","external_crates":[{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1482942822998146276,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","num":2,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8213023121058624814,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1453466684381863476,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[6350140743624839590,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14051362197407762759,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9149086998956066884,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10052156975085119838,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8205769154475333920,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6301584694146806614,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15443445678815071393,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[11686829219546108309,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[1288115582928114942,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[3368074392128242346,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[7654683265571716261,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[14210105045647006011,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[1449232587040508138,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","num":20,"id":{"name":"funty","disambiguator":[2981198078769221750,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","num":21,"id":{"name":"radium","disambiguator":[10863597483073951380,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","num":22,"id":{"name":"tap","disambiguator":[15029636964079060447,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","num":23,"id":{"name":"wyz","disambiguator":[15527852928175371580,0]}}],"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":0,"byte_end":11852,"line_start":1,"line_end":307,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":0},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":32620,"byte_end":32624,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"alias_span":null,"name":"core","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":32650,"byte_end":32655,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"alias_span":null,"name":"funty","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45790,"byte_end":45805,"line_start":449,"line_end":449,"column_start":15,"column_end":30},"alias_span":null,"name":"u8_from_ne_bits","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":5020},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":58441,"byte_end":58449,"line_start":37,"line_end":37,"column_start":21,"column_end":29},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":68}},{"kind":"Use","ref_id":{"krate":0,"index":5420},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":225937,"byte_end":225941,"line_start":367,"line_end":367,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1091}},{"kind":"Use","ref_id":{"krate":0,"index":5421},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":225937,"byte_end":225941,"line_start":367,"line_end":367,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1091}},{"kind":"Use","ref_id":{"krate":0,"index":530},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":231956,"byte_end":231964,"line_start":10,"line_end":10,"column_start":9,"column_end":17},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":24},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":231967,"byte_end":231973,"line_start":11,"line_end":11,"column_start":2,"column_end":8},"alias_span":null,"name":"bitarr","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":231976,"byte_end":231980,"line_start":12,"line_end":12,"column_start":2,"column_end":6},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":739},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":231990,"byte_end":231998,"line_start":13,"line_end":13,"column_start":9,"column_end":17},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":1112},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232017,"byte_end":232025,"line_start":15,"line_end":15,"column_start":3,"column_end":11},"alias_span":null,"name":"BitOrder","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":5420},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232029,"byte_end":232038,"line_start":16,"line_end":16,"column_start":3,"column_end":12},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":5421},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232029,"byte_end":232038,"line_start":16,"line_end":16,"column_start":3,"column_end":12},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":5420},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232042,"byte_end":232046,"line_start":17,"line_end":17,"column_start":3,"column_end":7},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":5421},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232042,"byte_end":232046,"line_start":17,"line_end":17,"column_start":3,"column_end":7},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":5442},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232050,"byte_end":232054,"line_start":18,"line_end":18,"column_start":3,"column_end":7},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":5443},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232050,"byte_end":232054,"line_start":18,"line_end":18,"column_start":3,"column_end":7},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":1779},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232070,"byte_end":232076,"line_start":21,"line_end":21,"column_start":3,"column_end":9},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":1568},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232080,"byte_end":232091,"line_start":22,"line_end":22,"column_start":3,"column_end":14},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":1386},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232095,"byte_end":232101,"line_start":23,"line_end":23,"column_start":3,"column_end":9},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":3372},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232115,"byte_end":232123,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":3522},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232133,"byte_end":232141,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"alias_span":null,"name":"BitStore","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":3553},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232150,"byte_end":232157,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"alias_span":null,"name":"_","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":23},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232165,"byte_end":232171,"line_start":28,"line_end":28,"column_start":2,"column_end":8},"alias_span":null,"name":"BitArr","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232220,"byte_end":232226,"line_start":32,"line_end":32,"column_start":2,"column_end":8},"alias_span":null,"name":"bitbox","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232229,"byte_end":232235,"line_start":33,"line_end":33,"column_start":2,"column_end":8},"alias_span":null,"name":"bitvec","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":4116},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232245,"byte_end":232251,"line_start":34,"line_end":34,"column_start":9,"column_end":15},"alias_span":null,"name":"BitBox","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":4928},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":232259,"byte_end":232265,"line_start":35,"line_end":35,"column_start":7,"column_end":13},"alias_span":null,"name":"BitVec","value":"","parent":{"krate":0,"index":1150}},{"kind":"Use","ref_id":{"krate":0,"index":1280},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236924,"byte_end":236939,"line_start":105,"line_end":105,"column_start":3,"column_end":18},"alias_span":null,"name":"check_alignment","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":23,"index":66},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236943,"byte_end":236950,"line_start":106,"line_end":106,"column_start":3,"column_end":10},"alias_span":null,"name":"Address","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":23,"index":238},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236954,"byte_end":236959,"line_start":107,"line_end":107,"column_start":3,"column_end":8},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":23,"index":239},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236954,"byte_end":236959,"line_start":107,"line_end":107,"column_start":3,"column_end":8},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":0,"index":5464},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236963,"byte_end":236976,"line_start":108,"line_end":108,"column_start":3,"column_end":16},"alias_span":null,"name":"MisalignError","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":23,"index":260},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236980,"byte_end":236983,"line_start":109,"line_end":109,"column_start":3,"column_end":6},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":23,"index":261},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236980,"byte_end":236983,"line_start":109,"line_end":109,"column_start":3,"column_end":6},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":23,"index":42},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":236987,"byte_end":236997,"line_start":110,"line_end":110,"column_start":3,"column_end":13},"alias_span":null,"name":"Mutability","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":23,"index":317},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237001,"byte_end":237013,"line_start":111,"line_end":111,"column_start":3,"column_end":15},"alias_span":null,"name":"NullPtrError","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":23,"index":318},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237001,"byte_end":237013,"line_start":111,"line_end":111,"column_start":3,"column_end":15},"alias_span":null,"name":"NullPtrError","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":0,"index":1386},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237027,"byte_end":237033,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":0,"index":1568},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237043,"byte_end":237054,"line_start":114,"line_end":114,"column_start":9,"column_end":20},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":0,"index":1779},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237069,"byte_end":237075,"line_start":116,"line_end":116,"column_start":3,"column_end":9},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":0,"index":5493},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237079,"byte_end":237090,"line_start":117,"line_end":117,"column_start":3,"column_end":14},"alias_span":null,"name":"BitPtrError","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":0,"index":5533},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237103,"byte_end":237115,"line_start":119,"line_end":119,"column_start":8,"column_end":20},"alias_span":null,"name":"BitSpanError","value":"","parent":{"krate":0,"index":1212}},{"kind":"Use","ref_id":{"krate":0,"index":2650},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363001,"byte_end":363009,"line_start":63,"line_end":63,"column_start":3,"column_end":11},"alias_span":null,"name":"from_mut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2653},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363013,"byte_end":363027,"line_start":64,"line_end":64,"column_start":3,"column_end":17},"alias_span":null,"name":"from_raw_parts","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2657},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363031,"byte_end":363049,"line_start":65,"line_end":65,"column_start":3,"column_end":21},"alias_span":null,"name":"from_raw_parts_mut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2647},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363053,"byte_end":363061,"line_start":66,"line_end":66,"column_start":3,"column_end":11},"alias_span":null,"name":"from_ref","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2661},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363065,"byte_end":363078,"line_start":67,"line_end":67,"column_start":3,"column_end":16},"alias_span":null,"name":"BitSliceIndex","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":5656},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363095,"byte_end":363105,"line_start":70,"line_end":70,"column_start":3,"column_end":13},"alias_span":null,"name":"BitRefIter","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":5671},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363109,"byte_end":363119,"line_start":71,"line_end":71,"column_start":3,"column_end":13},"alias_span":null,"name":"BitValIter","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":5791},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363123,"byte_end":363129,"line_start":72,"line_end":72,"column_start":3,"column_end":9},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":5864},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363133,"byte_end":363144,"line_start":73,"line_end":73,"column_start":3,"column_end":14},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":5904},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363148,"byte_end":363162,"line_start":74,"line_end":74,"column_start":3,"column_end":17},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":5830},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363166,"byte_end":363175,"line_start":75,"line_end":75,"column_start":3,"column_end":12},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2775},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363179,"byte_end":363183,"line_start":76,"line_end":76,"column_start":3,"column_end":7},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2855},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363187,"byte_end":363194,"line_start":77,"line_end":77,"column_start":3,"column_end":10},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":6384},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363198,"byte_end":363206,"line_start":78,"line_end":78,"column_start":3,"column_end":11},"alias_span":null,"name":"IterOnes","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":6433},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363210,"byte_end":363219,"line_start":79,"line_end":79,"column_start":3,"column_end":12},"alias_span":null,"name":"IterZeros","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":5939},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363223,"byte_end":363230,"line_start":80,"line_end":80,"column_start":3,"column_end":10},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":6012},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363234,"byte_end":363246,"line_start":81,"line_end":81,"column_start":3,"column_end":15},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":6052},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363250,"byte_end":363265,"line_start":82,"line_end":82,"column_start":3,"column_end":18},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":5978},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363269,"byte_end":363279,"line_start":83,"line_end":83,"column_start":3,"column_end":13},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":6202},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363283,"byte_end":363289,"line_start":84,"line_end":84,"column_start":3,"column_end":9},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2909},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363293,"byte_end":363302,"line_start":85,"line_end":85,"column_start":3,"column_end":12},"alias_span":null,"name":"RSplitMut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2933},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363306,"byte_end":363313,"line_start":86,"line_end":86,"column_start":3,"column_end":10},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2940},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363317,"byte_end":363327,"line_start":87,"line_end":87,"column_start":3,"column_end":13},"alias_span":null,"name":"RSplitNMut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":6112},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363331,"byte_end":363336,"line_start":88,"line_end":88,"column_start":3,"column_end":8},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2901},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363340,"byte_end":363348,"line_start":89,"line_end":89,"column_start":3,"column_end":11},"alias_span":null,"name":"SplitMut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2919},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363352,"byte_end":363358,"line_start":90,"line_end":90,"column_start":3,"column_end":9},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":2926},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363362,"byte_end":363371,"line_start":91,"line_end":91,"column_start":3,"column_end":12},"alias_span":null,"name":"SplitNMut","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":5752},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363375,"byte_end":363382,"line_start":92,"line_end":92,"column_start":3,"column_end":10},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":2239}},{"kind":"Use","ref_id":{"krate":0,"index":3742},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":656438,"byte_end":656446,"line_start":62,"line_end":62,"column_start":15,"column_end":23},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":3611}},{"kind":"Use","ref_id":{"krate":0,"index":4507},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":691978,"byte_end":691983,"line_start":46,"line_end":46,"column_start":2,"column_end":7},"alias_span":null,"name":"Drain","value":"","parent":{"krate":0,"index":4141}},{"kind":"Use","ref_id":{"krate":0,"index":7396},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":691986,"byte_end":691992,"line_start":47,"line_end":47,"column_start":2,"column_end":8},"alias_span":null,"name":"Splice","value":"","parent":{"krate":0,"index":4141}},{"kind":"Use","ref_id":{"krate":0,"index":3742},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":692019,"byte_end":692027,"line_start":49,"line_end":49,"column_start":23,"column_end":31},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":4141}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":0,"byte_end":11852,"line_start":1,"line_end":307,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":28},{"krate":0,"index":68},{"krate":0,"index":550},{"krate":0,"index":587},{"krate":0,"index":679},{"krate":0,"index":869},{"krate":0,"index":1061},{"krate":0,"index":1091},{"krate":0,"index":1150},{"krate":0,"index":1212},{"krate":0,"index":2239},{"krate":0,"index":3492},{"krate":0,"index":3539},{"krate":0,"index":3611},{"krate":0,"index":4141}],"decl_id":null,"docs":" # `bitvec` — Addressable Bits","sig":null,"attributes":[{"value":"* # `bitvec` — Addressable Bits\n\n`bitvec` provides the foundation tools needed to implement truly single-bit\n`bool` collections and arbitrary bit-precision addressing. It builds compact\ncollections and performant [bitfield] regions with a high-level, expressive, API\nthat compiles down to the simple machine instructions you would expect.\n\n# Examples\n\nThe [`examples/`] directory of the project repository contains some programs\nthat showcase different `bitvec` features and use cases. In addition, each data\nstructure’s API documentation contains more focused samples.\n\nTo begin using `bitvec`, you need only import its [prelude]. Once in scope,\n`bitvec` can take over existing memory buffers or create entirely new values:\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = &[0u8, 1, 2, 3];\nlet data_bits = data.view_bits::<Msb0>();\n\nlet literal_bits = bits![Lsb0, u16; 1, 0, 1, 1];\nassert_eq!(literal_bits.as_raw_slice()[0], 0b1101);\n\nlet array_bool = bitarr![1; 40];\n# #[cfg(feature = \"alloc\")] {\nlet boxed_bool = bitbox![Lsb0, u32; 1; 50];\nlet vec_bool = bitvec![Msb0, usize; 1; 60];\n# }\n```\n\nThe two easiest entry points into `bitvec` are through the [`BitView`] trait,\nwhich provides extension methods on ordinary memory to view it as a\n[`BitSlice`], and the [macro] constructors, which convert token strings into\nappropriate buffers at compile time. Each data structure also has its own\nconstructor functions that create new buffers or borrow existing values.\n\nOnce in use, `bitvec`’s types obey all the same patterns and APIs that you have\ncome to expect from their analogues in the [`core`], [`alloc`], and [`std`]\nlibraries.\n\n# Usage\n\n`bitvec` provides data structures that specialize the major sequence types in\nthe standard libraries:\n\n- `[bool]` becomes [`BitSlice`]\n- `[bool; N]` becomes [`BitArray`]\n- `Box<[bool]>` becomes [`BitBox`]\n- `Vec<bool>` becomes [`BitVec`]\n\nYou can start using the crate in an existing codebase by replacing types and\nchasing compiler errors from there.\n\nAs an example,\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nlet mut io_buf: Vec<u8> = Vec::new();\nio_buf.extend(&[0x47, 0xA5]);\n\nlet stats: Vec<bool> = vec![\n  true, false, true, true,\n  false, false, true, false,\n];\n# }\n```\n\nwould become\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nuse bitvec::prelude::*;\n\nlet mut io_buf: BitVec<Msb0, u8> = BitVec::new();\nio_buf.resize(16, false);\nio_buf[.. 4].store(4u8);\nio_buf[4 .. 8].store(7u8);\nio_buf[8 .. 16].store(0xA5u8);\n\nlet stats: BitVec = bitvec![\n  1, 0, 1, 1,\n  0, 0, 1, 0,\n];\n# }\n```\n\n## Type Arguments\n\nThe `bitvec` data structures are all generic over two type parameters which\ncontrol how they view and manage the memory they use. These type parameters\nallow users to precisely control the memory layout, value bit-patterns, and\ngenerated instructions, but most users of the library will not need to be\ngeneric over them. Instead, you probably either do not care about the details of\nthe underlying memory, or you have a specific and fixed layout requirement. In\neither case, you will likely select a specific combination of type arguments and\nuse it consistently throughout your project.\n\nYou *can* write your project to be generic over these type arguments, and this\nis certainly useful when writing code that is not coupled directly to memory,\nincreases complexity with little practical gain.\n\nThe default type arguments are chosen for optimal behavior in memory use and\ninstruction selection. The unadorned types [`BitArray`], [`BitSlice`],\n[`BitBox`], and [`BitVec`] can all be used in type-annotation position (`let`\nbindings, `struct` fields, and function arguments). Users who need to specify\ntheir type arguments should prefer to do so in a `type` alias, and use that\nalias throughout their project instead of the much longer fully-qualified\n`bitvec` type names:\n\n```rust\nuse bitvec::prelude::*;\n\npub type MySlice = BitSlice<Msb0, u8>;\npub type MyArray20 = BitArr!(for 20, in Msb0, u8);\n# #[cfg(feature = \"alloc\")]\npub type MyVec = BitVec<Msb0, u8>;\n\nfn make_buffer() -> MyVec {\n  MyVec::new()\n}\n```\n\nIn general, you will probably work with [`BitSlice`] borrows and [`BitVec`]\nowned buffers. The [`BitArray`] and [`BitBox`] types are provided for\ncompleteness and have their uses, but the additional constraints and frozen size\nrender them less commonly useful.\n\n## Additional Details\n\nAs a replacement for `bool` sequences, you should be able to replace old type\ndefinition and value construction sites with their corresponding items from this\nproject, and the rest of your project should just work with the new types.\n\nTo use `bitvec` for structural [bitfields] or specialized I/O protocol buffers,\nyou should use [`BitArray`] or [`BitVec`] to manage your data buffers (for\ncompile-time statically-sized and run-time dynamically-sized, respectively), and\nthe [`BitField`] trait to manage transferring values into and out of them.\n\nThe [`BitSlice`] type contains most of the behavior that interacts with the\n*contents* of a memory buffer. [`BitVec`] adds behavior that operates on\nallocations, and specializes [`BitSlice`] behaviors that can take advantage of\nowned buffers.\n\nThe [`domain`] module, whose types are accessed by the `.{bit_,}domain{,_mut}`\nmethods on [`BitSlice`], allows users to split their views of memory at aliasing\nboundaries. This removes synchronization guards where `bitvec` can prove that\ndoing so is legal and correct.\n\nThere are many ways to construct a bit-level view of data. The [`BitArray`],\n[`BitBox`], and [`BitVec`] types all own a buffer of memory and dereference it\nto [`BitSlice`] in order to view it. In addition, you can borrow any piece of\nordinary Rust memory as a `BitSlice` view by using its borrowing constructor\nfunctions or the [`BitView`] trait’s extension methods.\n\n# Capabilities\n\n`bitvec` stands out from other bit-sequence libraries, both in Rust and in other\nlanguages, in a few significant ways.\n\nUnlike other Rust libraries, `bitvec` stores its region information in\nspecially-encoded pointers *to* memory regions, rather than in the region\nitself. By using its own pointer encoding scheme, `bitvec` can use references\n(`&BitSlice<_, _>` and `&mut BitSlice<_, _>`) to manage memory accesses and fit\nseamlessly into the Rust language rules and API signatures.\n\nUnlike *any* other bit-sequence system, `bitvec` enables users to specify both\nthe register element type used to store data and also the ordering of bits\nwithin each register element. This sidesteps the problems found in C\n[bitfields], C++ [`std::bitset`] and [`std::vector<bool>`], Python’s\n[`bitstring`], Erlang’s [`bitstream`], and other Rust libraries such as\n[`bit-vec`].\n\nBy permitting the in-memory layout to be specified by the user, rather than\nhard-coding it within the library, `bitvec` enables users to select the behavior\ncharacteristics they want or need without significant effort on their part.\n\nThis works by supplying two type parameters: an `O` [`BitOrder`] ordering of\nbits within a register element, and a `T` [`BitStore`] register element used for\nstorage and memory description. `T` is restricted to be only the raw unsigned\nintegers, and [`bitvec`-provided wrappers][`BitSafe`] over [atomic] and [`Cell`]\nsynchronization guards, that fit within processor registers on your target.\n\nThese parameters permit the `bitvec` type system to track memory access rules\nand bit addressing, thus enabling a nearly seamless use of [`BitSlice`]s as if\nthey were ordinary Rust slices.\n\n`bitvec` correctly handles memory aliasing by leveraging the type system to mark\nregions that have become subject to shared mutability. This mark can, depending\non your build settings, either forbid moving such slices across threads, or\nissue lock instructions to the memory bus when accessing memory. You will never\nneed to add your own guards to prevent race conditions, and [`BitSlice`]\nprovides interfaces to separate any bit-slice into its aliased and unaliased\nsubslices.\n\nWhere possible, `bitvec` uses its knowledge of bit ordering and memory\navailability to accelerate memory operations from individual bit-by-bit walks to\nbatched operations within a register. This is an area of ongoing development,\nand is an implementation detail rather than an aspect of public API.\n\n`bitvec`’s performance even when working with individual bits is as close to\nideal as a general-purpose library can be, but the width of processor registers\nmeans that no amount of performance improvement at the individual bit level can\ncompete with instructions operating on 32 or 64 bits at once. If you encounter\nperformance bottlenecks, you can escape `bitvec`’s views to operate on the\nmemory directly, or submit an issue for future work on specialized batch\nparallelization.\n\n# Project Structure\n\nYou should generally import the library [prelude], with\n\n```rust\nuse bitvec::prelude::*;\n```\n\nThe prelude contains the basic symbols you will need to make use of the crate:\nthe names of data structures, ordering parameters, useful traits, and\nconstructor macros. Almost all symbols begin with the prefix `Bit`; only the\norderings [`Lsb0`], [`Msb0`], and [`LocalBits`] do not. This will reduce the\nlikelihood of name collisions.\n\nEach major component in the library is divided into its own module. This\nincludes each data structure and trait, as well as utility objects used for\nimplementation. The data structures that mirror the language distribution have\nsubmodules for each part of their mirroring: `api` ports inherent methods,\n`iter` contains iteration logic, `ops` overrides operator sigils, and `traits`\nholds all other trait implementations. The data structure’s own module typically\nonly contains its own definition and its inherent methods that are not ports of\nthe standard libraries.\n\n[atomic]: core::sync::atomic\n[bitfield]: https://en.cppreference.com/w/c/language/bit_field\n[bitfields]: https://en.cppreference.com/w/c/language/bit_field\n[macro]: #macros\n[prelude]: crate::prelude\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitField`]: crate::field::BitField\n[`BitOrder`]: crate::order::BitOrder\n[`BitSafe`]: crate::access::BitSafe\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`BitView`]: crate::view::BitView\n[`Cell`]: core::cell::Cell\n[`LocalBits`]: crate::order::LocalBits\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n\n[`alloc`]: alloc\n[`bitstream`]: https://erlang.org/doc/programming_examples/bit_syntax.html\n[`bitstring`]: https://pypi.org/project/bitstring/\n[`bit-vec`]: https://crates.io/crates/bit-vec\n[`core`]: core\n[`domain`]: crate::domain\n[`examples/`]: https://github.com/myrrlyn/bitvec/tree/HEAD/examples\n[`std`]: std\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":0,"byte_end":10859,"line_start":1,"line_end":263,"column_start":1,"column_end":4}},{"value":"warn(missing_docs)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":10934,"byte_end":10952,"line_start":266,"line_end":266,"column_start":31,"column_end":49}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11011,"byte_end":11044,"line_start":268,"line_end":268,"column_start":1,"column_end":34}},{"value":"allow(clippy :: single_char_add_str,)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11094,"byte_end":11162,"line_start":270,"line_end":272,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" Constructor macros for the crate’s collection types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11512,"byte_end":11524,"line_start":283,"line_end":283,"column_start":1,"column_end":13}},{"value":"/ Constructor macros for the crate’s collection types.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":11854,"byte_end":11912,"line_start":1,"line_end":1,"column_start":1,"column_end":57}},{"value":"allow(deprecated)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":11914,"byte_end":11935,"line_start":3,"line_end":3,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"internal","qualname":"::macros::internal","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"decl_id":null,"docs":" Internal implementation macros for the public exports.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":11937,"byte_end":11949,"line_start":5,"line_end":5,"column_start":1,"column_end":13}},{"value":"* Internal implementation macros for the public exports.\n\nThe macros in this module are required to be exported from the crate, as the\npublic macros will call them from client contexts (`macro_rules!` expansion\nbodies are not in source crate scope, as they are token expansion rather than\nsymbolic calls). However, they are not part of the public *API* of the crate,\nand are not intended for use anywhere but in the expansion bodies of the\npublic-API constructor macros.\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":32102,"byte_end":32578,"line_start":1,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":44909,"byte_end":44924,"line_start":401,"line_end":401,"column_start":14,"column_end":29},"name":"u8_from_le_bits","qualname":"::macros::internal::u8_from_le_bits","value":"pub const fn u8_from_le_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Lsb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Lsb0-order.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":44721,"byte_end":44774,"line_start":398,"line_end":398,"column_start":1,"column_end":54}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":44810,"byte_end":44824,"line_start":399,"line_end":399,"column_start":36,"column_end":50}},{"value":"allow(clippy :: many_single_char_names, clippy :: too_many_arguments)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":44827,"byte_end":44895,"line_start":400,"line_end":400,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45365,"byte_end":45380,"line_start":424,"line_end":424,"column_start":14,"column_end":29},"name":"u8_from_be_bits","qualname":"::macros::internal::u8_from_be_bits","value":"pub const fn u8_from_be_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Msb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Msb0-order.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45177,"byte_end":45230,"line_start":421,"line_end":421,"column_start":1,"column_end":54}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45266,"byte_end":45280,"line_start":422,"line_end":422,"column_start":36,"column_end":50}},{"value":"allow(clippy :: many_single_char_names, clippy :: too_many_arguments)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros/internal.rs","byte_start":45283,"byte_end":45351,"line_start":423,"line_end":423,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"access","qualname":"::access","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":67},{"krate":0,"index":4990},{"krate":0,"index":4992},{"krate":0,"index":4975},{"krate":0,"index":4994},{"krate":0,"index":4996},{"krate":0,"index":4980},{"krate":0,"index":4998},{"krate":0,"index":5000},{"krate":0,"index":4985},{"krate":0,"index":5007},{"krate":0,"index":5009},{"krate":0,"index":5002},{"krate":0,"index":5016},{"krate":0,"index":5018},{"krate":0,"index":5011}],"decl_id":null,"docs":" Memory access guards.","sig":null,"attributes":[{"value":"* Memory access guards.\n\n[`bitvec`] allows a program to produce handles over memory that do not logically\nalias their bits, but may alias in hardware. This module provides a unified\ninterface for memory accesses that can be specialized to handle aliased and\nunaliased access events.\n\nThe [`BitAccess`] trait provides capabilities to access bits in memory elements\nthrough shared references, and its implementations are responsible for\ncoördinating synchronization and contention as needed.\n\nThe [`BitSafe`] trait abstracts over wrappers to the [`Cell`] and [atomic] types\nthat forbid writing through their references, even when other references to the\nsame location may write.\n\n[`BitAccess`]: crate::access::BitAccess\n[`BitSafe`]: crate::access::BitSafe\n[`Cell`]: core::cell::Cell\n[`bitvec`]: crate\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":46118,"byte_end":46924,"line_start":1,"line_end":20,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":52},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":47920,"byte_end":47929,"line_start":55,"line_end":55,"column_start":11,"column_end":20},"name":"BitAccess","qualname":"::access::BitAccess","value":"BitAccess: Radium","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":58}],"decl_id":null,"docs":" Abstracts over the instructions used when accessing a memory location.","sig":null,"attributes":[{"value":"* Abstracts over the instructions used when accessing a memory location.\n\nThis trait provides functions to manipulate bits in a referent memory register\nthrough the appropriate access instructions, so that use sites elsewhere in the\ncrate can select their required behavior without changing their interface.\n\nThis is automatically implemented for all types that permit shared/mutable\nmemory access to memory registers through the [`radium`] crate. Its use is\nconstrained in the [`store`] module.\n\nThis trait is only ever used by [`bitvec`] internals, and is never exposed\noutside the crate. It must be marked as public so that it can be used as an\nassociated item in [`BitStore`], even though it is never made accessible.\n\n[`BitStore`]: crate::store::BitStore\n[`bitvec`]: crate\n[`radium`]: radium\n[`store`]: crate::store\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":47083,"byte_end":47909,"line_start":36,"line_end":54,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48945,"byte_end":48955,"line_start":82,"line_end":82,"column_start":5,"column_end":15},"name":"clear_bits","qualname":"::access::BitAccess::clear_bits","value":"pub fn clear_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Clears any number of bits in a memory register to `0`.","sig":null,"attributes":[{"value":"/ Clears any number of bits in a memory register to `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":47983,"byte_end":48041,"line_start":58,"line_end":58,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48043,"byte_end":48046,"line_start":59,"line_end":59,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48048,"byte_end":48122,"line_start":60,"line_end":60,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48124,"byte_end":48199,"line_start":61,"line_end":61,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48201,"byte_end":48263,"line_start":62,"line_end":62,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48265,"byte_end":48268,"line_start":63,"line_end":63,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48270,"byte_end":48286,"line_start":64,"line_end":64,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48288,"byte_end":48291,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48293,"byte_end":48306,"line_start":66,"line_end":66,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48308,"byte_end":48381,"line_start":67,"line_end":67,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48383,"byte_end":48457,"line_start":68,"line_end":68,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48459,"byte_end":48476,"line_start":69,"line_end":69,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48478,"byte_end":48481,"line_start":70,"line_end":70,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48483,"byte_end":48496,"line_start":71,"line_end":71,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48498,"byte_end":48501,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48503,"byte_end":48579,"line_start":73,"line_end":73,"column_start":2,"column_end":78}},{"value":"/ cleared. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48581,"byte_end":48654,"line_start":74,"line_end":74,"column_start":2,"column_end":75}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48656,"byte_end":48686,"line_start":75,"line_end":75,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48688,"byte_end":48691,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ Do not invert the `mask` prior to calling this function in order to save","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48693,"byte_end":48769,"line_start":77,"line_end":77,"column_start":2,"column_end":78}},{"value":"/ the unselected bits and clear the selected bits. [`BitMask`] is a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48771,"byte_end":48840,"line_start":78,"line_end":78,"column_start":2,"column_end":71}},{"value":"/ selection type, not a bitwise-operation argument.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48842,"byte_end":48895,"line_start":79,"line_end":79,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48897,"byte_end":48900,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ [`BitMask`]: crate::index::BitMask","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":48902,"byte_end":48940,"line_start":81,"line_end":81,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49768,"byte_end":49776,"line_start":104,"line_end":104,"column_start":5,"column_end":13},"name":"set_bits","qualname":"::access::BitAccess::set_bits","value":"pub fn set_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Sets any number of bits in a memory register to `1`.","sig":null,"attributes":[{"value":"/ Sets any number of bits in a memory register to `1`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49062,"byte_end":49118,"line_start":86,"line_end":86,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49120,"byte_end":49123,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49125,"byte_end":49199,"line_start":88,"line_end":88,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49201,"byte_end":49276,"line_start":89,"line_end":89,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49278,"byte_end":49340,"line_start":90,"line_end":90,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49342,"byte_end":49345,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49347,"byte_end":49363,"line_start":92,"line_end":92,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49365,"byte_end":49368,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49370,"byte_end":49383,"line_start":94,"line_end":94,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49385,"byte_end":49458,"line_start":95,"line_end":95,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49460,"byte_end":49534,"line_start":96,"line_end":96,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49536,"byte_end":49553,"line_start":97,"line_end":97,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49555,"byte_end":49558,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49560,"byte_end":49573,"line_start":99,"line_end":99,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49575,"byte_end":49578,"line_start":100,"line_end":100,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49580,"byte_end":49656,"line_start":101,"line_end":101,"column_start":2,"column_end":78}},{"value":"/ cleared. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49658,"byte_end":49731,"line_start":102,"line_end":102,"column_start":2,"column_end":75}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49733,"byte_end":49763,"line_start":103,"line_end":103,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50584,"byte_end":50595,"line_start":126,"line_end":126,"column_start":5,"column_end":16},"name":"invert_bits","qualname":"::access::BitAccess::invert_bits","value":"pub fn invert_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Inverts any number of bits in a memory register.","sig":null,"attributes":[{"value":"/ Inverts any number of bits in a memory register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49881,"byte_end":49933,"line_start":108,"line_end":108,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49935,"byte_end":49938,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":49940,"byte_end":50014,"line_start":110,"line_end":110,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50016,"byte_end":50091,"line_start":111,"line_end":111,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50093,"byte_end":50155,"line_start":112,"line_end":112,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50157,"byte_end":50160,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50162,"byte_end":50178,"line_start":114,"line_end":114,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50180,"byte_end":50183,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50185,"byte_end":50198,"line_start":116,"line_end":116,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50200,"byte_end":50273,"line_start":117,"line_end":117,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50275,"byte_end":50349,"line_start":118,"line_end":118,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50351,"byte_end":50368,"line_start":119,"line_end":119,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50370,"byte_end":50373,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50375,"byte_end":50388,"line_start":121,"line_end":121,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50390,"byte_end":50393,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50395,"byte_end":50471,"line_start":123,"line_end":123,"column_start":2,"column_end":78}},{"value":"/ inverted. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50473,"byte_end":50547,"line_start":124,"line_end":124,"column_start":2,"column_end":76}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50549,"byte_end":50579,"line_start":125,"line_end":125,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51469,"byte_end":51478,"line_start":154,"line_end":154,"column_start":5,"column_end":14},"name":"write_bit","qualname":"::access::BitAccess::write_bit","value":"pub fn write_bit<O>(&Self, BitIdx<Self::Item>, bool) -> bool where O: BitOrder","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Writes a value to one bit in a memory register.","sig":null,"attributes":[{"value":"/ Writes a value to one bit in a memory register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50701,"byte_end":50752,"line_start":130,"line_end":130,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50754,"byte_end":50757,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50759,"byte_end":50780,"line_start":132,"line_end":132,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50782,"byte_end":50785,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ - `O`: A bit ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50787,"byte_end":50813,"line_start":134,"line_end":134,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50815,"byte_end":50818,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50820,"byte_end":50836,"line_start":136,"line_end":136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50838,"byte_end":50841,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50843,"byte_end":50856,"line_start":138,"line_end":138,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to write.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50858,"byte_end":50923,"line_start":139,"line_end":139,"column_start":2,"column_end":67}},{"value":"/ - `value`: The bit value to write into `*self` at `index`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50925,"byte_end":50987,"line_start":140,"line_end":140,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50989,"byte_end":50992,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":50994,"byte_end":51007,"line_start":142,"line_end":142,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51009,"byte_end":51012,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ The bit previously stored in `*self` at `index`. As these operations are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51014,"byte_end":51090,"line_start":144,"line_end":144,"column_start":2,"column_end":78}},{"value":"/ required to load the `*self` value from memory in order to work, the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51092,"byte_end":51164,"line_start":145,"line_end":145,"column_start":2,"column_end":74}},{"value":"/ previous value can be retained to reduce spurious loads elsewhere in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51166,"byte_end":51242,"line_start":146,"line_end":146,"column_start":2,"column_end":78}},{"value":"/ crate.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51244,"byte_end":51254,"line_start":147,"line_end":147,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51256,"byte_end":51259,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51261,"byte_end":51274,"line_start":149,"line_end":149,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51276,"byte_end":51279,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ The memory register at address `self` has the bit corresponding to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51281,"byte_end":51355,"line_start":151,"line_end":151,"column_start":2,"column_end":76}},{"value":"/ `index` cursor under the `O` order written with the new `value`, and all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51357,"byte_end":51433,"line_start":152,"line_end":152,"column_start":2,"column_end":78}},{"value":"/ other bits are unchanged.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51435,"byte_end":51464,"line_start":153,"line_end":153,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52291,"byte_end":52302,"line_start":181,"line_end":181,"column_start":5,"column_end":16},"name":"get_writers","qualname":"::access::BitAccess::get_writers","value":"pub fn get_writers(bool) -> for<'a>fn(: &'a Self, : BitMask<Self::Item>)","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Gets the function that writes `value` into all bits under a mask.","sig":null,"attributes":[{"value":"/ Gets the function that writes `value` into all bits under a mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51787,"byte_end":51856,"line_start":166,"line_end":166,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51858,"byte_end":51861,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51863,"byte_end":51879,"line_start":168,"line_end":168,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51881,"byte_end":51884,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ - `value`: The bit that will be directly written by the returned","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51886,"byte_end":51954,"line_start":170,"line_end":170,"column_start":2,"column_end":70}},{"value":"/   function.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51956,"byte_end":51971,"line_start":171,"line_end":171,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51973,"byte_end":51976,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51978,"byte_end":51991,"line_start":173,"line_end":173,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51993,"byte_end":51996,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ A function which, when applied to a reference and a mask, will write","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":51998,"byte_end":52070,"line_start":175,"line_end":175,"column_start":2,"column_end":74}},{"value":"/ `value` into memory. If `value` is `false`, then this produces","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52072,"byte_end":52138,"line_start":176,"line_end":176,"column_start":2,"column_end":68}},{"value":"/ [`clear_bits`]; if it is `true`, then this produces [`set_bits`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52140,"byte_end":52209,"line_start":177,"line_end":177,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52211,"byte_end":52214,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ [`clear_bits`]: Self::clear_bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52216,"byte_end":52252,"line_start":179,"line_end":179,"column_start":2,"column_end":38}},{"value":"/ [`set_bits`]: Self::set_bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52254,"byte_end":52286,"line_start":180,"line_end":180,"column_start":2,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52867,"byte_end":52874,"line_start":205,"line_end":205,"column_start":11,"column_end":18},"name":"BitSafe","qualname":"::access::BitSafe","value":"BitSafe","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"decl_id":null,"docs":" Restricts memory modification to only exclusive references.","sig":null,"attributes":[{"value":"* Restricts memory modification to only exclusive references.\n\nThe shared-mutability types do not permit locking their references to prevent\nwriting through them when inappropriate. Implementors of this trait are able to\nview aliased memory and handle other references writing to it, even though they\nthemselves may be forbidden from doing so.\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52507,"byte_end":52856,"line_start":198,"line_end":204,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":63},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53058,"byte_end":53061,"line_start":210,"line_end":210,"column_start":7,"column_end":10},"name":"Mem","qualname":"::access::BitSafe::Mem","value":"type Mem: BitRegister;","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" The register type being guarded against shared mutation.","sig":null,"attributes":[{"value":"/ The register type being guarded against shared mutation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52878,"byte_end":52938,"line_start":206,"line_end":206,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52940,"byte_end":52943,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ This is only present as an extra proof that the type graph all uses the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52945,"byte_end":53020,"line_start":208,"line_end":208,"column_start":2,"column_end":77}},{"value":"/ same underlying integers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53022,"byte_end":53051,"line_start":209,"line_end":209,"column_start":2,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":64},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53295,"byte_end":53298,"line_start":216,"line_end":216,"column_start":7,"column_end":10},"name":"Rad","qualname":"::access::BitSafe::Rad","value":"type Rad: Radium<Item = Self::Mem>;","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" The accessor type being prevented from mutating while shared.","sig":null,"attributes":[{"value":"/ The accessor type being prevented from mutating while shared.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53078,"byte_end":53143,"line_start":212,"line_end":212,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53145,"byte_end":53148,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ This is exposed as an associated type so that `BitStore` can name it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53150,"byte_end":53222,"line_start":214,"line_end":214,"column_start":2,"column_end":74}},{"value":"/ without having to re-select it based on crate configuration.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53224,"byte_end":53288,"line_start":215,"line_end":215,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53431,"byte_end":53435,"line_start":220,"line_end":220,"column_start":5,"column_end":9},"name":"load","qualname":"::access::BitSafe::load","value":"pub fn load(&Self) -> Self::Mem","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Reads the value out of memory only if a shared reference to the location\n can be produced.\n","sig":null,"attributes":[{"value":"/ Reads the value out of memory only if a shared reference to the location","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53328,"byte_end":53404,"line_start":218,"line_end":218,"column_start":2,"column_end":78}},{"value":"/ can be produced.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53406,"byte_end":53426,"line_start":219,"line_end":219,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53563,"byte_end":53568,"line_start":224,"line_end":224,"column_start":5,"column_end":10},"name":"store","qualname":"::access::BitSafe::store","value":"pub fn store(&mut Self, Self::Mem)","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Writes a value into memory only if an exclusive reference to the\n location can be produced.\n","sig":null,"attributes":[{"value":"/ Writes a value into memory only if an exclusive reference to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53459,"byte_end":53527,"line_start":222,"line_end":222,"column_start":2,"column_end":70}},{"value":"/ location can be produced.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53529,"byte_end":53558,"line_start":223,"line_end":223,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":4990},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55103,"byte_end":55112,"line_start":281,"line_end":281,"column_start":8,"column_end":17},"name":"BitSafeU8","qualname":"::access::BitSafeU8","value":"BitSafeU8 {  }","parent":null,"children":[{"krate":0,"index":4991}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4994},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55149,"byte_end":55159,"line_start":282,"line_end":282,"column_start":9,"column_end":19},"name":"BitSafeU16","qualname":"::access::BitSafeU16","value":"BitSafeU16 {  }","parent":null,"children":[{"krate":0,"index":4995}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4998},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55197,"byte_end":55207,"line_start":283,"line_end":283,"column_start":9,"column_end":19},"name":"BitSafeU32","qualname":"::access::BitSafeU32","value":"BitSafeU32 {  }","parent":null,"children":[{"krate":0,"index":4999}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5007},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55289,"byte_end":55299,"line_start":287,"line_end":287,"column_start":14,"column_end":24},"name":"BitSafeU64","qualname":"::access::BitSafeU64","value":"BitSafeU64 {  }","parent":null,"children":[{"krate":0,"index":5008}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5016},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":55346,"byte_end":55358,"line_start":289,"line_end":289,"column_start":16,"column_end":28},"name":"BitSafeUsize","qualname":"::access::BitSafeUsize","value":"BitSafeUsize {  }","parent":null,"children":[{"krate":0,"index":5017}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53678,"byte_end":53746,"line_start":229,"line_end":229,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53749,"byte_end":53821,"line_start":230,"line_end":230,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53824,"byte_end":53894,"line_start":231,"line_end":231,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53897,"byte_end":53921,"line_start":232,"line_end":232,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53924,"byte_end":53927,"line_start":233,"line_end":233,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":53930,"byte_end":54000,"line_start":234,"line_end":234,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54003,"byte_end":54072,"line_start":235,"line_end":235,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54075,"byte_end":54146,"line_start":236,"line_end":236,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54149,"byte_end":54219,"line_start":237,"line_end":237,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54222,"byte_end":54252,"line_start":238,"line_end":238,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54255,"byte_end":54258,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54261,"byte_end":54331,"line_start":240,"line_end":240,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54334,"byte_end":54406,"line_start":241,"line_end":241,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54409,"byte_end":54422,"line_start":242,"line_end":242,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54425,"byte_end":54428,"line_start":243,"line_end":243,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54431,"byte_end":54471,"line_start":244,"line_end":244,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54474,"byte_end":54504,"line_start":245,"line_end":245,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54507,"byte_end":54536,"line_start":246,"line_end":246,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":54558,"byte_end":54578,"line_start":248,"line_end":248,"column_start":3,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":68},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":172},{"krate":0,"index":281},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":536}],"decl_id":null,"docs":" A statically-allocated, fixed-size, buffer containing a [`BitSlice`] region.","sig":null,"attributes":[{"value":"* A statically-allocated, fixed-size, buffer containing a [`BitSlice`] region.\n\nYou can read the language’s [array fundamental documentation][std] here.\n\nThis module defines the [`BitArray`] immediate type, and its associated support\ncode.\n\n[`BitArray`] is equivalent to `[bool; N]`, in its operation and in its\nrelationship to the [`BitSlice`] type. It has little behavior or properties in\nits own right, and serves solely as a type capable of being used in immediate\nvalue position, and delegates to `BitSlice` for all actual work.\n\n[`BitArray`]: crate::array::BitArray\n[`BitSlice`]: crate::slice::BitSlice\n[std]: https://doc.rust-lang.org/stable/std/primitive.array.html\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":57551,"byte_end":58232,"line_start":1,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5020},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65261,"byte_end":65269,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::array::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":5023},{"krate":0,"index":5024}],"decl_id":null,"docs":" A by-value [bit-array] iterator.","sig":null,"attributes":[{"value":"* A by-value [bit-array] iterator.\n\n# Original\n\n[`array::IntoIter`](core::array::IntoIter)\n\n[bit-array]: crate::array::BitArray\n[`BitView`]: crate::view::BitView\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65065,"byte_end":65232,"line_start":26,"line_end":34,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66031,"byte_end":66042,"line_start":76,"line_end":76,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable slice of all bits that have not been yielded yet.","sig":null,"attributes":[{"value":"/ Returns an immutable slice of all bits that have not been yielded yet.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65850,"byte_end":65924,"line_start":70,"line_end":70,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65926,"byte_end":65929,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65931,"byte_end":65945,"line_start":72,"line_end":72,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65947,"byte_end":65950,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_slice`](core::array::IntoIter::as_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65952,"byte_end":66011,"line_start":74,"line_end":74,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66013,"byte_end":66022,"line_start":75,"line_end":75,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66295,"byte_end":66303,"line_start":84,"line_end":84,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66171,"byte_end":66188,"line_start":81,"line_end":81,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66190,"byte_end":66220,"line_start":82,"line_end":82,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66222,"byte_end":66286,"line_start":83,"line_end":83,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66551,"byte_end":66566,"line_start":94,"line_end":94,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable slice of all bits that have not been yielded yet.","sig":null,"attributes":[{"value":"/ Returns a mutable slice of all bits that have not been yielded yet.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66365,"byte_end":66436,"line_start":88,"line_end":88,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66438,"byte_end":66441,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66443,"byte_end":66457,"line_start":90,"line_end":90,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66459,"byte_end":66462,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_mut_slice`](core::array::IntoIter::as_mut_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66464,"byte_end":66531,"line_start":92,"line_end":92,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66533,"byte_end":66542,"line_start":93,"line_end":93,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66854,"byte_end":66866,"line_start":106,"line_end":106,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66726,"byte_end":66743,"line_start":103,"line_end":103,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66745,"byte_end":66775,"line_start":104,"line_end":104,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitslice` to view the underlying slice\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":66777,"byte_end":66845,"line_start":105,"line_end":105,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":5029},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80921,"byte_end":80941,"line_start":472,"line_end":472,"column_start":12,"column_end":32},"name":"TryFromBitSliceError","qualname":"::array::traits::TryFromBitSliceError","value":"TryFromBitSliceError {  }","parent":null,"children":[{"krate":0,"index":5033}],"decl_id":null,"docs":" The error type returned when a conversion from a [`BitSlice`] to a\n[`BitArray`] fails.","sig":null,"attributes":[{"value":"* The error type returned when a conversion from a [`BitSlice`] to a\n[`BitArray`] fails.\n\n[`BitArray`]: crate::array::BitArray\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80664,"byte_end":80833,"line_start":464,"line_end":469,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80834,"byte_end":80854,"line_start":470,"line_end":470,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":530},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61988,"byte_end":61996,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"BitArray","qualname":"::array::BitArray","value":"BitArray {  }","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535}],"decl_id":null,"docs":" An array of individual bits, able to be held by value on the stack.","sig":null,"attributes":[{"value":"* An array of individual bits, able to be held by value on the stack.\n\nThis type is generic over all [`Sized`] implementors of the [`BitView`] trait.\nDue to limitations in the Rust language’s const-generics implementation (it is\nboth unstable and incomplete), this must take an array type parameter directly,\nrather than register type and bit-count integer parameters. This makes it less\nconvenient to use than C++’s [`std::bitset<N>`] array type. The [`bitarr!`]\nmacro is capable of constructing both values and specific types of `BitArray`,\nand this macro should be preferred for most use.\n\nThe advantage of using this wrapper is that it implements [`Deref`]/[`Mut`] to\n[`BitSlice`], as well as implementing all of `BitSlice`s traits by forwarding to\nthe `BitSlice` view of its contained data. This allows it to have `BitSlice`\nbehavior by itself, without requiring explicit [`.as_bitslice()`] calls in user\ncode.\n\n# Limitations\n\nThis does not track start or end indices of its [`BitSlice`] view, and so that\nview will always fully span the buffer. You cannot produce, for example, an\narray of twelve bits.\n\n# Type Parameters\n\n- `O`: The ordering of bits within memory registers.\n- `V`: Some buffer which can be used as the basis for a [`BitSlice`] view. This\n  will usually be an array of `[T: BitRegister; N]`.\n\n# Examples\n\nThis type is useful for marking that some value is always to be used as a\n[`BitSlice`].\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":59133,"byte_end":60558,"line_start":69,"line_end":101,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60559,"byte_end":60562,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60563,"byte_end":60574,"line_start":103,"line_end":103,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60575,"byte_end":60602,"line_start":104,"line_end":104,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60603,"byte_end":60606,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ struct HasBitfields {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60607,"byte_end":60632,"line_start":106,"line_end":106,"column_start":1,"column_end":26}},{"value":"/   header: u32,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60633,"byte_end":60651,"line_start":107,"line_end":107,"column_start":1,"column_end":19}},{"value":"/   // creates a type declaration.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60652,"byte_end":60688,"line_start":108,"line_end":108,"column_start":1,"column_end":37}},{"value":"/   fields: BitArr!(for 20, in Msb0, u8),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60689,"byte_end":60732,"line_start":109,"line_end":109,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60733,"byte_end":60738,"line_start":110,"line_end":110,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60739,"byte_end":60742,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ impl HasBitfields {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60743,"byte_end":60766,"line_start":112,"line_end":112,"column_start":1,"column_end":24}},{"value":"/   pub fn new() -> Self {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60767,"byte_end":60795,"line_start":113,"line_end":113,"column_start":1,"column_end":29}},{"value":"/     Self {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60796,"byte_end":60810,"line_start":114,"line_end":114,"column_start":1,"column_end":15}},{"value":"/       header: 0,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60811,"byte_end":60831,"line_start":115,"line_end":115,"column_start":1,"column_end":21}},{"value":"/       // creates a value object.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60832,"byte_end":60868,"line_start":116,"line_end":116,"column_start":1,"column_end":37}},{"value":"/       // the type paramaters must be repeated.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60869,"byte_end":60919,"line_start":117,"line_end":117,"column_start":1,"column_end":51}},{"value":"/       fields: bitarr![Msb0, u8; 0; 20],","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60920,"byte_end":60963,"line_start":118,"line_end":118,"column_start":1,"column_end":44}},{"value":"/     }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60964,"byte_end":60973,"line_start":119,"line_end":119,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60974,"byte_end":60981,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60982,"byte_end":60985,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/   /// Access a bit region directly","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":60986,"byte_end":61024,"line_start":122,"line_end":122,"column_start":1,"column_end":39}},{"value":"/   pub fn get_subfield(&self) -> &BitSlice<Msb0, u8> {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61025,"byte_end":61082,"line_start":123,"line_end":123,"column_start":1,"column_end":58}},{"value":"/     &self.fields[.. 4]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61083,"byte_end":61109,"line_start":124,"line_end":124,"column_start":1,"column_end":27}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61110,"byte_end":61117,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61118,"byte_end":61121,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/   /// Read a 12-bit value out of a region","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61122,"byte_end":61167,"line_start":127,"line_end":127,"column_start":1,"column_end":46}},{"value":"/   pub fn read_value(&self) -> u16 {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61168,"byte_end":61207,"line_start":128,"line_end":128,"column_start":1,"column_end":40}},{"value":"/     self.fields[4 .. 16].load()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61208,"byte_end":61243,"line_start":129,"line_end":129,"column_start":1,"column_end":36}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61244,"byte_end":61251,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61252,"byte_end":61255,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/   /// Write a 12-bit value into a region","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61256,"byte_end":61300,"line_start":132,"line_end":132,"column_start":1,"column_end":45}},{"value":"/   pub fn set_value(&mut self, value: u16) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61301,"byte_end":61348,"line_start":133,"line_end":133,"column_start":1,"column_end":48}},{"value":"/     self.fields[4 .. 16].store(value);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61349,"byte_end":61391,"line_start":134,"line_end":134,"column_start":1,"column_end":43}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61392,"byte_end":61399,"line_start":135,"line_end":135,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61400,"byte_end":61405,"line_start":136,"line_end":136,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61406,"byte_end":61413,"line_start":137,"line_end":137,"column_start":1,"column_end":8}},{"value":"*\n# Eventual Obsolescence\n\nWhen const-generics stabilize, this will be modified to have a signature more\nlike `BitArray<O, T, const N: usize>([T; elts::<T>(N)]);`, to mirror the\nbehavior of ordinary arrays `[T; N]` as they stand today.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitView`]: crate::view::BitView\n[`Deref`]: core::ops::Deref\n[`Mut`]: core::ops::DerefMut\n[`Sized`]: core::marker::Sized\n[`bitarr!`]: macro@crate::bitarr\n[`std::bitset<N>`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`.as_bitslice()`]: Self::as_bitslice\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61414,"byte_end":61955,"line_start":138,"line_end":153,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":61956,"byte_end":61976,"line_start":154,"line_end":154,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62338,"byte_end":62344,"line_start":173,"line_end":173,"column_start":9,"column_end":15},"name":"zeroed","qualname":"<BitArray<O, V>>::zeroed","value":"pub fn zeroed() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` with its memory set to zero.\n","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` with its memory set to zero.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62258,"byte_end":62318,"line_start":171,"line_end":171,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62320,"byte_end":62329,"line_start":172,"line_end":172,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62706,"byte_end":62709,"line_start":192,"line_end":192,"column_start":9,"column_end":12},"name":"new","qualname":"<BitArray<O, V>>::new","value":"pub fn new(V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a buffer in a `BitArray`.","sig":null,"attributes":[{"value":"/ Wraps a buffer in a `BitArray`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62454,"byte_end":62489,"line_start":180,"line_end":180,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62491,"byte_end":62494,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62496,"byte_end":62510,"line_start":182,"line_end":182,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62512,"byte_end":62515,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62517,"byte_end":62528,"line_start":184,"line_end":184,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62530,"byte_end":62557,"line_start":185,"line_end":185,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62559,"byte_end":62562,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8; 2];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62564,"byte_end":62588,"line_start":187,"line_end":187,"column_start":2,"column_end":26}},{"value":"/ let bits: BitArray<Msb0, _> = BitArray::new(data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62590,"byte_end":62644,"line_start":188,"line_end":188,"column_start":2,"column_end":56}},{"value":"/ assert_eq!(bits.len(), 16);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62646,"byte_end":62677,"line_start":189,"line_end":189,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62679,"byte_end":62686,"line_start":190,"line_end":190,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62688,"byte_end":62697,"line_start":191,"line_end":191,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63083,"byte_end":63093,"line_start":211,"line_end":211,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitArray<O, V>>::into_inner","value":"pub fn into_inner(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Removes the `BitArray` wrapper, leaving the contained buffer.","sig":null,"attributes":[{"value":"/ Removes the `BitArray` wrapper, leaving the contained buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62778,"byte_end":62843,"line_start":199,"line_end":199,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62845,"byte_end":62848,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62850,"byte_end":62864,"line_start":201,"line_end":201,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62866,"byte_end":62869,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62871,"byte_end":62882,"line_start":203,"line_end":203,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62884,"byte_end":62911,"line_start":204,"line_end":204,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62913,"byte_end":62916,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ let bitarr = bitarr![Lsb0, usize; 0; 30];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62918,"byte_end":62963,"line_start":206,"line_end":206,"column_start":2,"column_end":47}},{"value":"/ let native: [usize; 1] = bitarr.into_inner();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62965,"byte_end":63014,"line_start":207,"line_end":207,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63016,"byte_end":63023,"line_start":208,"line_end":208,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63025,"byte_end":63042,"line_start":209,"line_end":209,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63044,"byte_end":63074,"line_start":210,"line_end":210,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63269,"byte_end":63280,"line_start":220,"line_end":220,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitArray<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views the array as a [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63124,"byte_end":63162,"line_start":215,"line_end":215,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63164,"byte_end":63167,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63169,"byte_end":63209,"line_start":217,"line_end":217,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63211,"byte_end":63228,"line_start":218,"line_end":218,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63230,"byte_end":63260,"line_start":219,"line_end":219,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63503,"byte_end":63518,"line_start":229,"line_end":229,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitArray<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views the array as a mutable [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63350,"byte_end":63396,"line_start":224,"line_end":224,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63398,"byte_end":63401,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63403,"byte_end":63443,"line_start":226,"line_end":226,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63445,"byte_end":63462,"line_start":227,"line_end":227,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63464,"byte_end":63494,"line_start":228,"line_end":228,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63686,"byte_end":63698,"line_start":235,"line_end":235,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitArray<O, V>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its underlying memory registers.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its underlying memory registers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63600,"byte_end":63666,"line_start":233,"line_end":233,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63668,"byte_end":63677,"line_start":234,"line_end":234,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63928,"byte_end":63944,"line_start":246,"line_end":246,"column_start":9,"column_end":25},"name":"as_mut_raw_slice","qualname":"<BitArray<O, V>>::as_mut_raw_slice","value":"pub fn as_mut_raw_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its underlying memory registers.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its underlying memory registers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63834,"byte_end":63908,"line_start":244,"line_end":244,"column_start":2,"column_end":76}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":63910,"byte_end":63919,"line_start":245,"line_end":245,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64219,"byte_end":64227,"line_start":259,"line_end":259,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitArray<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64108,"byte_end":64125,"line_start":256,"line_end":256,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64127,"byte_end":64157,"line_start":257,"line_end":257,"column_start":2,"column_end":32}},{"value":"deprecated = \"This is renamed to `as_raw_slice`\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64159,"byte_end":64210,"line_start":258,"line_end":258,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64410,"byte_end":64422,"line_start":267,"line_end":267,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitArray<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64295,"byte_end":64312,"line_start":264,"line_end":264,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64314,"byte_end":64344,"line_start":265,"line_end":265,"column_start":2,"column_end":32}},{"value":"deprecated = \"This is renamed to `as_mut_raw_slice`\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64346,"byte_end":64401,"line_start":266,"line_end":266,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64576,"byte_end":64585,"line_start":274,"line_end":274,"column_start":9,"column_end":18},"name":"as_buffer","qualname":"<BitArray<O, V>>::as_buffer","value":"pub fn as_buffer(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Views the interior buffer.\n","sig":null,"attributes":[{"value":"/ Views the interior buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64486,"byte_end":64516,"line_start":271,"line_end":271,"column_start":2,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64518,"byte_end":64535,"line_start":272,"line_end":272,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64537,"byte_end":64567,"line_start":273,"line_end":273,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64717,"byte_end":64730,"line_start":281,"line_end":281,"column_start":9,"column_end":22},"name":"as_mut_buffer","qualname":"<BitArray<O, V>>::as_mut_buffer","value":"pub fn as_mut_buffer(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Mutably views the interior buffer.\n","sig":null,"attributes":[{"value":"/ Mutably views the interior buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64619,"byte_end":64657,"line_start":278,"line_end":278,"column_start":2,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64659,"byte_end":64676,"line_start":279,"line_end":279,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":64678,"byte_end":64708,"line_start":280,"line_end":280,"column_start":2,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":587},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"domain","qualname":"::domain","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":644},{"krate":0,"index":5085},{"krate":0,"index":5097},{"krate":0,"index":5072},{"krate":0,"index":5115},{"krate":0,"index":5127},{"krate":0,"index":5102},{"krate":0,"index":645},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":5145},{"krate":0,"index":5156},{"krate":0,"index":5132},{"krate":0,"index":5173},{"krate":0,"index":5184},{"krate":0,"index":5160},{"krate":0,"index":653},{"krate":0,"index":656},{"krate":0,"index":664},{"krate":0,"index":671},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":5188},{"krate":0,"index":5191},{"krate":0,"index":5194},{"krate":0,"index":5197}],"decl_id":null,"docs":" Representations of the [`BitSlice`] region memory model.","sig":null,"attributes":[{"value":"* Representations of the [`BitSlice`] region memory model.\n\nThis module allows any [`BitSlice`] region to be decomposed into domains that\nrestricts [`T::Alias`] markers to only the edge elements that may require them.\n\nSpecifically, any given [`BitSlice`] region is one of:\n\n- touches only interior indices of one element\n- touches at least one edge index of any number of elements (including zero)\n\nIn the latter case, any elements *completely* spanned by the [`BitSlice`] handle\nare known to not have any other write-capable handles to them, and in the case\nof an `&mut BitSlice` handle specifically, no other views at all. As such, the\ndomain view of this memory is able to remove the aliasing marker type and permit\ndirect memory access to the underlying buffer for the duration of its existence.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`T::Alias`]: crate::store::BitStore::Alias\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":85242,"byte_end":86130,"line_start":1,"line_end":19,"column_start":1,"column_end":4}}]},{"kind":"Enum","id":{"krate":0,"index":5085},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95583,"byte_end":95592,"line_start":363,"line_end":363,"column_start":13,"column_end":22},"name":"BitDomain","qualname":"::domain::BitDomain","value":"pub enum BitDomain<'a, O, T> where O: BitOrder, T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a BitSlice<O, T>,\n        tail: BitEnd<T::Mem>,\n    },\n    Region {\n        head: &'a BitSlice<O, T>,\n        body: &'a BitSlice<O, T::Unalias>,\n        tail: &'a BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5089},{"krate":0,"index":5093}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86508,"byte_end":86569,"line_start":53,"line_end":53,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86572,"byte_end":86589,"line_start":54,"line_end":54,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86592,"byte_end":86595,"line_start":55,"line_end":55,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86598,"byte_end":86667,"line_start":56,"line_end":56,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86670,"byte_end":86736,"line_start":57,"line_end":57,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86739,"byte_end":86810,"line_start":58,"line_end":58,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86813,"byte_end":86882,"line_start":59,"line_end":59,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86885,"byte_end":86956,"line_start":60,"line_end":60,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86959,"byte_end":87027,"line_start":61,"line_end":61,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87030,"byte_end":87076,"line_start":62,"line_end":62,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87079,"byte_end":87082,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87085,"byte_end":87157,"line_start":64,"line_end":64,"column_start":3,"column_end":75}},{"value":"/ the source [`BitSlice`] into smaller `BitSlice`s, and makes","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87160,"byte_end":87223,"line_start":65,"line_end":65,"column_start":3,"column_end":66}},{"value":"/ appropriate modifications to the aliasing markers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87226,"byte_end":87280,"line_start":66,"line_end":66,"column_start":3,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87283,"byte_end":87286,"line_start":67,"line_end":67,"column_start":3,"column_end":6}},{"value":"/ It does not add any aliasing markers: if the slice is marked as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87289,"byte_end":87356,"line_start":68,"line_end":68,"column_start":3,"column_end":70}},{"value":"/ aliased, then the edge partitions will retain that marker, and if it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87359,"byte_end":87431,"line_start":69,"line_end":69,"column_start":3,"column_end":75}},{"value":"/ is not, then the edge partitions do not need it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87434,"byte_end":87486,"line_start":70,"line_end":70,"column_start":3,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87489,"byte_end":87492,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ This does not provide references to the underlying memory buffer. If","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87495,"byte_end":87567,"line_start":72,"line_end":72,"column_start":3,"column_end":75}},{"value":"/ you need such direct access, use the [`Domain`] or [`DomainMut`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87570,"byte_end":87638,"line_start":73,"line_end":73,"column_start":3,"column_end":71}},{"value":"/ enums.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87641,"byte_end":87651,"line_start":74,"line_end":74,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87654,"byte_end":87657,"line_start":75,"line_end":75,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87660,"byte_end":87675,"line_start":76,"line_end":76,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87678,"byte_end":87681,"line_start":77,"line_end":77,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87684,"byte_end":87740,"line_start":78,"line_end":78,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87743,"byte_end":87746,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87749,"byte_end":87770,"line_start":80,"line_end":80,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87773,"byte_end":87776,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source [`BitSlice`] handle.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87779,"byte_end":87842,"line_start":82,"line_end":82,"column_start":3,"column_end":66}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87845,"byte_end":87908,"line_start":83,"line_end":83,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87911,"byte_end":87948,"line_start":84,"line_end":84,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87951,"byte_end":87954,"line_start":85,"line_end":85,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87957,"byte_end":87981,"line_start":86,"line_end":86,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87984,"byte_end":87987,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87990,"byte_end":88060,"line_start":88,"line_end":88,"column_start":3,"column_end":73}},{"value":"/ original [`BitSlice`] handle, and so does not need to modfiy any","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88063,"byte_end":88131,"line_start":89,"line_end":89,"column_start":3,"column_end":71}},{"value":"/ aliasing conditions.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88134,"byte_end":88158,"line_start":90,"line_end":90,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88161,"byte_end":88164,"line_start":91,"line_end":91,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88167,"byte_end":88207,"line_start":92,"line_end":92,"column_start":3,"column_end":43}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88210,"byte_end":88247,"line_start":93,"line_end":93,"column_start":3,"column_end":40}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88250,"byte_end":88293,"line_start":94,"line_end":94,"column_start":3,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":5115},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95607,"byte_end":95619,"line_start":364,"line_end":364,"column_start":13,"column_end":25},"name":"BitDomainMut","qualname":"::domain::BitDomainMut","value":"pub enum BitDomainMut<'a, O, T> where O: BitOrder, T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a mut BitSlice<O, T>,\n        tail: BitEnd<T::Mem>,\n    },\n    Region {\n        head: &'a mut BitSlice<O, T>,\n        body: &'a mut BitSlice<O, T::Unalias>,\n        tail: &'a mut BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5119},{"krate":0,"index":5123}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86508,"byte_end":86569,"line_start":53,"line_end":53,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86572,"byte_end":86589,"line_start":54,"line_end":54,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86592,"byte_end":86595,"line_start":55,"line_end":55,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86598,"byte_end":86667,"line_start":56,"line_end":56,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86670,"byte_end":86736,"line_start":57,"line_end":57,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86739,"byte_end":86810,"line_start":58,"line_end":58,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86813,"byte_end":86882,"line_start":59,"line_end":59,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86885,"byte_end":86956,"line_start":60,"line_end":60,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":86959,"byte_end":87027,"line_start":61,"line_end":61,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87030,"byte_end":87076,"line_start":62,"line_end":62,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87079,"byte_end":87082,"line_start":63,"line_end":63,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87085,"byte_end":87157,"line_start":64,"line_end":64,"column_start":3,"column_end":75}},{"value":"/ the source [`BitSlice`] into smaller `BitSlice`s, and makes","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87160,"byte_end":87223,"line_start":65,"line_end":65,"column_start":3,"column_end":66}},{"value":"/ appropriate modifications to the aliasing markers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87226,"byte_end":87280,"line_start":66,"line_end":66,"column_start":3,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87283,"byte_end":87286,"line_start":67,"line_end":67,"column_start":3,"column_end":6}},{"value":"/ It does not add any aliasing markers: if the slice is marked as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87289,"byte_end":87356,"line_start":68,"line_end":68,"column_start":3,"column_end":70}},{"value":"/ aliased, then the edge partitions will retain that marker, and if it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87359,"byte_end":87431,"line_start":69,"line_end":69,"column_start":3,"column_end":75}},{"value":"/ is not, then the edge partitions do not need it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87434,"byte_end":87486,"line_start":70,"line_end":70,"column_start":3,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87489,"byte_end":87492,"line_start":71,"line_end":71,"column_start":3,"column_end":6}},{"value":"/ This does not provide references to the underlying memory buffer. If","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87495,"byte_end":87567,"line_start":72,"line_end":72,"column_start":3,"column_end":75}},{"value":"/ you need such direct access, use the [`Domain`] or [`DomainMut`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87570,"byte_end":87638,"line_start":73,"line_end":73,"column_start":3,"column_end":71}},{"value":"/ enums.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87641,"byte_end":87651,"line_start":74,"line_end":74,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87654,"byte_end":87657,"line_start":75,"line_end":75,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87660,"byte_end":87675,"line_start":76,"line_end":76,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87678,"byte_end":87681,"line_start":77,"line_end":77,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87684,"byte_end":87740,"line_start":78,"line_end":78,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87743,"byte_end":87746,"line_start":79,"line_end":79,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87749,"byte_end":87770,"line_start":80,"line_end":80,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87773,"byte_end":87776,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source [`BitSlice`] handle.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87779,"byte_end":87842,"line_start":82,"line_end":82,"column_start":3,"column_end":66}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87845,"byte_end":87908,"line_start":83,"line_end":83,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87911,"byte_end":87948,"line_start":84,"line_end":84,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87951,"byte_end":87954,"line_start":85,"line_end":85,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87957,"byte_end":87981,"line_start":86,"line_end":86,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87984,"byte_end":87987,"line_start":87,"line_end":87,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":87990,"byte_end":88060,"line_start":88,"line_end":88,"column_start":3,"column_end":73}},{"value":"/ original [`BitSlice`] handle, and so does not need to modfiy any","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88063,"byte_end":88131,"line_start":89,"line_end":89,"column_start":3,"column_end":71}},{"value":"/ aliasing conditions.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88134,"byte_end":88158,"line_start":90,"line_end":90,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88161,"byte_end":88164,"line_start":91,"line_end":91,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88167,"byte_end":88207,"line_start":92,"line_end":92,"column_start":3,"column_end":43}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88210,"byte_end":88247,"line_start":93,"line_end":93,"column_start":3,"column_end":40}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":88250,"byte_end":88293,"line_start":94,"line_end":94,"column_start":3,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":5145},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":103973,"byte_end":103979,"line_start":652,"line_end":652,"column_start":9,"column_end":15},"name":"Domain","qualname":"::domain::Domain","value":"pub enum Domain<'a, T> where T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T,\n        tail: BitEnd<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T)>,\n        body: &'a [T::Unalias],\n        tail: Option<(&'a T, BitEnd<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5148},{"krate":0,"index":5152}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95953,"byte_end":96014,"line_start":387,"line_end":387,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96017,"byte_end":96034,"line_start":388,"line_end":388,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96037,"byte_end":96040,"line_start":389,"line_end":389,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96043,"byte_end":96112,"line_start":390,"line_end":390,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96115,"byte_end":96181,"line_start":391,"line_end":391,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96184,"byte_end":96255,"line_start":392,"line_end":392,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96258,"byte_end":96327,"line_start":393,"line_end":393,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96330,"byte_end":96401,"line_start":394,"line_end":394,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96404,"byte_end":96472,"line_start":395,"line_end":395,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96475,"byte_end":96521,"line_start":396,"line_end":396,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96524,"byte_end":96527,"line_start":397,"line_end":397,"column_start":3,"column_end":6}},{"value":"/ This enum splits the underlying element slice `[T]` into the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96530,"byte_end":96594,"line_start":398,"line_end":398,"column_start":3,"column_end":67}},{"value":"/ maybe-aliased edge elements and known-unaliased center elements. If","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96597,"byte_end":96668,"line_start":399,"line_end":399,"column_start":3,"column_end":74}},{"value":"/ you do not need to work with the memory elements directly, and only","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96671,"byte_end":96742,"line_start":400,"line_end":400,"column_start":3,"column_end":74}},{"value":"/ need to firmly specify the access behavior of the [`BitSlice`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96745,"byte_end":96811,"line_start":401,"line_end":401,"column_start":3,"column_end":69}},{"value":"/ handle, use the [`BitDomain`] and [`BitDomainMut`] enums.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96814,"byte_end":96875,"line_start":402,"line_end":402,"column_start":3,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96878,"byte_end":96881,"line_start":403,"line_end":403,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96884,"byte_end":96899,"line_start":404,"line_end":404,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96902,"byte_end":96905,"line_start":405,"line_end":405,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96908,"byte_end":96964,"line_start":406,"line_end":406,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96967,"byte_end":96970,"line_start":407,"line_end":407,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96973,"byte_end":96994,"line_start":408,"line_end":408,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96997,"byte_end":97000,"line_start":409,"line_end":409,"column_start":3,"column_end":6}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97003,"byte_end":97066,"line_start":410,"line_end":410,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97069,"byte_end":97106,"line_start":411,"line_end":411,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97109,"byte_end":97112,"line_start":412,"line_end":412,"column_start":3,"column_end":6}},{"value":"/ # Mutability","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97115,"byte_end":97131,"line_start":413,"line_end":413,"column_start":3,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97134,"byte_end":97137,"line_start":414,"line_end":414,"column_start":3,"column_end":6}},{"value":"/ The immutable view produces [`T::Alias`] references, which permit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97140,"byte_end":97209,"line_start":415,"line_end":415,"column_start":3,"column_end":72}},{"value":"/ foreign writes to the referent location but disallow writes through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97212,"byte_end":97283,"line_start":416,"line_end":416,"column_start":3,"column_end":74}},{"value":"/ itself. The mutable view produces [`T::Access`] references, because","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97286,"byte_end":97357,"line_start":417,"line_end":417,"column_start":3,"column_end":74}},{"value":"/ `&mut _` references can only ever be produced when no other aliasing","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97360,"byte_end":97432,"line_start":418,"line_end":418,"column_start":3,"column_end":75}},{"value":"/ handle exists. The write permissions must be weakened from","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97435,"byte_end":97497,"line_start":419,"line_end":419,"column_start":3,"column_end":65}},{"value":"/ `&mut T::Alias` to `&T::Access` in order to satisfy the Rust memory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97500,"byte_end":97571,"line_start":420,"line_end":420,"column_start":3,"column_end":74}},{"value":"/ rules.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97574,"byte_end":97584,"line_start":421,"line_end":421,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97587,"byte_end":97590,"line_start":422,"line_end":422,"column_start":3,"column_end":6}},{"value":"/ The edge references do not forbid modifying bits outside of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97593,"byte_end":97660,"line_start":423,"line_end":423,"column_start":3,"column_end":70}},{"value":"/ source [`BitSlice`] domain, and writes out of bounds will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97663,"byte_end":97727,"line_start":424,"line_end":424,"column_start":3,"column_end":67}},{"value":"/ correctly handled by any other handles capable of viewing those","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97730,"byte_end":97797,"line_start":425,"line_end":425,"column_start":3,"column_end":70}},{"value":"/ elements. Doing so is still *incorrect*, though defined, and you are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97800,"byte_end":97872,"line_start":426,"line_end":426,"column_start":3,"column_end":75}},{"value":"/ responsible for writing only within bounds when using `DomainMut`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97875,"byte_end":97945,"line_start":427,"line_end":427,"column_start":3,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97948,"byte_end":97951,"line_start":428,"line_end":428,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97954,"byte_end":97997,"line_start":429,"line_end":429,"column_start":3,"column_end":46}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98000,"byte_end":98049,"line_start":430,"line_end":430,"column_start":3,"column_end":52}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98052,"byte_end":98092,"line_start":431,"line_end":431,"column_start":3,"column_end":43}},{"value":"/ [`T::Access`]: crate::store::BitStore::Access","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98095,"byte_end":98144,"line_start":432,"line_end":432,"column_start":3,"column_end":52}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98147,"byte_end":98194,"line_start":433,"line_end":433,"column_start":3,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":5173},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":103990,"byte_end":103999,"line_start":653,"line_end":653,"column_start":9,"column_end":18},"name":"DomainMut","qualname":"::domain::DomainMut","value":"pub enum DomainMut<'a, T> where T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T::Access,\n        tail: BitEnd<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T::Access)>,\n        body: &'a mut [T::Unalias],\n        tail: Option<(&'a T::Access, BitEnd<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5176},{"krate":0,"index":5180}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95953,"byte_end":96014,"line_start":387,"line_end":387,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96017,"byte_end":96034,"line_start":388,"line_end":388,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96037,"byte_end":96040,"line_start":389,"line_end":389,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96043,"byte_end":96112,"line_start":390,"line_end":390,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96115,"byte_end":96181,"line_start":391,"line_end":391,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96184,"byte_end":96255,"line_start":392,"line_end":392,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96258,"byte_end":96327,"line_start":393,"line_end":393,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96330,"byte_end":96401,"line_start":394,"line_end":394,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96404,"byte_end":96472,"line_start":395,"line_end":395,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96475,"byte_end":96521,"line_start":396,"line_end":396,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96524,"byte_end":96527,"line_start":397,"line_end":397,"column_start":3,"column_end":6}},{"value":"/ This enum splits the underlying element slice `[T]` into the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96530,"byte_end":96594,"line_start":398,"line_end":398,"column_start":3,"column_end":67}},{"value":"/ maybe-aliased edge elements and known-unaliased center elements. If","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96597,"byte_end":96668,"line_start":399,"line_end":399,"column_start":3,"column_end":74}},{"value":"/ you do not need to work with the memory elements directly, and only","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96671,"byte_end":96742,"line_start":400,"line_end":400,"column_start":3,"column_end":74}},{"value":"/ need to firmly specify the access behavior of the [`BitSlice`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96745,"byte_end":96811,"line_start":401,"line_end":401,"column_start":3,"column_end":69}},{"value":"/ handle, use the [`BitDomain`] and [`BitDomainMut`] enums.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96814,"byte_end":96875,"line_start":402,"line_end":402,"column_start":3,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96878,"byte_end":96881,"line_start":403,"line_end":403,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96884,"byte_end":96899,"line_start":404,"line_end":404,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96902,"byte_end":96905,"line_start":405,"line_end":405,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96908,"byte_end":96964,"line_start":406,"line_end":406,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96967,"byte_end":96970,"line_start":407,"line_end":407,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96973,"byte_end":96994,"line_start":408,"line_end":408,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":96997,"byte_end":97000,"line_start":409,"line_end":409,"column_start":3,"column_end":6}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97003,"byte_end":97066,"line_start":410,"line_end":410,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97069,"byte_end":97106,"line_start":411,"line_end":411,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97109,"byte_end":97112,"line_start":412,"line_end":412,"column_start":3,"column_end":6}},{"value":"/ # Mutability","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97115,"byte_end":97131,"line_start":413,"line_end":413,"column_start":3,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97134,"byte_end":97137,"line_start":414,"line_end":414,"column_start":3,"column_end":6}},{"value":"/ The immutable view produces [`T::Alias`] references, which permit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97140,"byte_end":97209,"line_start":415,"line_end":415,"column_start":3,"column_end":72}},{"value":"/ foreign writes to the referent location but disallow writes through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97212,"byte_end":97283,"line_start":416,"line_end":416,"column_start":3,"column_end":74}},{"value":"/ itself. The mutable view produces [`T::Access`] references, because","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97286,"byte_end":97357,"line_start":417,"line_end":417,"column_start":3,"column_end":74}},{"value":"/ `&mut _` references can only ever be produced when no other aliasing","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97360,"byte_end":97432,"line_start":418,"line_end":418,"column_start":3,"column_end":75}},{"value":"/ handle exists. The write permissions must be weakened from","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97435,"byte_end":97497,"line_start":419,"line_end":419,"column_start":3,"column_end":65}},{"value":"/ `&mut T::Alias` to `&T::Access` in order to satisfy the Rust memory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97500,"byte_end":97571,"line_start":420,"line_end":420,"column_start":3,"column_end":74}},{"value":"/ rules.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97574,"byte_end":97584,"line_start":421,"line_end":421,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97587,"byte_end":97590,"line_start":422,"line_end":422,"column_start":3,"column_end":6}},{"value":"/ The edge references do not forbid modifying bits outside of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97593,"byte_end":97660,"line_start":423,"line_end":423,"column_start":3,"column_end":70}},{"value":"/ source [`BitSlice`] domain, and writes out of bounds will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97663,"byte_end":97727,"line_start":424,"line_end":424,"column_start":3,"column_end":67}},{"value":"/ correctly handled by any other handles capable of viewing those","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97730,"byte_end":97797,"line_start":425,"line_end":425,"column_start":3,"column_end":70}},{"value":"/ elements. Doing so is still *incorrect*, though defined, and you are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97800,"byte_end":97872,"line_start":426,"line_end":426,"column_start":3,"column_end":75}},{"value":"/ responsible for writing only within bounds when using `DomainMut`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97875,"byte_end":97945,"line_start":427,"line_end":427,"column_start":3,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97948,"byte_end":97951,"line_start":428,"line_end":428,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":97954,"byte_end":97997,"line_start":429,"line_end":429,"column_start":3,"column_end":46}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98000,"byte_end":98049,"line_start":430,"line_end":430,"column_start":3,"column_end":52}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98052,"byte_end":98092,"line_start":431,"line_end":431,"column_start":3,"column_end":43}},{"value":"/ [`T::Access`]: crate::store::BitStore::Access","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98095,"byte_end":98144,"line_start":432,"line_end":432,"column_start":3,"column_end":52}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":98147,"byte_end":98194,"line_start":433,"line_end":433,"column_start":3,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":679},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"field","qualname":"::field","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":684},{"krate":0,"index":687},{"krate":0,"index":690},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":729},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":752},{"krate":0,"index":762},{"krate":0,"index":772},{"krate":0,"index":783},{"krate":0,"index":794},{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":812},{"krate":0,"index":817},{"krate":0,"index":820},{"krate":0,"index":823}],"decl_id":null,"docs":" Batched load/store access to bitfields.","sig":null,"attributes":[{"value":"* Batched load/store access to bitfields.\n\nThis module provides load/store access to bitfield regions that emulates the\nordinary memory bus. This functionality enables any [`BitSlice`] span to be used\nas a memory region, and provides the basis of a library-level analogue to the\nbitfield language feature found in C and C++. Additionally, orderings that have\ncontiguous positions can transfer more than one bit in an operation, allowing a\nperformance acceleration over sequential bit-by-bit traversal.\n\nThe [`BitField`] trait is open for implementation. Rust’s implementation rules\ncurrently disallow a crate to implement a foreign trait on a foreign type, even\nwhen parameterized over a local type. If you need such a `BitField`\nimplementation with a new `BitOrder` type, please file an issue.\n\n# Batched Behavior\n\nThe first purpose of [`BitField`] is to provide access to [`BitSlice`] regions\nas if they were an ordinary memory location. However, this can be done through\nthe `BitSlice` sequential API. The second purpose of this trait is to accelerate\nsuch access by using the parallel memory bus to transfer more than one bit at a\ntime when the region permits it. As such, implementors should provide a transfer\nbehavior based on shift/mask operations wherever possible, for as wide a span in\na memory element as possible.\n\n# Register Bit Order Preservation\n\nAs a default assumption, each element of the underlying memory region used to\nstore part of a value should not reörder the bit-pattern of that value. While\nthe [`BitOrder`] argument is used to determine which segments of the memory\nregister are live for the purposes of this transfer, it should not be used to\nmap each individual bit of the transferred value to a corresponding bit of the\nstorage element. As an example, the [`Lsb0`] and [`Msb0`] implementations both\nstore the value `12u8` in memory as a four-bit span with its two\nmore-significant bits set and its two less-significant bits cleared; the\ndifference is only in *which* bits of an element are used to store the span.\n\n# Endianness\n\nThe `_le` and `_be` methods of [`BitField`] refer to the order in which\nsuccessive `T` elements of a storage region are assigned numeric significance\nduring a transfer. Within any particular `T` element, the ordering of its memory\nis not governed by the `BitField` trait.\n\nThe provided [`BitOrder`] implementors [`Lsb0`] and [`Msb0`] use the local\nmachine’s byte ordering, and do not reörder bytes during transfer.\n\n## `_le` Methods\n\nWhen storing a value `M` into a sequence of memory elements `T`, [`store_le`]\nbreaks `M` into chunks from the least significant edge. The least significant\nchunk is placed in the lowest-addressed element `T`, then the next more\nsignificant chunk is placed in the successive address, until the most\nsignificant chunk of the value `M` is placed in the highest address of a\nlocation `T`.\n\nWhen loading a value `M` out of a sequence of memory elements `T`, [`load_le`]\nuses the same chunking behavior: the lowest-addressed `T` contains the least\nsignificant chunk of the returned `M`, then each successive address contains a\nmore significant chunk, until the highest address contains the most significant.\n\nThe [`BitOrder`] implementation governs *where* in each `T` location a fragment\nof `M` is stored.\n\nLet us store 8 bits into memory, over an element boundary, using both [`Lsb0`]\nand [`Msb0`] orderings:\n\n```rust\nuse bitvec::prelude::*;\n\nlet val: u8 = 0b11010_011;\n//              STUVW XYZ\nlet mut store = [0u8; 2];\n\nstore.view_bits_mut::<Lsb0>()\n  [5 .. 13]\n  .store_le(val);\nassert_eq!(\n  store,\n  [0b011_00000, 0b000_11010],\n//   XYZ               STUVW\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\nstore = [0u8; 2];\n\nstore.view_bits_mut::<Msb0>()\n  [5 .. 13]\n  .store_le(val);\nassert_eq!(\n  store,\n  [0b00000_011, 0b11010_000],\n//         XYZ    STUVW\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\n```\n\nIn both cases, the lower three bits of `val` were placed into the element at the\nlower memory address. The choice of [`Lsb0`] vs [`Msb0`] changed *which* three\nbits in the element were considered to be indexed by `5 .. 8`, but [`store_le`]\nalways placed the least three bits of `val`, *in ordinary register order*, into\nelement `[0]`. Similarly, the higher five bits of `val` were placed into element\n`[1]`; `Lsb0` and `Msb0` selected *which* five bits in the element were indexed\nby `8 .. 13`, and the bits retained their register order.\n\n## `_be` Methods\n\nWhen storing a value `M` into a sequence of memory elements `T`, [`store_be`]\nbreaks `M` into chunks from the most significant edge. The most significant\nchunk is placed in the lowest-addressed element `T`, then the next less\nsignificant chunk is placed in the successive address, until the least\nsignificant chunk of the value `M` is placed in the highest address of a\nlocation `T`.\n\nWhen loading a value `M` out of a sequence of memory elements `T`, [`load_be`]\nuses the same chunking behavior: the lowest-addressed `T` contains the most\nsignificant chunk of the returned `M`, then each successive address contains a\nless significant chunk, until the highest address contains the least\nsignificant.\n\nThe [`BitOrder`] implementation governs *where* in each `T` location a fragment\nof `M` is stored.\n\nLet us store 8 bits into memory, over an element boundary, using both [`Lsb0`]\nand [`Msb0`] orderings:\n\n```rust\nuse bitvec::prelude::*;\n\nlet val: u8 = 0b110_10011;\n//              STU VWXYZ\nlet mut store = [0u8; 2];\n\nstore.view_bits_mut::<Lsb0>()\n  [5 .. 13]\n  .store_be(val);\nassert_eq!(\n  store,\n  [0b110_00000, 0b000_10011],\n//   STU              VWXYZ\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\nstore = [0u8; 2];\n\nstore.view_bits_mut::<Msb0>()\n  [5 .. 13]\n  .store_be(val);\nassert_eq!(\n  store,\n  [0b00000_110, 0b10011_000],\n//         STU    VWXYZ\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\n```\n\nIn both cases, the higher three bits of `val` were placed into the element at\nthe lower memory address. The choice of [`Lsb0`] vs [`Msb0`] changed *which*\nthree bits in the element were considered to be indexed by `5 .. 8`, but\n[`store_be`] always placed the greatest three bits of `val`, *in ordinary*\n*register order*, into element `[0]`. Similarly, the lower five bits of `val`\nwere placed into element `[1]`; `Lsb0` and `Msb0` selected *which* five bits in\nthe element were indexed by `8 .. 13`, and the bits retained their register\norder.\n\n# `M` and `T` Relationships\n\n`BitField` permits any type of (unsigned) integer `M` to be stored into or\nloaded from a bit-slice region with any storage type `T`. While the examples\nused `u8` for both, for brevity of writing out values, `BitField` will still\noperate correctly for any other combination of types.\n\n`Bitfield` implementations use the processor’s own concept of integer registers\nto operate. As such, the byte-wise memory access patterns for types wider than\n`u8` depends on your processor’s byte-endianness, as well as which `BitField`\nmethod and which `BitOrder` implementation you are using.\n\n`BitField` only operates within processor registers; traffic of `T` elements\nbetween the memory bank and the processor register is controlled entirely by the\nprocessor.\n\nIf you do not want to introduce the processor’s byte-endianness as a variable\nthat affects the in-memory representation of stored integers, stick to\n`BitSlice<_, u8>` as the bit-field driver. `BitSlice<Msb0, u8>` will fill memory\nin a way that matches a debugger or other memory inspections.\n\n[`BitField`]: crate::field::BitField\n[`BitOrder`]: crate::order::BitOrder\n[`BitSlice`]: crate::slice::BitSlice\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n[`load_be`]: crate::field::BitField::load_be\n[`load_le`]: crate::field::BitField::load_le\n[`store_be`]: crate::field::BitField::store_be\n[`store_le`]: crate::field::BitField::store_le\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":106515,"byte_end":114385,"line_start":1,"line_end":201,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":739},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116731,"byte_end":116739,"line_start":282,"line_end":282,"column_start":11,"column_end":19},"name":"BitField","qualname":"::field::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750}],"decl_id":null,"docs":" Performs C-style bitfield access through a [`BitSlice`].","sig":null,"attributes":[{"value":"* Performs C-style bitfield access through a [`BitSlice`].\n\nThis trait transfers data between a [`BitSlice`] region and a local integer. The\ntrait functions always place the live bits of the value against the least\nsignificant bit edge of the local integer (the return value of the load methods,\nand the argument value of the store methods).\n\nMethods should be called as `bits[start .. end].load_or_store()`, where the\nrange subslice selects no more than the [`M::BITS`] element width.\n\n# Target-Specific Behavior\n\nWhen you are using this trait to manage memory that never leaves your machine,\nyou can use the [`load`] and [`store`] methods. However, if you are using this\ntrait to operate on a de/serialization buffer, where the exact bit pattern in\nmemory is important to your work and/or you need to be aware of the processor\nbyte endianness, you must not use these methods.\n\nInstead, use [`load_le`], [`load_be`], [`store_le`], or[`store_be`] directly.\n\nThe un-suffixed methods choose their implementation based on the target\nprocessor byte endianness; the suffixed methods have a consistent and fixed\nbehavior.\n\n# Element- and Bit- Ordering Combinations\n\nThe `_le` and `_be` method suffices refer to the significance of successive\nelements `T` in memory, while the `BitOrder` trait refers to the order that bits\nwithin a single element `T` are traversed. The `BitField` methods and the\n`BitOrder` implementors are ***not*** related.\n\nWhen a load or store operation is contained in only one memory element, then the\n`_le` and `_be` methods have the same behavior. They differ when the operation\nmust touch more than one element.\n\nThe module documentation contains a more detailed explanation, and examples, for\nthis behavior.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`M::BITS`]: funty::IsNumber::BITS\n[`load`]: Self::load\n[`load_be`]: Self::load_be\n[`load_le`]: Self::load_le\n[`store`]: Self::store\n[`store_be`]: Self::store_be\n[`store_le`]: Self::store_le\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":114756,"byte_end":116720,"line_start":235,"line_end":281,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118207,"byte_end":118211,"line_start":323,"line_end":323,"column_start":5,"column_end":9},"name":"load","qualname":"::field::BitField::load","value":"pub fn load<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Loads the bits in the `self` region into a local value.","sig":null,"attributes":[{"value":"/ Loads the bits in the `self` region into a local value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116743,"byte_end":116802,"line_start":283,"line_end":283,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116804,"byte_end":116807,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ This can load into any of the unsigned integers which implement","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116809,"byte_end":116876,"line_start":285,"line_end":285,"column_start":2,"column_end":69}},{"value":"/ [`BitMemory`]. Any further transformation must be done by the user.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116878,"byte_end":116949,"line_start":286,"line_end":286,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116951,"byte_end":116954,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ # Target-Specific Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116956,"byte_end":116986,"line_start":288,"line_end":288,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116988,"byte_end":116991,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ **THIS FUNCTION CHANGES BEHAVIOR FOR DIFFERENT TARGETS.**","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":116993,"byte_end":117054,"line_start":290,"line_end":290,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117056,"byte_end":117059,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`load_le`] on","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117061,"byte_end":117129,"line_start":292,"line_end":292,"column_start":2,"column_end":70}},{"value":"/ little-endian byte-ordered CPUs, and [`load_be`] on big-endian","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117131,"byte_end":117197,"line_start":293,"line_end":293,"column_start":2,"column_end":68}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117199,"byte_end":117221,"line_start":294,"line_end":294,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117223,"byte_end":117226,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ If you are using this function from a region that crosses multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117228,"byte_end":117298,"line_start":296,"line_end":296,"column_start":2,"column_end":72}},{"value":"/ elements in memory, be aware that it will behave differently on","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117300,"byte_end":117367,"line_start":297,"line_end":297,"column_start":2,"column_end":69}},{"value":"/ big-endian and little-endian target architectures.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117369,"byte_end":117423,"line_start":298,"line_end":298,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117425,"byte_end":117428,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117430,"byte_end":117446,"line_start":300,"line_end":300,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117448,"byte_end":117451,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117453,"byte_end":117527,"line_start":302,"line_end":302,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117529,"byte_end":117605,"line_start":303,"line_end":303,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117607,"byte_end":117683,"line_start":304,"line_end":304,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117685,"byte_end":117697,"line_start":305,"line_end":305,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117699,"byte_end":117702,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117704,"byte_end":117717,"line_start":307,"line_end":307,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117719,"byte_end":117722,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117724,"byte_end":117799,"line_start":309,"line_end":309,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117801,"byte_end":117824,"line_start":310,"line_end":310,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117826,"byte_end":117829,"line_start":311,"line_end":311,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117831,"byte_end":117843,"line_start":312,"line_end":312,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117845,"byte_end":117848,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117850,"byte_end":117924,"line_start":314,"line_end":314,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117926,"byte_end":117949,"line_start":315,"line_end":315,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117951,"byte_end":117954,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ [`BitMemory`]: crate::mem::BitMemory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117956,"byte_end":117996,"line_start":317,"line_end":317,"column_start":2,"column_end":42}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":117998,"byte_end":118036,"line_start":318,"line_end":318,"column_start":2,"column_end":40}},{"value":"/ [`load_be`]: Self::load_be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118038,"byte_end":118068,"line_start":319,"line_end":319,"column_start":2,"column_end":32}},{"value":"/ [`load_le`]: Self::load_le","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118070,"byte_end":118100,"line_start":320,"line_end":320,"column_start":2,"column_end":32}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118102,"byte_end":118149,"line_start":321,"line_end":321,"column_start":2,"column_end":49}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118186,"byte_end":118200,"line_start":322,"line_end":322,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119980,"byte_end":119985,"line_start":374,"line_end":374,"column_start":5,"column_end":10},"name":"store","qualname":"::field::BitField::store","value":"pub fn store<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Stores a sequence of bits from the user into the domain of `self`.","sig":null,"attributes":[{"value":"/ Stores a sequence of bits from the user into the domain of `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118382,"byte_end":118452,"line_start":332,"line_end":332,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118454,"byte_end":118457,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ This can store any of the unsigned integers which implement","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118459,"byte_end":118522,"line_start":334,"line_end":334,"column_start":2,"column_end":65}},{"value":"/ [`BitMemory`]. Any other types must first be transformed by the user.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118524,"byte_end":118597,"line_start":335,"line_end":335,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118599,"byte_end":118602,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ # Target-Specific Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118604,"byte_end":118634,"line_start":337,"line_end":337,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118636,"byte_end":118639,"line_start":338,"line_end":338,"column_start":2,"column_end":5}},{"value":"/ **THIS FUNCTION CHANGES BEHAVIOR FOR DIFFERENT TARGETS.**","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118641,"byte_end":118702,"line_start":339,"line_end":339,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118704,"byte_end":118707,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`store_le`] on","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118709,"byte_end":118778,"line_start":341,"line_end":341,"column_start":2,"column_end":71}},{"value":"/ little-endian byte-ordered CPUs, and [`store_be`] on big-endian","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118780,"byte_end":118847,"line_start":342,"line_end":342,"column_start":2,"column_end":69}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118849,"byte_end":118871,"line_start":343,"line_end":343,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118873,"byte_end":118876,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ If you are using this function to store into a region that crosses","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118878,"byte_end":118948,"line_start":345,"line_end":345,"column_start":2,"column_end":72}},{"value":"/ multiple elements in memory, be aware that it will behave differently on","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":118950,"byte_end":119026,"line_start":346,"line_end":346,"column_start":2,"column_end":78}},{"value":"/ big-endian and little-endian target architectures.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119028,"byte_end":119082,"line_start":347,"line_end":347,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119084,"byte_end":119087,"line_start":348,"line_end":348,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119089,"byte_end":119105,"line_start":349,"line_end":349,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119107,"byte_end":119110,"line_start":350,"line_end":350,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119112,"byte_end":119188,"line_start":351,"line_end":351,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119190,"byte_end":119264,"line_start":352,"line_end":352,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119266,"byte_end":119340,"line_start":353,"line_end":353,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119342,"byte_end":119361,"line_start":354,"line_end":354,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119363,"byte_end":119438,"line_start":355,"line_end":355,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119440,"byte_end":119465,"line_start":356,"line_end":356,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119467,"byte_end":119470,"line_start":357,"line_end":357,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119472,"byte_end":119486,"line_start":358,"line_end":358,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119488,"byte_end":119491,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119493,"byte_end":119566,"line_start":360,"line_end":360,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119568,"byte_end":119593,"line_start":361,"line_end":361,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119595,"byte_end":119598,"line_start":362,"line_end":362,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119600,"byte_end":119612,"line_start":363,"line_end":363,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119614,"byte_end":119617,"line_start":364,"line_end":364,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119619,"byte_end":119693,"line_start":365,"line_end":365,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119695,"byte_end":119718,"line_start":366,"line_end":366,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119720,"byte_end":119723,"line_start":367,"line_end":367,"column_start":2,"column_end":5}},{"value":"/ [`BitMemory`]: crate::mem::BitMemory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119725,"byte_end":119765,"line_start":368,"line_end":368,"column_start":2,"column_end":42}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119767,"byte_end":119805,"line_start":369,"line_end":369,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119807,"byte_end":119854,"line_start":370,"line_end":370,"column_start":2,"column_end":49}},{"value":"/ [`store_be`]: Self::store_be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119856,"byte_end":119888,"line_start":371,"line_end":371,"column_start":2,"column_end":34}},{"value":"/ [`store_le`]: Self::store_le","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119890,"byte_end":119922,"line_start":372,"line_end":372,"column_start":2,"column_end":34}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":119959,"byte_end":119973,"line_start":373,"line_end":373,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122732,"byte_end":122739,"line_start":463,"line_end":463,"column_start":5,"column_end":12},"name":"load_le","qualname":"::field::BitField::load_le","value":"pub fn load_le<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Loads from `self`, using little-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using little-endian element `T` ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120153,"byte_end":120217,"line_start":383,"line_end":383,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120219,"byte_end":120222,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120224,"byte_end":120294,"line_start":385,"line_end":385,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120296,"byte_end":120369,"line_start":386,"line_end":386,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120371,"byte_end":120446,"line_start":387,"line_end":387,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120448,"byte_end":120510,"line_start":388,"line_end":388,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120512,"byte_end":120515,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120517,"byte_end":120533,"line_start":390,"line_end":390,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120535,"byte_end":120538,"line_start":391,"line_end":391,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120540,"byte_end":120614,"line_start":392,"line_end":392,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120616,"byte_end":120692,"line_start":393,"line_end":393,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120694,"byte_end":120770,"line_start":394,"line_end":394,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120772,"byte_end":120784,"line_start":395,"line_end":395,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120786,"byte_end":120789,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120791,"byte_end":120804,"line_start":397,"line_end":397,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120806,"byte_end":120809,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120811,"byte_end":120886,"line_start":399,"line_end":399,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120888,"byte_end":120959,"line_start":400,"line_end":400,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":120961,"byte_end":121034,"line_start":401,"line_end":401,"column_start":2,"column_end":75}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121036,"byte_end":121112,"line_start":402,"line_end":402,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121114,"byte_end":121158,"line_start":403,"line_end":403,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121160,"byte_end":121163,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121165,"byte_end":121177,"line_start":405,"line_end":405,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121179,"byte_end":121182,"line_start":406,"line_end":406,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121184,"byte_end":121258,"line_start":407,"line_end":407,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121260,"byte_end":121283,"line_start":408,"line_end":408,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121285,"byte_end":121288,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121290,"byte_end":121304,"line_start":410,"line_end":410,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121306,"byte_end":121309,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121311,"byte_end":121382,"line_start":412,"line_end":412,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121384,"byte_end":121397,"line_start":413,"line_end":413,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121399,"byte_end":121402,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121404,"byte_end":121415,"line_start":415,"line_end":415,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121417,"byte_end":121444,"line_start":416,"line_end":416,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121446,"byte_end":121449,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121451,"byte_end":121479,"line_start":418,"line_end":418,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Msb0>()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121481,"byte_end":121513,"line_start":419,"line_end":419,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121515,"byte_end":121530,"line_start":420,"line_end":420,"column_start":2,"column_end":17}},{"value":"/   .store_le(0b0000_1_1011_1000_110u16);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121532,"byte_end":121575,"line_start":421,"line_end":421,"column_start":2,"column_end":45}},{"value":"/ //                 O PQRS TUVW XYZ","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121577,"byte_end":121615,"line_start":422,"line_end":422,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121617,"byte_end":121620,"line_start":423,"line_end":423,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121622,"byte_end":121644,"line_start":424,"line_end":424,"column_start":2,"column_end":24}},{"value":"/   0b00000_110, 0b1011_1000, 0b1_0000000","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121646,"byte_end":121689,"line_start":425,"line_end":425,"column_start":2,"column_end":45}},{"value":"/ //        XYZ    PQRS TUVW    O","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121691,"byte_end":121726,"line_start":426,"line_end":426,"column_start":2,"column_end":37}},{"value":"/ ]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121728,"byte_end":121735,"line_start":427,"line_end":427,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121737,"byte_end":121740,"line_start":428,"line_end":428,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Msb0>()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121742,"byte_end":121780,"line_start":429,"line_end":429,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121782,"byte_end":121797,"line_start":430,"line_end":430,"column_start":2,"column_end":17}},{"value":"/   .load_le::<u16>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121799,"byte_end":121823,"line_start":431,"line_end":431,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121825,"byte_end":121840,"line_start":432,"line_end":432,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121842,"byte_end":121852,"line_start":433,"line_end":433,"column_start":2,"column_end":12}},{"value":"/   0b0000_1_1011_1000_110,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121854,"byte_end":121883,"line_start":434,"line_end":434,"column_start":2,"column_end":31}},{"value":"/ //       O PQRS TUVW XYZ","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121885,"byte_end":121913,"line_start":435,"line_end":435,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121915,"byte_end":121921,"line_start":436,"line_end":436,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121923,"byte_end":121930,"line_start":437,"line_end":437,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121932,"byte_end":121935,"line_start":438,"line_end":438,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region will be read by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":121937,"byte_end":122006,"line_start":439,"line_end":439,"column_start":2,"column_end":71}},{"value":"/ different `BitOrder` implementors:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122008,"byte_end":122046,"line_start":440,"line_end":440,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122048,"byte_end":122051,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122053,"byte_end":122064,"line_start":442,"line_end":442,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122066,"byte_end":122093,"line_start":443,"line_end":443,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122095,"byte_end":122098,"line_start":444,"line_end":444,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:   14                                     19  16","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122100,"byte_end":122163,"line_start":445,"line_end":445,"column_start":2,"column_end":65}},{"value":"/ // Lsb0:     ─┤                                       ├──┤","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122165,"byte_end":122239,"line_start":446,"line_end":446,"column_start":2,"column_end":64}},{"value":"/ let arr = [0b0100_0000_0000_0011u16, 0b0001_0000_0000_1110u16];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122241,"byte_end":122308,"line_start":447,"line_end":447,"column_start":2,"column_end":69}},{"value":"/ // Msb0:                      ├─       ├──┤","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122310,"byte_end":122369,"line_start":448,"line_end":448,"column_start":2,"column_end":49}},{"value":"/ // Bit pos:                  14       16  19","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122371,"byte_end":122419,"line_start":449,"line_end":449,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122421,"byte_end":122424,"line_start":450,"line_end":450,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122426,"byte_end":122441,"line_start":451,"line_end":451,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Lsb0>()[14 .. 20].load_le::<u8>(),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122443,"byte_end":122499,"line_start":452,"line_end":452,"column_start":2,"column_end":58}},{"value":"/   0b111001,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122501,"byte_end":122516,"line_start":453,"line_end":453,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122518,"byte_end":122524,"line_start":454,"line_end":454,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122526,"byte_end":122541,"line_start":455,"line_end":455,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Msb0>()[14 .. 20].load_le::<u8>(),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122543,"byte_end":122599,"line_start":456,"line_end":456,"column_start":2,"column_end":58}},{"value":"/   0b000111,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122601,"byte_end":122616,"line_start":457,"line_end":457,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122618,"byte_end":122624,"line_start":458,"line_end":458,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122626,"byte_end":122633,"line_start":459,"line_end":459,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122635,"byte_end":122638,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122640,"byte_end":122678,"line_start":461,"line_end":461,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122680,"byte_end":122727,"line_start":462,"line_end":462,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125382,"byte_end":125389,"line_start":547,"line_end":547,"column_start":5,"column_end":12},"name":"load_be","qualname":"::field::BitField::load_be","value":"pub fn load_be<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Loads from `self`, using big-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using big-endian element `T` ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122778,"byte_end":122839,"line_start":466,"line_end":466,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122841,"byte_end":122844,"line_start":467,"line_end":467,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122846,"byte_end":122915,"line_start":468,"line_end":468,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122917,"byte_end":122991,"line_start":469,"line_end":469,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":122993,"byte_end":123068,"line_start":470,"line_end":470,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123070,"byte_end":123132,"line_start":471,"line_end":471,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123134,"byte_end":123137,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123139,"byte_end":123155,"line_start":473,"line_end":473,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123157,"byte_end":123160,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123162,"byte_end":123236,"line_start":475,"line_end":475,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123238,"byte_end":123314,"line_start":476,"line_end":476,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123316,"byte_end":123392,"line_start":477,"line_end":477,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123394,"byte_end":123406,"line_start":478,"line_end":478,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123408,"byte_end":123411,"line_start":479,"line_end":479,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123413,"byte_end":123426,"line_start":480,"line_end":480,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123428,"byte_end":123431,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123433,"byte_end":123508,"line_start":482,"line_end":482,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123510,"byte_end":123581,"line_start":483,"line_end":483,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123583,"byte_end":123655,"line_start":484,"line_end":484,"column_start":2,"column_end":74}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123657,"byte_end":123733,"line_start":485,"line_end":485,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123735,"byte_end":123780,"line_start":486,"line_end":486,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123782,"byte_end":123785,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123787,"byte_end":123799,"line_start":488,"line_end":488,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123801,"byte_end":123804,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123806,"byte_end":123880,"line_start":490,"line_end":490,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123882,"byte_end":123905,"line_start":491,"line_end":491,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123907,"byte_end":123910,"line_start":492,"line_end":492,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123912,"byte_end":123926,"line_start":493,"line_end":493,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123928,"byte_end":123931,"line_start":494,"line_end":494,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":123933,"byte_end":124004,"line_start":495,"line_end":495,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124006,"byte_end":124019,"line_start":496,"line_end":496,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124021,"byte_end":124024,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124026,"byte_end":124037,"line_start":498,"line_end":498,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124039,"byte_end":124066,"line_start":499,"line_end":499,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124068,"byte_end":124071,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124073,"byte_end":124101,"line_start":501,"line_end":501,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Msb0>()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124103,"byte_end":124135,"line_start":502,"line_end":502,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124137,"byte_end":124152,"line_start":503,"line_end":503,"column_start":2,"column_end":17}},{"value":"/   .store_be(0b0000_110_1000_1011_1u16);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124154,"byte_end":124197,"line_start":504,"line_end":504,"column_start":2,"column_end":45}},{"value":"/ //                 OPQ RSTU VWXY Z","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124199,"byte_end":124237,"line_start":505,"line_end":505,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124239,"byte_end":124242,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124244,"byte_end":124266,"line_start":507,"line_end":507,"column_start":2,"column_end":24}},{"value":"/   0b00000_110, 0b1000_1011, 0b1_0000000","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124268,"byte_end":124311,"line_start":508,"line_end":508,"column_start":2,"column_end":45}},{"value":"/ //        OPQ    RSTU VWXY    Z","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124313,"byte_end":124348,"line_start":509,"line_end":509,"column_start":2,"column_end":37}},{"value":"/ ]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124350,"byte_end":124357,"line_start":510,"line_end":510,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124359,"byte_end":124362,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Msb0>()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124364,"byte_end":124402,"line_start":512,"line_end":512,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124404,"byte_end":124419,"line_start":513,"line_end":513,"column_start":2,"column_end":17}},{"value":"/   .load_be::<u16>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124421,"byte_end":124445,"line_start":514,"line_end":514,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124447,"byte_end":124462,"line_start":515,"line_end":515,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124464,"byte_end":124474,"line_start":516,"line_end":516,"column_start":2,"column_end":12}},{"value":"/   0b0000_110_1000_1011_1,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124476,"byte_end":124505,"line_start":517,"line_end":517,"column_start":2,"column_end":31}},{"value":"/ //       OPQ RSTU VWXY Z","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124507,"byte_end":124535,"line_start":518,"line_end":518,"column_start":2,"column_end":30}},{"value":"/ # \"{:012b}\",","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124537,"byte_end":124553,"line_start":519,"line_end":519,"column_start":2,"column_end":18}},{"value":"/ # val,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124555,"byte_end":124565,"line_start":520,"line_end":520,"column_start":2,"column_end":12}},{"value":"/ );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124567,"byte_end":124573,"line_start":521,"line_end":521,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124575,"byte_end":124582,"line_start":522,"line_end":522,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124584,"byte_end":124587,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region will be read by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124589,"byte_end":124658,"line_start":524,"line_end":524,"column_start":2,"column_end":71}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124660,"byte_end":124701,"line_start":525,"line_end":525,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124703,"byte_end":124706,"line_start":526,"line_end":526,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124708,"byte_end":124719,"line_start":527,"line_end":527,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124721,"byte_end":124748,"line_start":528,"line_end":528,"column_start":2,"column_end":29}},{"value":"/ // Bit pos:   14                                     19  16","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124750,"byte_end":124813,"line_start":529,"line_end":529,"column_start":2,"column_end":65}},{"value":"/ // Lsb0:     ─┤                                       ├──┤","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124815,"byte_end":124889,"line_start":530,"line_end":530,"column_start":2,"column_end":64}},{"value":"/ let arr = [0b0100_0000_0000_0011u16, 0b0001_0000_0000_1110u16];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124891,"byte_end":124958,"line_start":531,"line_end":531,"column_start":2,"column_end":69}},{"value":"/ // Msb0:                      ├─       ├──┤","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":124960,"byte_end":125019,"line_start":532,"line_end":532,"column_start":2,"column_end":49}},{"value":"/ // Bit pos:                  14       16  19","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125021,"byte_end":125069,"line_start":533,"line_end":533,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125071,"byte_end":125074,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125076,"byte_end":125091,"line_start":535,"line_end":535,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Lsb0>()[14 .. 20].load_be::<u8>(),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125093,"byte_end":125149,"line_start":536,"line_end":536,"column_start":2,"column_end":58}},{"value":"/   0b011110,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125151,"byte_end":125166,"line_start":537,"line_end":537,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125168,"byte_end":125174,"line_start":538,"line_end":538,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125176,"byte_end":125191,"line_start":539,"line_end":539,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Msb0>()[14 .. 20].load_be::<u8>(),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125193,"byte_end":125249,"line_start":540,"line_end":540,"column_start":2,"column_end":58}},{"value":"/   0b110001,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125251,"byte_end":125266,"line_start":541,"line_end":541,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125268,"byte_end":125274,"line_start":542,"line_end":542,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125276,"byte_end":125283,"line_start":543,"line_end":543,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125285,"byte_end":125288,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125290,"byte_end":125328,"line_start":545,"line_end":545,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125330,"byte_end":125377,"line_start":546,"line_end":546,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128301,"byte_end":128309,"line_start":631,"line_end":631,"column_start":5,"column_end":13},"name":"store_le","qualname":"::field::BitField::store_le","value":"pub fn store_le<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Stores into `self`, using little-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using little-endian element ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125428,"byte_end":125489,"line_start":550,"line_end":550,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125491,"byte_end":125494,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125496,"byte_end":125566,"line_start":552,"line_end":552,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125568,"byte_end":125641,"line_start":553,"line_end":553,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125643,"byte_end":125718,"line_start":554,"line_end":554,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125720,"byte_end":125782,"line_start":555,"line_end":555,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125784,"byte_end":125787,"line_start":556,"line_end":556,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125789,"byte_end":125805,"line_start":557,"line_end":557,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125807,"byte_end":125810,"line_start":558,"line_end":558,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125812,"byte_end":125888,"line_start":559,"line_end":559,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125890,"byte_end":125964,"line_start":560,"line_end":560,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":125966,"byte_end":126040,"line_start":561,"line_end":561,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126042,"byte_end":126061,"line_start":562,"line_end":562,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126063,"byte_end":126138,"line_start":563,"line_end":563,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126140,"byte_end":126165,"line_start":564,"line_end":564,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126167,"byte_end":126170,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126172,"byte_end":126186,"line_start":566,"line_end":566,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126188,"byte_end":126191,"line_start":567,"line_end":567,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126193,"byte_end":126266,"line_start":568,"line_end":568,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126268,"byte_end":126341,"line_start":569,"line_end":569,"column_start":2,"column_end":75}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126343,"byte_end":126416,"line_start":570,"line_end":570,"column_start":2,"column_end":75}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126418,"byte_end":126494,"line_start":571,"line_end":571,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126496,"byte_end":126540,"line_start":572,"line_end":572,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126542,"byte_end":126545,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126547,"byte_end":126559,"line_start":574,"line_end":574,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126561,"byte_end":126564,"line_start":575,"line_end":575,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126566,"byte_end":126640,"line_start":576,"line_end":576,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126642,"byte_end":126665,"line_start":577,"line_end":577,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126667,"byte_end":126670,"line_start":578,"line_end":578,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126672,"byte_end":126686,"line_start":579,"line_end":579,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126688,"byte_end":126691,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126693,"byte_end":126764,"line_start":581,"line_end":581,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126766,"byte_end":126779,"line_start":582,"line_end":582,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126781,"byte_end":126784,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126786,"byte_end":126797,"line_start":584,"line_end":584,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126799,"byte_end":126826,"line_start":585,"line_end":585,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126828,"byte_end":126831,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126833,"byte_end":126861,"line_start":587,"line_end":587,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Lsb0>()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126863,"byte_end":126895,"line_start":588,"line_end":588,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126897,"byte_end":126912,"line_start":589,"line_end":589,"column_start":2,"column_end":17}},{"value":"/   .store_le(0b0000_1_1011_1000_110u16);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126914,"byte_end":126957,"line_start":590,"line_end":590,"column_start":2,"column_end":45}},{"value":"/ //                 O PQRS TUVW XYZ","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126959,"byte_end":126997,"line_start":591,"line_end":591,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":126999,"byte_end":127002,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127004,"byte_end":127026,"line_start":593,"line_end":593,"column_start":2,"column_end":24}},{"value":"/   0b110_00000, 0b1011_1000, 0b0000000_1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127028,"byte_end":127071,"line_start":594,"line_end":594,"column_start":2,"column_end":45}},{"value":"/ //  XYZ          PQRS TUVW            O","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127073,"byte_end":127116,"line_start":595,"line_end":595,"column_start":2,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127118,"byte_end":127125,"line_start":596,"line_end":596,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127127,"byte_end":127130,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Lsb0>()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127132,"byte_end":127170,"line_start":598,"line_end":598,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127172,"byte_end":127187,"line_start":599,"line_end":599,"column_start":2,"column_end":17}},{"value":"/   .load_le::<u16>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127189,"byte_end":127213,"line_start":600,"line_end":600,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127215,"byte_end":127230,"line_start":601,"line_end":601,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127232,"byte_end":127242,"line_start":602,"line_end":602,"column_start":2,"column_end":12}},{"value":"/   0b0000_1_1011_1000_110u16,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127244,"byte_end":127276,"line_start":603,"line_end":603,"column_start":2,"column_end":34}},{"value":"/ //       O PQRS TUVW XYZ","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127278,"byte_end":127306,"line_start":604,"line_end":604,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127308,"byte_end":127314,"line_start":605,"line_end":605,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127316,"byte_end":127323,"line_start":606,"line_end":606,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127325,"byte_end":127328,"line_start":607,"line_end":607,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region is written by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127330,"byte_end":127397,"line_start":608,"line_end":608,"column_start":2,"column_end":69}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127399,"byte_end":127440,"line_start":609,"line_end":609,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127442,"byte_end":127445,"line_start":610,"line_end":610,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127447,"byte_end":127458,"line_start":611,"line_end":611,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127460,"byte_end":127487,"line_start":612,"line_end":612,"column_start":2,"column_end":29}},{"value":"/ let mut lsb0 = bitarr![Lsb0, u16; 0; 32];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127489,"byte_end":127534,"line_start":613,"line_end":613,"column_start":2,"column_end":47}},{"value":"/ let mut msb0 = bitarr![Msb0, u16; 0; 32];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127536,"byte_end":127581,"line_start":614,"line_end":614,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127583,"byte_end":127586,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:        14                                     19  16","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127588,"byte_end":127656,"line_start":616,"line_end":616,"column_start":2,"column_end":70}},{"value":"/ // Lsb0:          ─┤                                       ├──┤","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127658,"byte_end":127737,"line_start":617,"line_end":617,"column_start":2,"column_end":69}},{"value":"/ let exp_lsb0 = [0b0100_0000_0000_0000u16, 0b0000_0000_0000_1110u16];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127739,"byte_end":127811,"line_start":618,"line_end":618,"column_start":2,"column_end":74}},{"value":"/ let exp_msb0 = [0b0000_0000_0000_0011u16, 0b0001_0000_0000_0000u16];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127813,"byte_end":127885,"line_start":619,"line_end":619,"column_start":2,"column_end":74}},{"value":"/ // Msb0:                           ├─       ├──┤","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127887,"byte_end":127951,"line_start":620,"line_end":620,"column_start":2,"column_end":54}},{"value":"/ // Bit pos:                       14       16  19","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":127953,"byte_end":128006,"line_start":621,"line_end":621,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128008,"byte_end":128011,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ lsb0[14 ..= 19].store_le(0b111001u8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128013,"byte_end":128054,"line_start":623,"line_end":623,"column_start":2,"column_end":43}},{"value":"/ msb0[14 ..= 19].store_le(0b000111u8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128056,"byte_end":128097,"line_start":624,"line_end":624,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(lsb0.as_raw_slice(), exp_lsb0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128099,"byte_end":128145,"line_start":625,"line_end":625,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(msb0.as_raw_slice(), exp_msb0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128147,"byte_end":128193,"line_start":626,"line_end":626,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128195,"byte_end":128202,"line_start":627,"line_end":627,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128204,"byte_end":128207,"line_start":628,"line_end":628,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128209,"byte_end":128247,"line_start":629,"line_end":629,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128249,"byte_end":128296,"line_start":630,"line_end":630,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131227,"byte_end":131235,"line_start":715,"line_end":715,"column_start":5,"column_end":13},"name":"store_be","qualname":"::field::BitField::store_be","value":"pub fn store_be<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Stores into `self`, using big-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using big-endian element ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128357,"byte_end":128415,"line_start":634,"line_end":634,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128417,"byte_end":128420,"line_start":635,"line_end":635,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128422,"byte_end":128491,"line_start":636,"line_end":636,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128493,"byte_end":128567,"line_start":637,"line_end":637,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128569,"byte_end":128644,"line_start":638,"line_end":638,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128646,"byte_end":128708,"line_start":639,"line_end":639,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128710,"byte_end":128713,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128715,"byte_end":128731,"line_start":641,"line_end":641,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128733,"byte_end":128736,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128738,"byte_end":128814,"line_start":643,"line_end":643,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128816,"byte_end":128890,"line_start":644,"line_end":644,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128892,"byte_end":128966,"line_start":645,"line_end":645,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128968,"byte_end":128987,"line_start":646,"line_end":646,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":128989,"byte_end":129064,"line_start":647,"line_end":647,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129066,"byte_end":129091,"line_start":648,"line_end":648,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129093,"byte_end":129096,"line_start":649,"line_end":649,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129098,"byte_end":129112,"line_start":650,"line_end":650,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129114,"byte_end":129117,"line_start":651,"line_end":651,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129119,"byte_end":129192,"line_start":652,"line_end":652,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129194,"byte_end":129267,"line_start":653,"line_end":653,"column_start":2,"column_end":75}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129269,"byte_end":129341,"line_start":654,"line_end":654,"column_start":2,"column_end":74}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129343,"byte_end":129419,"line_start":655,"line_end":655,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129421,"byte_end":129466,"line_start":656,"line_end":656,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129468,"byte_end":129471,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129473,"byte_end":129485,"line_start":658,"line_end":658,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129487,"byte_end":129490,"line_start":659,"line_end":659,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129492,"byte_end":129566,"line_start":660,"line_end":660,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129568,"byte_end":129591,"line_start":661,"line_end":661,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129593,"byte_end":129596,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129598,"byte_end":129612,"line_start":663,"line_end":663,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129614,"byte_end":129617,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129619,"byte_end":129690,"line_start":665,"line_end":665,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129692,"byte_end":129705,"line_start":666,"line_end":666,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129707,"byte_end":129710,"line_start":667,"line_end":667,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129712,"byte_end":129723,"line_start":668,"line_end":668,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129725,"byte_end":129752,"line_start":669,"line_end":669,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129754,"byte_end":129757,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129759,"byte_end":129787,"line_start":671,"line_end":671,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Lsb0>()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129789,"byte_end":129821,"line_start":672,"line_end":672,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129823,"byte_end":129838,"line_start":673,"line_end":673,"column_start":2,"column_end":17}},{"value":"/   .store_be(0b0000_110_1000_1011_1u16);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129840,"byte_end":129883,"line_start":674,"line_end":674,"column_start":2,"column_end":45}},{"value":"/ //                 OPQ RSTU VWXY Z","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129885,"byte_end":129923,"line_start":675,"line_end":675,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129925,"byte_end":129928,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129930,"byte_end":129952,"line_start":677,"line_end":677,"column_start":2,"column_end":24}},{"value":"/   0b110_00000, 0b1000_1011, 0b0000000_1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129954,"byte_end":129997,"line_start":678,"line_end":678,"column_start":2,"column_end":45}},{"value":"/ //  OPQ          RSTU VWXY            Z","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":129999,"byte_end":130042,"line_start":679,"line_end":679,"column_start":2,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130044,"byte_end":130051,"line_start":680,"line_end":680,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130053,"byte_end":130056,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Lsb0>()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130058,"byte_end":130096,"line_start":682,"line_end":682,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130098,"byte_end":130113,"line_start":683,"line_end":683,"column_start":2,"column_end":17}},{"value":"/   .load_be::<u16>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130115,"byte_end":130139,"line_start":684,"line_end":684,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130141,"byte_end":130156,"line_start":685,"line_end":685,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130158,"byte_end":130168,"line_start":686,"line_end":686,"column_start":2,"column_end":12}},{"value":"/   0b0000_110_1000_1011_1u16,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130170,"byte_end":130202,"line_start":687,"line_end":687,"column_start":2,"column_end":34}},{"value":"/ //       OPQ RSTU VWXY Z","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130204,"byte_end":130232,"line_start":688,"line_end":688,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130234,"byte_end":130240,"line_start":689,"line_end":689,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130242,"byte_end":130249,"line_start":690,"line_end":690,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130251,"byte_end":130254,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region is written by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130256,"byte_end":130323,"line_start":692,"line_end":692,"column_start":2,"column_end":69}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130325,"byte_end":130366,"line_start":693,"line_end":693,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130368,"byte_end":130371,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130373,"byte_end":130384,"line_start":695,"line_end":695,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130386,"byte_end":130413,"line_start":696,"line_end":696,"column_start":2,"column_end":29}},{"value":"/ let mut lsb0 = bitarr![Lsb0, u16; 0; 32];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130415,"byte_end":130460,"line_start":697,"line_end":697,"column_start":2,"column_end":47}},{"value":"/ let mut msb0 = bitarr![Msb0, u16; 0; 32];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130462,"byte_end":130507,"line_start":698,"line_end":698,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130509,"byte_end":130512,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:        14                                     19  16","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130514,"byte_end":130582,"line_start":700,"line_end":700,"column_start":2,"column_end":70}},{"value":"/ // Lsb0:          ─┤                                       ├──┤","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130584,"byte_end":130663,"line_start":701,"line_end":701,"column_start":2,"column_end":69}},{"value":"/ let exp_lsb0 = [0b0100_0000_0000_0000u16, 0b0000_0000_0000_1110u16];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130665,"byte_end":130737,"line_start":702,"line_end":702,"column_start":2,"column_end":74}},{"value":"/ let exp_msb0 = [0b0000_0000_0000_0011u16, 0b0001_0000_0000_0000u16];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130739,"byte_end":130811,"line_start":703,"line_end":703,"column_start":2,"column_end":74}},{"value":"/ // Msb0:                           ├─       ├──┤","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130813,"byte_end":130877,"line_start":704,"line_end":704,"column_start":2,"column_end":54}},{"value":"/ // Bit pos:                       14       16  19","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130879,"byte_end":130932,"line_start":705,"line_end":705,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130934,"byte_end":130937,"line_start":706,"line_end":706,"column_start":2,"column_end":5}},{"value":"/ lsb0[14 ..= 19].store_be(0b011110u8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130939,"byte_end":130980,"line_start":707,"line_end":707,"column_start":2,"column_end":43}},{"value":"/ msb0[14 ..= 19].store_be(0b110001u8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":130982,"byte_end":131023,"line_start":708,"line_end":708,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(lsb0.as_raw_slice(), exp_lsb0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131025,"byte_end":131071,"line_start":709,"line_end":709,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(msb0.as_raw_slice(), exp_msb0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131073,"byte_end":131119,"line_start":710,"line_end":710,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131121,"byte_end":131128,"line_start":711,"line_end":711,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131130,"byte_end":131133,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: funty::IsNumber::BITS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131135,"byte_end":131173,"line_start":713,"line_end":713,"column_start":2,"column_end":40}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131175,"byte_end":131222,"line_start":714,"line_end":714,"column_start":2,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":869},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::index","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":907},{"krate":0,"index":910},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":917},{"krate":0,"index":5200},{"krate":0,"index":5204},{"krate":0,"index":5207},{"krate":0,"index":5209},{"krate":0,"index":5212},{"krate":0,"index":5214},{"krate":0,"index":5217},{"krate":0,"index":5221},{"krate":0,"index":5224},{"krate":0,"index":5226},{"krate":0,"index":5230},{"krate":0,"index":920},{"krate":0,"index":944},{"krate":0,"index":948},{"krate":0,"index":951},{"krate":0,"index":954},{"krate":0,"index":5233},{"krate":0,"index":5237},{"krate":0,"index":5240},{"krate":0,"index":5242},{"krate":0,"index":5245},{"krate":0,"index":5247},{"krate":0,"index":5250},{"krate":0,"index":5254},{"krate":0,"index":5257},{"krate":0,"index":5259},{"krate":0,"index":5263},{"krate":0,"index":957},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":5266},{"krate":0,"index":5270},{"krate":0,"index":5273},{"krate":0,"index":5275},{"krate":0,"index":5278},{"krate":0,"index":5280},{"krate":0,"index":5283},{"krate":0,"index":5287},{"krate":0,"index":5290},{"krate":0,"index":5292},{"krate":0,"index":5296},{"krate":0,"index":969},{"krate":0,"index":971},{"krate":0,"index":982},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":5299},{"krate":0,"index":5303},{"krate":0,"index":5306},{"krate":0,"index":5308},{"krate":0,"index":5311},{"krate":0,"index":5313},{"krate":0,"index":5316},{"krate":0,"index":5320},{"krate":0,"index":5323},{"krate":0,"index":5325},{"krate":0,"index":5329},{"krate":0,"index":991},{"krate":0,"index":1001},{"krate":0,"index":1004},{"krate":0,"index":1007},{"krate":0,"index":5332},{"krate":0,"index":5335},{"krate":0,"index":5338},{"krate":0,"index":5340},{"krate":0,"index":5343},{"krate":0,"index":5345},{"krate":0,"index":5348},{"krate":0,"index":5352},{"krate":0,"index":5355},{"krate":0,"index":5357},{"krate":0,"index":5361},{"krate":0,"index":1010},{"krate":0,"index":1018},{"krate":0,"index":1021},{"krate":0,"index":1024},{"krate":0,"index":5364},{"krate":0,"index":5367},{"krate":0,"index":5370},{"krate":0,"index":5372},{"krate":0,"index":5375},{"krate":0,"index":5377},{"krate":0,"index":5380},{"krate":0,"index":5384},{"krate":0,"index":5387},{"krate":0,"index":5389},{"krate":0,"index":5393},{"krate":0,"index":1027},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1045},{"krate":0,"index":1049},{"krate":0,"index":1053},{"krate":0,"index":1057}],"decl_id":null,"docs":" Well-typed counters and register descriptors.","sig":null,"attributes":[{"value":"* Well-typed counters and register descriptors.\n\nThis module provides session types which encode a strict chain of modification\nto map semantic indices within a [`BitSlice`] to the electrical register values\nused to interact with the memory bus.\n\nThe main advantage of the types in this module is that they provide\nregister-dependent range requirements for counter values, making it impossible\nto have an index out of bounds for a register. They also create a sequence of\ntype transformations that assure the library about the continued validity of\neach value in its surrounding context.\n\nBy eliminating public constructors from arbitrary integers, [`bitvec`] can\nguarantee that only it can produce seed values, and only trusted functions can\ntransform their numeric values or types, until the program reaches the property\nthat it requires. This chain of assurance means that memory operations can be\nconfident in the correctness of their actions and effects.\n\n# Type Sequence\n\nThe library produces [`BitIdx`] values from region computation. These types\ncannot be publicly constructed, and are only ever the result of pointer\nanalysis. As such, they rely on correctness of the memory regions provided to\nlibrary entry points, and those entry points can leverage the Rust type system\nto ensure safety there.\n\n[`BitIdx`] is transformed to [`BitPos`] through the [`BitOrder`] trait. The\n[`order`] module provides verification functions that implementors can use to\ndemonstrate correctness. `BitPos` is the seed type that describes memory\noperations, and is used to create selection masks [`BitSel`] and [`BitMask`].\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitMask`]: crate::index::BitMask\n[`BitOrder`]: crate::order::BitOrder\n[`BitPos`]: crate::index::BitPos\n[`BitSel`]: crate::index::BitSel\n[`BitSlice`]: crate::slice::BitSlice\n[`bitvec`]: crate\n[`order`]: crate::order\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":164304,"byte_end":166173,"line_start":1,"line_end":40,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5200},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167936,"byte_end":167942,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"BitIdx","qualname":"::index::BitIdx","value":"BitIdx {  }","parent":null,"children":[{"krate":0,"index":5202},{"krate":0,"index":5203}],"decl_id":null,"docs":" A semantic index counter within a register element `R`.","sig":null,"attributes":[{"value":"* A semantic index counter within a register element `R`.\n\nThis type is a counter in the ring `0 .. R::BITS`, and serves to mark a semantic\nindex within some register element. It is a virtual index, and is the stored\nvalue used in pointer encodings to track region start information.\n\nIt is translated to an electrical index through the [`BitOrder`] trait. This\nvirtual index is the only counter that can be used for address computation, and\nonce lowered to an electrical index through [`BitOrder::at`], the electrical\naddress can only be used for instruction selection.\n\n# Type Parameters\n\n- `R`: The register element that this index governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 .. R::BITS`. Any\nvalue not less than [`R::BITS`] makes the program invalid, and will likely cause\neither a crash or incorrect memory access.\n\n# Construction\n\nThis type can never be constructed outside of the [`bitvec`] crate. It is passed\nin to [`BitOrder`] implementations, which may use it to construct electrical\nposition, selection, or mask values from it. All values of this type constructed\nby [`bitvec`] are known to be correct in their region; no other construction\nsite can be trusted.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitOrder::at`]: crate::order::BitOrder::at\n[`R::BITS`]: funty::IsNumber::BITS\n[`bitvec`]: crate\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":166430,"byte_end":167782,"line_start":69,"line_end":102,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":167834,"byte_end":167854,"line_start":104,"line_end":104,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":922},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168225,"byte_end":168229,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"name":"LAST","qualname":"::index::BitIdx::<R>::LAST","value":"Self","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" The inclusive maximum index within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum index within an element `R`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168159,"byte_end":168213,"line_start":118,"line_end":118,"column_start":2,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":923},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168352,"byte_end":168356,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitIdx::<R>::ZERO","value":"Self","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" The inclusive minimum index within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum index within an element `R`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168286,"byte_end":168340,"line_start":123,"line_end":123,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168887,"byte_end":168890,"line_start":144,"line_end":144,"column_start":9,"column_end":12},"name":"new","qualname":"<BitIdx<R>>::new","value":"pub fn new(u8) -> Result<Self, BitIdxError<R>>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good index into an `R` register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168408,"byte_end":168477,"line_start":129,"line_end":129,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168479,"byte_end":168482,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168484,"byte_end":168500,"line_start":131,"line_end":131,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168502,"byte_end":168505,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as an index. This must be not less","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168507,"byte_end":168582,"line_start":133,"line_end":133,"column_start":2,"column_end":77}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168584,"byte_end":168643,"line_start":134,"line_end":134,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168645,"byte_end":168648,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168650,"byte_end":168663,"line_start":136,"line_end":136,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168665,"byte_end":168668,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as either a valid or invalid index by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168670,"byte_end":168740,"line_start":138,"line_end":138,"column_start":2,"column_end":72}},{"value":"/ whether it is within the valid range `0 .. R::BITS`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168742,"byte_end":168798,"line_start":139,"line_end":139,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168800,"byte_end":168803,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168805,"byte_end":168835,"line_start":141,"line_end":141,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168837,"byte_end":168867,"line_start":142,"line_end":142,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168869,"byte_end":168878,"line_start":143,"line_end":143,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169651,"byte_end":169664,"line_start":171,"line_end":171,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitIdx<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good index into an `R` register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169059,"byte_end":169131,"line_start":151,"line_end":151,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169133,"byte_end":169136,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169138,"byte_end":169154,"line_start":153,"line_end":153,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169156,"byte_end":169159,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as an index. This must be not less","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169161,"byte_end":169236,"line_start":155,"line_end":155,"column_start":2,"column_end":77}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169238,"byte_end":169297,"line_start":156,"line_end":156,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169299,"byte_end":169302,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169304,"byte_end":169317,"line_start":158,"line_end":158,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169319,"byte_end":169322,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as a valid index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169324,"byte_end":169374,"line_start":160,"line_end":160,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169376,"byte_end":169379,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169381,"byte_end":169393,"line_start":162,"line_end":162,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169395,"byte_end":169398,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ If the `value` is outside the valid range, then the program is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169400,"byte_end":169466,"line_start":164,"line_end":164,"column_start":2,"column_end":68}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169468,"byte_end":169541,"line_start":165,"line_end":165,"column_start":2,"column_end":75}},{"value":"/ `value`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169543,"byte_end":169555,"line_start":166,"line_end":166,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169557,"byte_end":169560,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169562,"byte_end":169592,"line_start":168,"line_end":168,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169594,"byte_end":169624,"line_start":169,"line_end":169,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169626,"byte_end":169635,"line_start":170,"line_end":170,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170078,"byte_end":170082,"line_start":190,"line_end":190,"column_start":9,"column_end":13},"name":"cast","qualname":"<BitIdx<R>>::cast","value":"pub fn cast<S>(Self) -> Result<BitIdx<S>, BitIdxError<S>> where S: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Casts to a new index type.","sig":null,"attributes":[{"value":"/ Casts to a new index type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169857,"byte_end":169887,"line_start":184,"line_end":184,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169889,"byte_end":169892,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ This will always succeed if `self.into_inner()` is a valid index in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169894,"byte_end":169969,"line_start":186,"line_end":186,"column_start":2,"column_end":77}},{"value":"/ `S` register; it will return an error if the `self` index is too wide","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":169971,"byte_end":170044,"line_start":187,"line_end":187,"column_start":2,"column_end":75}},{"value":"/ for `S`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170046,"byte_end":170058,"line_start":188,"line_end":188,"column_start":2,"column_end":14}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170060,"byte_end":170069,"line_start":189,"line_end":189,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170313,"byte_end":170323,"line_start":197,"line_end":197,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitIdx<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the index wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the index wrapper, leaving the internal counter.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170191,"byte_end":170251,"line_start":195,"line_end":195,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170288,"byte_end":170302,"line_start":196,"line_end":196,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170650,"byte_end":170654,"line_start":212,"line_end":212,"column_start":9,"column_end":13},"name":"next","qualname":"<BitIdx<R>>::next","value":"pub fn next(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Increments an index counter, wrapping at the back edge of the register.","sig":null,"attributes":[{"value":"/ Increments an index counter, wrapping at the back edge of the register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170354,"byte_end":170429,"line_start":201,"line_end":201,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170431,"byte_end":170434,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170436,"byte_end":170452,"line_start":203,"line_end":203,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170454,"byte_end":170457,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to increment.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170459,"byte_end":170496,"line_start":205,"line_end":205,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170498,"byte_end":170501,"line_start":206,"line_end":206,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170503,"byte_end":170516,"line_start":207,"line_end":207,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170518,"byte_end":170521,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The next index after `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170523,"byte_end":170563,"line_start":209,"line_end":209,"column_start":2,"column_end":42}},{"value":"/ - `.1`: Indicates that the new index is in the next register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170565,"byte_end":170630,"line_start":210,"line_end":210,"column_start":2,"column_end":67}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170632,"byte_end":170641,"line_start":211,"line_end":211,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171102,"byte_end":171106,"line_start":231,"line_end":231,"column_start":9,"column_end":13},"name":"prev","qualname":"<BitIdx<R>>::prev","value":"pub fn prev(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Decrements an index counter, wrapping at the front edge of the register.","sig":null,"attributes":[{"value":"/ Decrements an index counter, wrapping at the front edge of the register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170796,"byte_end":170872,"line_start":220,"line_end":220,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170874,"byte_end":170877,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170879,"byte_end":170895,"line_start":222,"line_end":222,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170897,"byte_end":170900,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to decrement.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170902,"byte_end":170939,"line_start":224,"line_end":224,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170941,"byte_end":170944,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170946,"byte_end":170959,"line_start":226,"line_end":226,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170961,"byte_end":170964,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The previous index before `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":170966,"byte_end":171011,"line_start":228,"line_end":228,"column_start":2,"column_end":47}},{"value":"/ - `.1`: Indicates that the new index is in the previous register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171013,"byte_end":171082,"line_start":229,"line_end":229,"column_start":2,"column_end":71}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171084,"byte_end":171093,"line_start":230,"line_end":230,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171557,"byte_end":171565,"line_start":246,"line_end":246,"column_start":9,"column_end":17},"name":"position","qualname":"<BitIdx<R>>::position","value":"pub fn position<O>(Self) -> BitPos<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit position corresponding to `self` under some ordering.","sig":null,"attributes":[{"value":"/ Computes the bit position corresponding to `self` under some ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171252,"byte_end":171326,"line_start":239,"line_end":239,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171328,"byte_end":171331,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::at::<R>`], which is the only public, safe,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171333,"byte_end":171401,"line_start":241,"line_end":241,"column_start":2,"column_end":70}},{"value":"/ constructor for a position counter.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171403,"byte_end":171442,"line_start":242,"line_end":242,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171444,"byte_end":171447,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ [`O::at::<R>`]: crate::order::BitOrder::at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171449,"byte_end":171495,"line_start":244,"line_end":244,"column_start":2,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171532,"byte_end":171546,"line_start":245,"line_end":245,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171944,"byte_end":171950,"line_start":258,"line_end":258,"column_start":9,"column_end":15},"name":"select","qualname":"<BitIdx<R>>::select","value":"pub fn select<O>(Self) -> BitSel<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self` under an ordering.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self` under an ordering.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171633,"byte_end":171705,"line_start":251,"line_end":251,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171707,"byte_end":171710,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::select::<R>`], which is the only public, safe,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171712,"byte_end":171784,"line_start":253,"line_end":253,"column_start":2,"column_end":74}},{"value":"/ constructor for a bit selector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171786,"byte_end":171821,"line_start":254,"line_end":254,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171823,"byte_end":171826,"line_start":255,"line_end":255,"column_start":2,"column_end":5}},{"value":"/ [`O::select::<R>`]: crate::order::BitOrder::select","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171828,"byte_end":171882,"line_start":256,"line_end":256,"column_start":2,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":171919,"byte_end":171933,"line_start":257,"line_end":257,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172239,"byte_end":172243,"line_start":269,"line_end":269,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitIdx<R>>::mask","value":"pub fn mask<O>(Self) -> BitMask<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172022,"byte_end":172083,"line_start":263,"line_end":263,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172085,"byte_end":172088,"line_start":264,"line_end":264,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172090,"byte_end":172136,"line_start":265,"line_end":265,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172138,"byte_end":172141,"line_start":266,"line_end":266,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172143,"byte_end":172177,"line_start":267,"line_end":267,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172214,"byte_end":172228,"line_start":268,"line_end":268,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173216,"byte_end":173221,"line_start":300,"line_end":300,"column_start":9,"column_end":14},"name":"range","qualname":"<BitIdx<R>>::range","value":"pub fn range(Self, BitEnd<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all indices between an inclusive start and exclusive end\n point.","sig":null,"attributes":[{"value":"/ Iterates over all indices between an inclusive start and exclusive end","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172321,"byte_end":172395,"line_start":274,"line_end":274,"column_start":2,"column_end":76}},{"value":"/ point.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172397,"byte_end":172407,"line_start":275,"line_end":275,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172409,"byte_end":172412,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172414,"byte_end":172488,"line_start":277,"line_end":277,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogenous ranges are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172490,"byte_end":172564,"line_start":278,"line_end":278,"column_start":2,"column_end":76}},{"value":"/ not supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172566,"byte_end":172637,"line_start":279,"line_end":279,"column_start":2,"column_end":73}},{"value":"/ [`Range<BitIdx<R>>`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172639,"byte_end":172664,"line_start":280,"line_end":280,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172666,"byte_end":172669,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172671,"byte_end":172687,"line_start":282,"line_end":282,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172689,"byte_end":172692,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172694,"byte_end":172768,"line_start":284,"line_end":284,"column_start":2,"column_end":76}},{"value":"/   index produced by the iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172770,"byte_end":172807,"line_start":285,"line_end":285,"column_start":2,"column_end":39}},{"value":"/ - `upto`: The exclusive high bound of the range. The iterator will halt","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172809,"byte_end":172884,"line_start":286,"line_end":286,"column_start":2,"column_end":77}},{"value":"/   before yielding an index of this value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172886,"byte_end":172931,"line_start":287,"line_end":287,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172933,"byte_end":172936,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172938,"byte_end":172951,"line_start":289,"line_end":289,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172953,"byte_end":172956,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from .. upto`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":172958,"byte_end":173028,"line_start":291,"line_end":291,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173030,"byte_end":173033,"line_start":292,"line_end":292,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173035,"byte_end":173053,"line_start":293,"line_end":293,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173055,"byte_end":173058,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ `from` must be no greater than `upto`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173060,"byte_end":173102,"line_start":295,"line_end":295,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173104,"byte_end":173107,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173109,"byte_end":173152,"line_start":297,"line_end":297,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitIdx<R>>`]: core::ops::Range","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173154,"byte_end":173196,"line_start":298,"line_end":298,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173198,"byte_end":173207,"line_start":299,"line_end":299,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173607,"byte_end":173616,"line_start":314,"line_end":314,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitIdx<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible index values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible index values.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173543,"byte_end":173587,"line_start":312,"line_end":312,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173589,"byte_end":173598,"line_start":313,"line_end":313,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174628,"byte_end":174634,"line_start":342,"line_end":342,"column_start":9,"column_end":15},"name":"offset","qualname":"<BitIdx<R>>::offset","value":"pub fn offset(Self, isize) -> (isize, Self)","parent":null,"children":[],"decl_id":null,"docs":" Computes the jump distance for some number of bits away from a starting\n index.","sig":null,"attributes":[{"value":"/ Computes the jump distance for some number of bits away from a starting","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173752,"byte_end":173827,"line_start":321,"line_end":321,"column_start":2,"column_end":77}},{"value":"/ index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173829,"byte_end":173839,"line_start":322,"line_end":322,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173841,"byte_end":173844,"line_start":323,"line_end":323,"column_start":2,"column_end":5}},{"value":"/ This computes the number of elements by which to adjust a base pointer,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173846,"byte_end":173921,"line_start":324,"line_end":324,"column_start":2,"column_end":77}},{"value":"/ and then the bit index of the destination bit in the new referent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173923,"byte_end":173992,"line_start":325,"line_end":325,"column_start":2,"column_end":71}},{"value":"/ register element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":173994,"byte_end":174015,"line_start":326,"line_end":326,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174017,"byte_end":174020,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174022,"byte_end":174038,"line_start":328,"line_end":328,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174040,"byte_end":174043,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ - `self`: An index within some element, from which the offset is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174045,"byte_end":174113,"line_start":330,"line_end":330,"column_start":2,"column_end":70}},{"value":"/   computed.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174115,"byte_end":174130,"line_start":331,"line_end":331,"column_start":2,"column_end":17}},{"value":"/ - `by`: The distance by which to jump. Negative values move lower in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174132,"byte_end":174208,"line_start":332,"line_end":332,"column_start":2,"column_end":78}},{"value":"/   index and element-pointer space; positive values move higher.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174210,"byte_end":174277,"line_start":333,"line_end":333,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174279,"byte_end":174282,"line_start":334,"line_end":334,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174284,"byte_end":174297,"line_start":335,"line_end":335,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174299,"byte_end":174302,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements `R` by which to adjust a base pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174304,"byte_end":174377,"line_start":337,"line_end":337,"column_start":2,"column_end":75}},{"value":"/   This value can be passed directly into [`ptr::offset`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174379,"byte_end":174440,"line_start":338,"line_end":338,"column_start":2,"column_end":63}},{"value":"/ - `.1`: The index of the destination bit within the destination element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174442,"byte_end":174518,"line_start":339,"line_end":339,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174520,"byte_end":174523,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ [`ptr::offset`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":174525,"byte_end":174619,"line_start":341,"line_end":341,"column_start":2,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177495,"byte_end":177499,"line_start":417,"line_end":417,"column_start":9,"column_end":13},"name":"span","qualname":"<BitIdx<R>>::span","value":"pub fn span(Self, usize) -> (usize, BitEnd<R>)","parent":null,"children":[],"decl_id":null,"docs":" Computes the span information for a region beginning at `self` for `len`\n bits.","sig":null,"attributes":[{"value":"/ Computes the span information for a region beginning at `self` for `len`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176657,"byte_end":176733,"line_start":394,"line_end":394,"column_start":2,"column_end":78}},{"value":"/ bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176735,"byte_end":176744,"line_start":395,"line_end":395,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176746,"byte_end":176749,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ The span information is the number of elements in the region that hold","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176751,"byte_end":176825,"line_start":397,"line_end":397,"column_start":2,"column_end":76}},{"value":"/ live bits, and the position of the tail marker after the live bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176827,"byte_end":176898,"line_start":398,"line_end":398,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176900,"byte_end":176903,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`BitEnd::span`], as the computation is identical for","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176905,"byte_end":176979,"line_start":400,"line_end":400,"column_start":2,"column_end":76}},{"value":"/ the two types. Beginning a span at any `Idx` is equivalent to beginning","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":176981,"byte_end":177056,"line_start":401,"line_end":401,"column_start":2,"column_end":77}},{"value":"/ it at the tail of a previous span.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177058,"byte_end":177096,"line_start":402,"line_end":402,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177098,"byte_end":177101,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177103,"byte_end":177119,"line_start":404,"line_end":404,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177121,"byte_end":177124,"line_start":405,"line_end":405,"column_start":2,"column_end":5}},{"value":"/ - `self`: The start bit of the span.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177126,"byte_end":177166,"line_start":406,"line_end":406,"column_start":2,"column_end":42}},{"value":"/ - `len`: The number of bits in the span.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177168,"byte_end":177212,"line_start":407,"line_end":407,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177214,"byte_end":177217,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177219,"byte_end":177232,"line_start":409,"line_end":409,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177234,"byte_end":177237,"line_start":410,"line_end":410,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements, starting in the element that contains","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177239,"byte_end":177312,"line_start":411,"line_end":411,"column_start":2,"column_end":75}},{"value":"/   `self`, that contain live bits of the span.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177314,"byte_end":177363,"line_start":412,"line_end":412,"column_start":2,"column_end":51}},{"value":"/ - `.1`: The tail counter of the span’s end point.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177365,"byte_end":177420,"line_start":413,"line_end":413,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177422,"byte_end":177425,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ [`BitEnd::span`]: crate::index::BitEnd::span","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177427,"byte_end":177475,"line_start":415,"line_end":415,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177477,"byte_end":177486,"line_start":416,"line_end":416,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":5233},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178601,"byte_end":178612,"line_start":467,"line_end":467,"column_start":12,"column_end":23},"name":"BitIdxError","qualname":"::index::BitIdxError","value":"BitIdxError {  }","parent":null,"children":[{"krate":0,"index":5235},{"krate":0,"index":5236}],"decl_id":null,"docs":" Marks an index that is invalid for a register type.\n","sig":null,"attributes":[{"value":"/ Marks an index that is invalid for a register type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178443,"byte_end":178498,"line_start":464,"line_end":464,"column_start":1,"column_end":56}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178499,"byte_end":178519,"line_start":465,"line_end":465,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179583,"byte_end":179593,"line_start":511,"line_end":511,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitIdxError<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the error wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the error wrapper, leaving the internal counter.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179461,"byte_end":179521,"line_start":509,"line_end":509,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179558,"byte_end":179572,"line_start":510,"line_end":510,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":5266},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181656,"byte_end":181662,"line_start":583,"line_end":583,"column_start":12,"column_end":18},"name":"BitEnd","qualname":"::index::BitEnd","value":"BitEnd {  }","parent":null,"children":[{"krate":0,"index":5268},{"krate":0,"index":5269}],"decl_id":null,"docs":" A semantic index counter within *or one bit past the end of* a register\nelement `R`.","sig":null,"attributes":[{"value":"* A semantic index counter within *or one bit past the end of* a register\nelement `R`.\n\nThis type is a counter in the ring `0 ..= R::BITS`, and serves to mark a\nsemantic index of a dead bit *after* a live region. As such, following in the\nC++ and LLVM memory model of first-live/first-dead region descriptiors, it marks\nan endpoint outside some bit-region, and may be used to compute the startpoint\nof a bit-region immediately succeeding, but not overlapping, the source.\n\nAs a dead-bit index, this *cannot* be used for indexing into a register. It is\nused only in abstract region computation.\n\nThis type is necessary in order to preserve the distinction between a dead\nmemory address that is *not* part of a buffer and a live memory address that is\nwithin a region. [`BitIdx`] is insufficient to this task, and causes buffer\nmanagement errors when used in its stead.\n\n# Type Parameters\n\n- `R`: The register element that this end index governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 ..= R::BITS`. Any\nvalue greater than [`R::BITS`] makes the program invalid, and will likely cause\neither a crash or incorrect memory access.\n\n# Construction\n\nThis type can only be publicly constructed through [`BitIdx::span`].\n\n[`BitIdx`]: crate::index::BitIdx\n[`R::BITS`]: funty::IsNumber::BITS\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180235,"byte_end":181553,"line_start":547,"line_end":580,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181554,"byte_end":181574,"line_start":581,"line_end":581,"column_start":1,"column_end":21}}]},{"kind":"Type","id":{"krate":0,"index":969},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181935,"byte_end":181942,"line_start":595,"line_end":595,"column_start":10,"column_end":17},"name":"BitTail","qualname":"::index::BitTail","value":"BitEnd<R>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.23.0\", note = \"Renamed to `BitEnd`\")","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181864,"byte_end":181925,"line_start":594,"line_end":594,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":973},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182067,"byte_end":182071,"line_start":601,"line_end":601,"column_start":12,"column_end":16},"name":"LAST","qualname":"::index::BitEnd::<R>::LAST","value":"Self","parent":{"krate":0,"index":971},"children":[],"decl_id":null,"docs":" The inclusive maximum tail within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum tail within an element `R`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182002,"byte_end":182055,"line_start":600,"line_end":600,"column_start":2,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":974},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182199,"byte_end":182203,"line_start":606,"line_end":606,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitEnd::<R>::ZERO","value":"Self","parent":{"krate":0,"index":971},"children":[],"decl_id":null,"docs":" The inclusive minimum tail within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum tail within an element `R`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182134,"byte_end":182187,"line_start":605,"line_end":605,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182709,"byte_end":182712,"line_start":626,"line_end":626,"column_start":9,"column_end":12},"name":"new","qualname":"<BitEnd<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good tail of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good tail of an `R` register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182255,"byte_end":182321,"line_start":611,"line_end":611,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182323,"byte_end":182326,"line_start":612,"line_end":612,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182328,"byte_end":182344,"line_start":613,"line_end":613,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182346,"byte_end":182349,"line_start":614,"line_end":614,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a tail. This must be not less","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182351,"byte_end":182424,"line_start":615,"line_end":615,"column_start":2,"column_end":75}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182426,"byte_end":182485,"line_start":616,"line_end":616,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182487,"byte_end":182490,"line_start":617,"line_end":617,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182492,"byte_end":182505,"line_start":618,"line_end":618,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182507,"byte_end":182510,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(value)` when it is in the valid range `0 .. R::BITS`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182512,"byte_end":182588,"line_start":620,"line_end":620,"column_start":2,"column_end":78}},{"value":"/ and `None` when it is not.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182590,"byte_end":182620,"line_start":621,"line_end":621,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182622,"byte_end":182625,"line_start":622,"line_end":622,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182627,"byte_end":182657,"line_start":623,"line_end":623,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182659,"byte_end":182689,"line_start":624,"line_end":624,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":182691,"byte_end":182700,"line_start":625,"line_end":625,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183761,"byte_end":183771,"line_start":668,"line_end":668,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitEnd<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the tail wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the tail wrapper, leaving the internal counter.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183640,"byte_end":183699,"line_start":666,"line_end":666,"column_start":2,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183736,"byte_end":183750,"line_start":667,"line_end":667,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184504,"byte_end":184514,"line_start":692,"line_end":692,"column_start":9,"column_end":19},"name":"range_from","qualname":"<BitEnd<R>>::range_from","value":"pub fn range_from(BitIdx<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all tail indices at and after an inclusive starting point.","sig":null,"attributes":[{"value":"/ Iterates over all tail indices at and after an inclusive starting point.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183802,"byte_end":183878,"line_start":672,"line_end":672,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183880,"byte_end":183883,"line_start":673,"line_end":673,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183885,"byte_end":183959,"line_start":674,"line_end":674,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogenous ranges are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":183961,"byte_end":184035,"line_start":675,"line_end":675,"column_start":2,"column_end":76}},{"value":"/ not yet supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184037,"byte_end":184112,"line_start":676,"line_end":676,"column_start":2,"column_end":77}},{"value":"/ [`Range<BitEnd<R>>`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184114,"byte_end":184139,"line_start":677,"line_end":677,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184141,"byte_end":184144,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184146,"byte_end":184162,"line_start":679,"line_end":679,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184164,"byte_end":184167,"line_start":680,"line_end":680,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184169,"byte_end":184243,"line_start":681,"line_end":681,"column_start":2,"column_end":76}},{"value":"/   tail produced by the iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184245,"byte_end":184281,"line_start":682,"line_end":682,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184283,"byte_end":184286,"line_start":683,"line_end":683,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184288,"byte_end":184301,"line_start":684,"line_end":684,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184303,"byte_end":184306,"line_start":685,"line_end":685,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from ..=","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184308,"byte_end":184372,"line_start":686,"line_end":686,"column_start":2,"column_end":66}},{"value":"/ Self::LAST`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184374,"byte_end":184390,"line_start":687,"line_end":687,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184392,"byte_end":184395,"line_start":688,"line_end":688,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184397,"byte_end":184440,"line_start":689,"line_end":689,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitEnd<R>>`]: core::ops::Range","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184442,"byte_end":184484,"line_start":690,"line_end":690,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184486,"byte_end":184495,"line_start":691,"line_end":691,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185744,"byte_end":185748,"line_start":729,"line_end":729,"column_start":9,"column_end":13},"name":"span","qualname":"<BitEnd<R>>::span","value":"pub fn span(Self, usize) -> (usize, Self)","parent":null,"children":[],"decl_id":null,"docs":" Computes the span information for a region beginning immediately after a\n preceding region.","sig":null,"attributes":[{"value":"/ Computes the span information for a region beginning immediately after a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184723,"byte_end":184799,"line_start":702,"line_end":702,"column_start":2,"column_end":78}},{"value":"/ preceding region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184801,"byte_end":184822,"line_start":703,"line_end":703,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184824,"byte_end":184827,"line_start":704,"line_end":704,"column_start":2,"column_end":5}},{"value":"/ The computed region of `len` bits has its start at the *live* bit that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184829,"byte_end":184903,"line_start":705,"line_end":705,"column_start":2,"column_end":76}},{"value":"/ corresponds to the `self` dead tail. The return value is the number of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184905,"byte_end":184979,"line_start":706,"line_end":706,"column_start":2,"column_end":76}},{"value":"/ memory elements containing live bits of the computed span and its tail","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":184981,"byte_end":185055,"line_start":707,"line_end":707,"column_start":2,"column_end":76}},{"value":"/ marker.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185057,"byte_end":185068,"line_start":708,"line_end":708,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185070,"byte_end":185073,"line_start":709,"line_end":709,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185075,"byte_end":185091,"line_start":710,"line_end":710,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185093,"byte_end":185096,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ - `self`: A dead bit immediately after some region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185098,"byte_end":185153,"line_start":712,"line_end":712,"column_start":2,"column_end":57}},{"value":"/ - `len`: The number of live bits in the span starting after `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185155,"byte_end":185226,"line_start":713,"line_end":713,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185228,"byte_end":185231,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185233,"byte_end":185246,"line_start":715,"line_end":715,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185248,"byte_end":185251,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements `R` that contain live bits in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185253,"byte_end":185321,"line_start":717,"line_end":717,"column_start":2,"column_end":70}},{"value":"/   computed region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185323,"byte_end":185345,"line_start":718,"line_end":718,"column_start":2,"column_end":24}},{"value":"/ - `.1`: The tail counter of the first dead bit after the new span.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185347,"byte_end":185417,"line_start":719,"line_end":719,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185419,"byte_end":185422,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185424,"byte_end":185438,"line_start":721,"line_end":721,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185440,"byte_end":185443,"line_start":722,"line_end":722,"column_start":2,"column_end":5}},{"value":"/ If `len` is `0`, this returns `(0, self)`, as the span has no live bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185445,"byte_end":185521,"line_start":723,"line_end":723,"column_start":2,"column_end":78}},{"value":"/ If `self` is [`BitEnd::LAST`], then the new region starts at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185523,"byte_end":185587,"line_start":724,"line_end":724,"column_start":2,"column_end":66}},{"value":"/ [`BitIdx::ZERO`] in the next element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185589,"byte_end":185630,"line_start":725,"line_end":725,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185632,"byte_end":185635,"line_start":726,"line_end":726,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx::ZERO`]: crate::index::BitIdx::ZERO","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185637,"byte_end":185685,"line_start":727,"line_end":727,"column_start":2,"column_end":50}},{"value":"/ [`BitEnd::LAST`]: crate::index::BitEnd::LAST","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":185687,"byte_end":185735,"line_start":728,"line_end":728,"column_start":2,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5299},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188156,"byte_end":188162,"line_start":817,"line_end":817,"column_start":12,"column_end":18},"name":"BitPos","qualname":"::index::BitPos","value":"BitPos {  }","parent":null,"children":[{"krate":0,"index":5301},{"krate":0,"index":5302}],"decl_id":null,"docs":" An electrical position counter within a register element `R`.","sig":null,"attributes":[{"value":"* An electrical position counter within a register element `R`.\n\nThis type is a counter in the ring `0 .. R::BITS`, and serves to mark an\nelectrical address of a real bit. It is the shift distance in the expression\n`1 << n`. It is only produced by applying a [`BitOrder::at`] transformation to\nsome [`BitIdx`] produced by this library.\n\n# Type Parameters\n\n- `R`: The register element that this position governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 .. R::BITS`. Any\nvalue not less than [`R::BITS`] makes the program invalid, and will likely cause\na crash. In addition, [`BitOrder::at`] has a list of requirements that its\nimplementations must uphold in order to make construction of this type\nsemantically correct in a program.\n\n# Construction\n\nThis type is publicly constructible. [`bitvec`] will only request its creation\nby calling [`BitOrder::at`], and has no sites that can publicly accept untrusted\nvalues.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder::at`]: crate::order::BitOrder::at\n[`R::BITS`]: funty::IsNumber::BITS\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":186935,"byte_end":188002,"line_start":785,"line_end":813,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188054,"byte_end":188074,"line_start":815,"line_end":815,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188752,"byte_end":188755,"line_start":842,"line_end":842,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPos<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good position within an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good position within an `R` register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188389,"byte_end":188463,"line_start":830,"line_end":830,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188465,"byte_end":188468,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188470,"byte_end":188486,"line_start":832,"line_end":832,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188488,"byte_end":188491,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a position. This must be in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188493,"byte_end":188568,"line_start":834,"line_end":834,"column_start":2,"column_end":77}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188570,"byte_end":188597,"line_start":835,"line_end":835,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188599,"byte_end":188602,"line_start":836,"line_end":836,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188604,"byte_end":188617,"line_start":837,"line_end":837,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188619,"byte_end":188622,"line_start":838,"line_end":838,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(value)` when it is in the valid range `0 .. R::BITS`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188624,"byte_end":188700,"line_start":839,"line_end":839,"column_start":2,"column_end":78}},{"value":"/ and `None` when it is not.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188702,"byte_end":188732,"line_start":840,"line_end":840,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188734,"byte_end":188743,"line_start":841,"line_end":841,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189390,"byte_end":189403,"line_start":867,"line_end":867,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitPos<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good position within an `R`\n register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good position within an `R`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188886,"byte_end":188953,"line_start":849,"line_end":849,"column_start":2,"column_end":69}},{"value":"/ register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188955,"byte_end":188968,"line_start":850,"line_end":850,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188970,"byte_end":188973,"line_start":851,"line_end":851,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188975,"byte_end":188991,"line_start":852,"line_end":852,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188993,"byte_end":188996,"line_start":853,"line_end":853,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a position. This must be in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188998,"byte_end":189073,"line_start":854,"line_end":854,"column_start":2,"column_end":77}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189075,"byte_end":189102,"line_start":855,"line_end":855,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189104,"byte_end":189107,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189109,"byte_end":189122,"line_start":857,"line_end":857,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189124,"byte_end":189127,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as a valid position.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189129,"byte_end":189182,"line_start":859,"line_end":859,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189184,"byte_end":189187,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189189,"byte_end":189201,"line_start":861,"line_end":861,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189203,"byte_end":189206,"line_start":862,"line_end":862,"column_start":2,"column_end":5}},{"value":"/ If the `value` is outside the valid range, then the program is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189208,"byte_end":189274,"line_start":863,"line_end":863,"column_start":2,"column_end":68}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189276,"byte_end":189349,"line_start":864,"line_end":864,"column_start":2,"column_end":75}},{"value":"/ `value`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189351,"byte_end":189363,"line_start":865,"line_end":865,"column_start":2,"column_end":14}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189365,"byte_end":189374,"line_start":866,"line_end":866,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189724,"byte_end":189734,"line_start":882,"line_end":882,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitPos<R>>::into_inner","value":"pub fn into_inner(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the position wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the position wrapper, leaving the internal counter.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189599,"byte_end":189662,"line_start":880,"line_end":880,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189699,"byte_end":189713,"line_start":881,"line_end":881,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189889,"byte_end":189895,"line_start":890,"line_end":890,"column_start":9,"column_end":15},"name":"select","qualname":"<BitPos<R>>::select","value":"pub fn select(Self) -> BitSel<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self`.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189765,"byte_end":189819,"line_start":886,"line_end":886,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189821,"byte_end":189824,"line_start":887,"line_end":887,"column_start":2,"column_end":5}},{"value":"/ This is always `1 << self.pos`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189826,"byte_end":189861,"line_start":888,"line_end":888,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189863,"byte_end":189880,"line_start":889,"line_end":889,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190194,"byte_end":190198,"line_start":900,"line_end":900,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitPos<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":189977,"byte_end":190038,"line_start":894,"line_end":894,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190040,"byte_end":190043,"line_start":895,"line_end":895,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190045,"byte_end":190091,"line_start":896,"line_end":896,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190093,"byte_end":190096,"line_start":897,"line_end":897,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190098,"byte_end":190132,"line_start":898,"line_end":898,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190169,"byte_end":190183,"line_start":899,"line_end":899,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":5332},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192223,"byte_end":192229,"line_start":978,"line_end":978,"column_start":12,"column_end":18},"name":"BitSel","qualname":"::index::BitSel","value":"BitSel {  }","parent":null,"children":[{"krate":0,"index":5334}],"decl_id":null,"docs":" A one-hot selection mask for a register element `R`.","sig":null,"attributes":[{"value":"* A one-hot selection mask for a register element `R`.\n\nThis type selects exactly one bit in a register. It is used to apply test and\nwrite operations into memory.\n\n# Type Parameters\n\n- `R`: The register element this selector governs.\n\n# Validity\n\nValues of this type are required to have exactly one bit set high, and all\nothers set low.\n\n# Construction\n\nThis type is only constructed from the [`BitPos::select`] and\n[`BitOrder::select`] functions. It is always equivalent to\n`1 << BitPos::unwrap`.\n\nThe chain of custody, from known-good [`BitIdx`] values, through proven-good\n[`BitOrder`] implementations, into [`BitPos`] and then `BitSel`, proves that\nvalues of this type are always correct to apply to underlying memory.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitOrder::select`]: crate::order::BitOrder::select\n[`BitPos`]: crate::index::BitPos\n[`BitPos::select`]: crate::index::BitPos::select\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":191133,"byte_end":192069,"line_start":945,"line_end":974,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192121,"byte_end":192141,"line_start":976,"line_end":976,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192850,"byte_end":192853,"line_start":1003,"line_end":1003,"column_start":9,"column_end":12},"name":"new","qualname":"<BitSel<R>>::new","value":"pub fn new(R) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good selection of an `R` register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192342,"byte_end":192413,"line_start":988,"line_end":988,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192415,"byte_end":192418,"line_start":989,"line_end":989,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192420,"byte_end":192436,"line_start":990,"line_end":990,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192438,"byte_end":192441,"line_start":991,"line_end":991,"column_start":2,"column_end":5}},{"value":"/ - `value`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192443,"byte_end":192511,"line_start":992,"line_end":992,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192513,"byte_end":192516,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192518,"byte_end":192531,"line_start":994,"line_end":994,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192533,"byte_end":192536,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ If `value` is a power of two (exactly one bit set high and all others","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192538,"byte_end":192611,"line_start":996,"line_end":996,"column_start":2,"column_end":75}},{"value":"/ set low), it returns `Some` of a `BitSel` wrapping the `value`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192613,"byte_end":192680,"line_start":997,"line_end":997,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192682,"byte_end":192685,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::at`]: crate:order::BitOrder::at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192687,"byte_end":192734,"line_start":999,"line_end":999,"column_start":2,"column_end":49}},{"value":"/ [`BitOrder::select`]: crate::order::BitOrder::select","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192736,"byte_end":192792,"line_start":1000,"line_end":1000,"column_start":2,"column_end":58}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192794,"byte_end":192830,"line_start":1001,"line_end":1001,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192832,"byte_end":192841,"line_start":1002,"line_end":1002,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193633,"byte_end":193646,"line_start":1031,"line_end":1031,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitSel<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good selection of an `R` register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192984,"byte_end":193058,"line_start":1010,"line_end":1010,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193060,"byte_end":193063,"line_start":1011,"line_end":1011,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193065,"byte_end":193081,"line_start":1012,"line_end":1012,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193083,"byte_end":193086,"line_start":1013,"line_end":1013,"column_start":2,"column_end":5}},{"value":"/ - `value`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193088,"byte_end":193156,"line_start":1014,"line_end":1014,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193158,"byte_end":193161,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193163,"byte_end":193176,"line_start":1016,"line_end":1016,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193178,"byte_end":193181,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ `value` wrapped in a `BitSel`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193183,"byte_end":193217,"line_start":1018,"line_end":1018,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193219,"byte_end":193222,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193224,"byte_end":193236,"line_start":1020,"line_end":1020,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193238,"byte_end":193241,"line_start":1021,"line_end":1021,"column_start":2,"column_end":5}},{"value":"/ `value` **must** be a power of two: one bit set high and all others set","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193243,"byte_end":193318,"line_start":1022,"line_end":1022,"column_start":2,"column_end":77}},{"value":"/ low. In debug builds, invalid `value`s cause a panic; release builds do","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193320,"byte_end":193395,"line_start":1023,"line_end":1023,"column_start":2,"column_end":77}},{"value":"/ not check the input.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193397,"byte_end":193421,"line_start":1024,"line_end":1024,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193423,"byte_end":193426,"line_start":1025,"line_end":1025,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a [`BitOrder::select`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193428,"byte_end":193491,"line_start":1026,"line_end":1026,"column_start":2,"column_end":65}},{"value":"/ implementation that is verified to be correct.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193493,"byte_end":193543,"line_start":1027,"line_end":1027,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193545,"byte_end":193548,"line_start":1028,"line_end":1028,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::select`]: crate::order::BitOrder::select","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193550,"byte_end":193606,"line_start":1029,"line_end":1029,"column_start":2,"column_end":58}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193608,"byte_end":193617,"line_start":1030,"line_end":1030,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193968,"byte_end":193978,"line_start":1043,"line_end":1043,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitSel<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the selector wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the selector wrapper, leaving the internal counter.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193843,"byte_end":193906,"line_start":1041,"line_end":1041,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":193943,"byte_end":193957,"line_start":1042,"line_end":1042,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194124,"byte_end":194128,"line_start":1050,"line_end":1050,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitSel<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes a bit-mask for `self`. This is a type-cast.\n","sig":null,"attributes":[{"value":"/ Computes a bit-mask for `self`. This is a type-cast.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194008,"byte_end":194064,"line_start":1047,"line_end":1047,"column_start":2,"column_end":58}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194066,"byte_end":194083,"line_start":1048,"line_end":1048,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194085,"byte_end":194115,"line_start":1049,"line_end":1049,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194248,"byte_end":194257,"line_start":1056,"line_end":1056,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitSel<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible selector values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible selector values.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194181,"byte_end":194228,"line_start":1054,"line_end":1054,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194230,"byte_end":194239,"line_start":1055,"line_end":1055,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":5364},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195698,"byte_end":195705,"line_start":1115,"line_end":1115,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::index::BitMask","value":"BitMask {  }","parent":null,"children":[{"krate":0,"index":5366}],"decl_id":null,"docs":" A multi-bit selection mask for a register `R`.","sig":null,"attributes":[{"value":"* A multi-bit selection mask for a register `R`.\n\nUnlike [`BitSel`], which enforces a strict one-hot mask encoding, this mask type\npermits any number of bits to be set or unset. This is used to accumulate\nselections for a batched operation on a register.\n\n# Type Parameters\n\n- `R`: The register element that this masks.\n\n# Construction\n\nThis can only be constructed by combining [`BitSel`] selection mask produced\nthrough the [`BitIdx`] and [`BitOrder`] chain of custody.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitSel`]: crate::index::BitSel\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195014,"byte_end":195595,"line_start":1094,"line_end":1112,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195596,"byte_end":195616,"line_start":1113,"line_end":1113,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":1029},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195861,"byte_end":195864,"line_start":1126,"line_end":1126,"column_start":12,"column_end":15},"name":"ALL","qualname":"::index::BitMask::<R>::ALL","value":"Self","parent":{"krate":0,"index":1027},"children":[],"decl_id":null,"docs":" A full mask.\n","sig":null,"attributes":[{"value":"/ A full mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195833,"byte_end":195849,"line_start":1125,"line_end":1125,"column_start":2,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":1030},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195927,"byte_end":195931,"line_start":1128,"line_end":1128,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitMask::<R>::ZERO","value":"Self","parent":{"krate":0,"index":1027},"children":[],"decl_id":null,"docs":" An empty mask.\n","sig":null,"attributes":[{"value":"/ An empty mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195897,"byte_end":195915,"line_start":1127,"line_end":1127,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196723,"byte_end":196726,"line_start":1154,"line_end":1154,"column_start":9,"column_end":12},"name":"new","qualname":"<BitMask<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps any `R` value as a bit-mask.","sig":null,"attributes":[{"value":"/ Wraps any `R` value as a bit-mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195966,"byte_end":196004,"line_start":1130,"line_end":1130,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196006,"byte_end":196009,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ This constructor is provided to explicitly declare that an operation is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196011,"byte_end":196086,"line_start":1132,"line_end":1132,"column_start":2,"column_end":77}},{"value":"/ discarding the numeric value of an integer and instead using it only as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196088,"byte_end":196163,"line_start":1133,"line_end":1133,"column_start":2,"column_end":77}},{"value":"/ a bit-mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196165,"byte_end":196180,"line_start":1134,"line_end":1134,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196182,"byte_end":196185,"line_start":1135,"line_end":1135,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196187,"byte_end":196203,"line_start":1136,"line_end":1136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196205,"byte_end":196208,"line_start":1137,"line_end":1137,"column_start":2,"column_end":5}},{"value":"/ - `value`: Some integer to use as a bit-mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196210,"byte_end":196259,"line_start":1138,"line_end":1138,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196261,"byte_end":196264,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196266,"byte_end":196279,"line_start":1140,"line_end":1140,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196281,"byte_end":196284,"line_start":1141,"line_end":1141,"column_start":2,"column_end":5}},{"value":"/ The `value` wrapped as a bit-mask, with its numeric context discarded.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196286,"byte_end":196360,"line_start":1142,"line_end":1142,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196362,"byte_end":196365,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ Prefer accumulating [`BitSel`] values using the `Sum` implementation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196367,"byte_end":196440,"line_start":1144,"line_end":1144,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196442,"byte_end":196445,"line_start":1145,"line_end":1145,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196447,"byte_end":196459,"line_start":1146,"line_end":1146,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196461,"byte_end":196464,"line_start":1147,"line_end":1147,"column_start":2,"column_end":5}},{"value":"/ The `value` must be computed from a set of valid bit positions in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196466,"byte_end":196539,"line_start":1148,"line_end":1148,"column_start":2,"column_end":75}},{"value":"/ caller’s context.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196541,"byte_end":196564,"line_start":1149,"line_end":1149,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196566,"byte_end":196569,"line_start":1150,"line_end":1150,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::mask`]: crate::order::BitOrder::mask","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196571,"byte_end":196623,"line_start":1151,"line_end":1151,"column_start":2,"column_end":54}},{"value":"/ [`BitSel`]: crate::index::BitSel","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196625,"byte_end":196661,"line_start":1152,"line_end":1152,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196698,"byte_end":196712,"line_start":1153,"line_end":1153,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196894,"byte_end":196904,"line_start":1160,"line_end":1160,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BitMask<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the mask wrapper, leaving the internal value.\n","sig":null,"attributes":[{"value":"/ Removes the mask wrapper, leaving the internal value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196775,"byte_end":196832,"line_start":1158,"line_end":1158,"column_start":2,"column_end":59}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196869,"byte_end":196883,"line_start":1159,"line_end":1159,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1033},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197223,"byte_end":197227,"line_start":1175,"line_end":1175,"column_start":9,"column_end":13},"name":"test","qualname":"<BitMask<R>>::test","value":"pub fn test(&Self, BitSel<R>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the mask contains a given selector bit.","sig":null,"attributes":[{"value":"/ Tests whether the mask contains a given selector bit.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196935,"byte_end":196992,"line_start":1164,"line_end":1164,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196994,"byte_end":196997,"line_start":1165,"line_end":1165,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":196999,"byte_end":197015,"line_start":1166,"line_end":1166,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197017,"byte_end":197020,"line_start":1167,"line_end":1167,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197022,"byte_end":197035,"line_start":1168,"line_end":1168,"column_start":2,"column_end":15}},{"value":"/ - `sel`: Some single selection bit to test in `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197037,"byte_end":197094,"line_start":1169,"line_end":1169,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197096,"byte_end":197099,"line_start":1170,"line_end":1170,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197101,"byte_end":197114,"line_start":1171,"line_end":1171,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197116,"byte_end":197119,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ Whether `self` is set high at `sel`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197121,"byte_end":197161,"line_start":1173,"line_end":1173,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197198,"byte_end":197212,"line_start":1174,"line_end":1174,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197574,"byte_end":197580,"line_start":1190,"line_end":1190,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitMask<R>>::insert","value":"pub fn insert(&mut Self, BitSel<R>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a selector bit into an existing mask.","sig":null,"attributes":[{"value":"/ Inserts a selector bit into an existing mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197299,"byte_end":197348,"line_start":1179,"line_end":1179,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197350,"byte_end":197353,"line_start":1180,"line_end":1180,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197355,"byte_end":197371,"line_start":1181,"line_end":1181,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197373,"byte_end":197376,"line_start":1182,"line_end":1182,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197378,"byte_end":197395,"line_start":1183,"line_end":1183,"column_start":2,"column_end":19}},{"value":"/ - `sel`: A selector bit to set in `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197397,"byte_end":197442,"line_start":1184,"line_end":1184,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197444,"byte_end":197447,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197449,"byte_end":197462,"line_start":1186,"line_end":1186,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197464,"byte_end":197467,"line_start":1187,"line_end":1187,"column_start":2,"column_end":5}},{"value":"/ The bit at `sel` is set high in `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197469,"byte_end":197512,"line_start":1188,"line_end":1188,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197549,"byte_end":197563,"line_start":1189,"line_end":1189,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197911,"byte_end":197918,"line_start":1205,"line_end":1205,"column_start":9,"column_end":16},"name":"combine","qualname":"<BitMask<R>>::combine","value":"pub fn combine(Self, BitSel<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mask with a selector bit activated.","sig":null,"attributes":[{"value":"/ Creates a new mask with a selector bit activated.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197639,"byte_end":197692,"line_start":1194,"line_end":1194,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197694,"byte_end":197697,"line_start":1195,"line_end":1195,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197699,"byte_end":197715,"line_start":1196,"line_end":1196,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197717,"byte_end":197720,"line_start":1197,"line_end":1197,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197722,"byte_end":197734,"line_start":1198,"line_end":1198,"column_start":2,"column_end":14}},{"value":"/ - `sel`: A selector bit to set in `self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197736,"byte_end":197780,"line_start":1199,"line_end":1199,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197782,"byte_end":197785,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197787,"byte_end":197800,"line_start":1201,"line_end":1201,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197802,"byte_end":197805,"line_start":1202,"line_end":1202,"column_start":2,"column_end":5}},{"value":"/ A copy of `self`, with `sel` set high.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197807,"byte_end":197849,"line_start":1203,"line_end":1203,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":197886,"byte_end":197900,"line_start":1204,"line_end":1204,"column_start":37,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":1061},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1065},{"krate":0,"index":1068},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":5396},{"krate":0,"index":5397},{"krate":0,"index":5398},{"krate":0,"index":5399},{"krate":0,"index":5400},{"krate":0,"index":5401},{"krate":0,"index":5402},{"krate":0,"index":5403},{"krate":0,"index":5404},{"krate":0,"index":5405},{"krate":0,"index":5406},{"krate":0,"index":5407},{"krate":0,"index":1078},{"krate":0,"index":5408},{"krate":0,"index":5411},{"krate":0,"index":5414},{"krate":0,"index":1079},{"krate":0,"index":5417},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1089}],"decl_id":null,"docs":" Memory element descriptions.","sig":null,"attributes":[{"value":"* Memory element descriptions.\n\nThis module describes memory integers and processor registers used to hold and\nmanipulate [`bitvec`] data buffers.\n\nThe [`BitMemory`] trait adds descriptive information to the unsigned integers\navailable in the language.\n\nThe [`BitRegister`] trait marks the unsigned integers that correspond to\nprocessor registers, and can therefore be used for buffer control. The integers\nthat are `BitMemory` but not `BitRegister` can be composed out of register\nvalues, but are unable to be used in buffer type parameters.\n\n[`BitMemory`]: crate::mem::BitMemory\n[`BitRegister`]: crate::mem::BitRegister\n[`bitvec`]: crate\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":208976,"byte_end":209621,"line_start":1,"line_end":17,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1071},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210125,"byte_end":210134,"line_start":33,"line_end":33,"column_start":11,"column_end":20},"name":"BitMemory","qualname":"::mem::BitMemory","value":"BitMemory: IsUnsigned + seal::Sealed","parent":null,"children":[{"krate":0,"index":1072},{"krate":0,"index":1073}],"decl_id":null,"docs":" Description of an integer memory element.","sig":null,"attributes":[{"value":"* Description of an integer memory element.\n\nThis trait provides information used to describe integer-typed regions of memory\nand enables other parts of the project to adequately describe the memory bus.\nThis trait has **no** bearing on the processor instructions or registers used to\ninteract with memory. It solely describes integers that can exist on a system.\n\nThis trait cannot be implemented outside this crate.\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":209691,"byte_end":210114,"line_start":24,"line_end":32,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":1072},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210248,"byte_end":210252,"line_start":35,"line_end":35,"column_start":8,"column_end":12},"name":"INDX","qualname":"::mem::BitMemory::INDX","value":"u8","parent":{"krate":0,"index":1071},"children":[],"decl_id":null,"docs":" The number of bits required to store an index in the range `0 .. BITS`.\n","sig":null,"attributes":[{"value":"/ The number of bits required to store an index in the range `0 .. BITS`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210165,"byte_end":210240,"line_start":34,"line_end":34,"column_start":2,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":1073},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210454,"byte_end":210458,"line_start":39,"line_end":39,"column_start":8,"column_end":12},"name":"MASK","qualname":"::mem::BitMemory::MASK","value":"u8","parent":{"krate":0,"index":1071},"children":[],"decl_id":null,"docs":" A mask over all bits that can be used as an index within the element.\n This is the value with the least significant `INDX`-many bits set high.\n","sig":null,"attributes":[{"value":"/ A mask over all bits that can be used as an index within the element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210296,"byte_end":210369,"line_start":37,"line_end":37,"column_start":2,"column_end":75}},{"value":"/ This is the value with the least significant `INDX`-many bits set high.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210371,"byte_end":210446,"line_start":38,"line_end":38,"column_start":2,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":1074},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210789,"byte_end":210800,"line_start":49,"line_end":49,"column_start":11,"column_end":22},"name":"BitRegister","qualname":"::mem::BitRegister","value":"BitRegister: BitMemory + BitOps","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076}],"decl_id":null,"docs":" Description of a processor register.","sig":null,"attributes":[{"value":"* Description of a processor register.\n\nThis trait provides information used to describe processor registers. It only\nneeds to contain constant values for `1` and `!0`; the rest of its information\nis contained in the presence or absence of its implementation on particular\nintegers.\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210490,"byte_end":210778,"line_start":42,"line_end":48,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":1075},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210852,"byte_end":210855,"line_start":51,"line_end":51,"column_start":8,"column_end":11},"name":"ONE","qualname":"::mem::BitRegister::ONE","value":"Self","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" The literal `1`.\n","sig":null,"attributes":[{"value":"/ The literal `1`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210824,"byte_end":210844,"line_start":50,"line_end":50,"column_start":2,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":1076},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210893,"byte_end":210896,"line_start":53,"line_end":53,"column_start":8,"column_end":11},"name":"ALL","qualname":"::mem::BitRegister::ALL","value":"Self","parent":{"krate":0,"index":1074},"children":[],"decl_id":null,"docs":" The literal `!0`.\n","sig":null,"attributes":[{"value":"/ The literal `!0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210864,"byte_end":210885,"line_start":52,"line_end":52,"column_start":2,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":1082},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":211927,"byte_end":211931,"line_start":103,"line_end":103,"column_start":14,"column_end":18},"name":"elts","qualname":"::mem::elts","value":"pub const fn elts<T>(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the number of elements required to store some number of bits.","sig":null,"attributes":[{"value":"* Computes the number of elements required to store some number of bits.\n\n# Parameters\n\n- `bits`: The number of bits to store in a `[T]` array.\n\n# Returns\n\nThe number of elements `T` required to store `bits`.\n\nAs this is a const function, when `bits` is a constant expression, this can be\nused to compute the size of an array type `[T; elts(bits)]`.\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":211543,"byte_end":211898,"line_start":89,"line_end":101,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1090},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":213207,"byte_end":213213,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::mem::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1091},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"order","qualname":"::order","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1100},{"krate":0,"index":1103},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":5420},{"krate":0,"index":5422},{"krate":0,"index":5424},{"krate":0,"index":5425},{"krate":0,"index":5427},{"krate":0,"index":5429},{"krate":0,"index":5430},{"krate":0,"index":5432},{"krate":0,"index":5435},{"krate":0,"index":5437},{"krate":0,"index":5438},{"krate":0,"index":5440},{"krate":0,"index":1121},{"krate":0,"index":5442},{"krate":0,"index":5444},{"krate":0,"index":5446},{"krate":0,"index":5447},{"krate":0,"index":5449},{"krate":0,"index":5451},{"krate":0,"index":5452},{"krate":0,"index":5454},{"krate":0,"index":5457},{"krate":0,"index":5459},{"krate":0,"index":5460},{"krate":0,"index":5462},{"krate":0,"index":1130},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1144}],"decl_id":null,"docs":" Ordering of bits within register elements.","sig":null,"attributes":[{"value":"* Ordering of bits within register elements.\n\n[`bitvec`] data structures are parametric over any ordering of bits within a\nregister type. The [`BitOrder`] trait translates a cursor position (indicated by\nthe [`BitIdx`] type) to an electrical position (indicated by the [`BitPos`]\ntype) within that register, thereby defining the order of traversal over a\nregister.\n\nImplementors of [`BitOrder`] are required to satisfy a set of requirements on\ntheir transform function, and must have identical behavior to the\ndefault-provided trait functions if they choose to override them for\nperformance. These can all be proven by use of the [`verify`] or\n[`verify_for_type`] functions in the implementor’s test suite.\n\n[`BitOrder`] is a stateless trait, and implementors should be zero-sized types.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitPos`]: crate::index::BitPos\n[`bitvec`]: crate\n[`verify`]: crate::order::verify\n[`verify_for_type`]: crate::order::verify_for_type\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":214098,"byte_end":215099,"line_start":1,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1112},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217458,"byte_end":217466,"line_start":105,"line_end":105,"column_start":18,"column_end":26},"name":"BitOrder","qualname":"::order::BitOrder","value":"BitOrder: 'static","parent":null,"children":[{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1117}],"decl_id":null,"docs":" An ordering over a register.","sig":null,"attributes":[{"value":"* An ordering over a register.\n\n# Usage\n\n[`bitvec`] structures store and operate on semantic index counters, not\nelectrical bit positions. The [`BitOrder::at`] function takes a semantic\nordering, [`BitIdx`], and produces a corresponding electrical position,\n[`BitPos`].\n\n# Safety\n\nIf your implementation violates any of the requirements on these functions, then\nthe program will become incorrect, and have unspecified behavior. The best-case\noutcome is that operations relying on your implementation will crash the\nprogram; the worst-case is that memory access will silently become corrupt.\n\nYou are responsible for adhering to the requirements of these functions. There\nare verification functions that you can use in your test suite; however, it is\nnot yet possible to prove correctness at compile-time.\n\nThis is an `unsafe trait` to implement because you are responsible for upholding\nthe stated requirements.\n\nThe implementations of `BitOrder` are trusted to drive safe code, and once data\nleaves a `BitOrder` implementation, it is considered safe to use as the basis\nfor interaction with memory.\n\n# Verification\n\nThe [`verify`] and [`verify_for_type`] functions are available for your test\nsuites. They ensure that a `BitOrder` implementation satisfies the requirements\nwhen invoked for a given register type.\n\n# Examples\n\nImplementations are not required to remain contiguous over a register. This\nexample swizzles the high and low halves of each byte, but any translation is\nvalid as long as it satisfies the strict one-to-one requirement of\nindex-to-position.\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":215202,"byte_end":216774,"line_start":36,"line_end":75,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216775,"byte_end":216778,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216779,"byte_end":216790,"line_start":77,"line_end":77,"column_start":1,"column_end":12}},{"value":"/ use bitvec::{","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216791,"byte_end":216808,"line_start":78,"line_end":78,"column_start":1,"column_end":18}},{"value":"/   prelude::BitOrder,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216809,"byte_end":216833,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/   // Additional symbols:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216834,"byte_end":216862,"line_start":80,"line_end":80,"column_start":1,"column_end":29}},{"value":"/   index::{BitIdx, BitPos},","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216863,"byte_end":216893,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"/   mem::BitRegister,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216894,"byte_end":216917,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216918,"byte_end":216924,"line_start":83,"line_end":83,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216925,"byte_end":216928,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ pub struct HiLo;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216929,"byte_end":216949,"line_start":85,"line_end":85,"column_start":1,"column_end":21}},{"value":"/ unsafe impl BitOrder for HiLo {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216950,"byte_end":216985,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/   fn at<R: BitRegister>(idx: BitIdx<R>) -> BitPos<R> {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":216986,"byte_end":217044,"line_start":87,"line_end":87,"column_start":1,"column_end":59}},{"value":"/     BitPos::new(idx.into_inner() ^ 4).unwrap()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217045,"byte_end":217095,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217096,"byte_end":217103,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217104,"byte_end":217109,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217110,"byte_end":217113,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ #[test]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217114,"byte_end":217125,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"/ #[cfg(test)]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217126,"byte_end":217142,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"/ fn prove_hilo() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217143,"byte_end":217164,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/   bitvec::order::verify::<HiLo>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217165,"byte_end":217203,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217204,"byte_end":217209,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217210,"byte_end":217217,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217218,"byte_end":217221,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217222,"byte_end":217258,"line_start":99,"line_end":99,"column_start":1,"column_end":37}},{"value":"/ [`BitOrder::at`]: Self::at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217259,"byte_end":217289,"line_start":100,"line_end":100,"column_start":1,"column_end":31}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217290,"byte_end":217326,"line_start":101,"line_end":101,"column_start":1,"column_end":37}},{"value":"/ [`bitvec`]: crate","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217327,"byte_end":217348,"line_start":102,"line_end":102,"column_start":1,"column_end":22}},{"value":"/ [`verify`]: crate::order::verify","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217349,"byte_end":217385,"line_start":103,"line_end":103,"column_start":1,"column_end":37}},{"value":"/ [`verify_for_type`]: crate::order::verify_for_type","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217386,"byte_end":217440,"line_start":104,"line_end":104,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219850,"byte_end":219852,"line_start":169,"line_end":169,"column_start":5,"column_end":7},"name":"at","qualname":"::order::BitOrder::at","value":"pub fn at<R>(BitIdx<R>) -> BitPos<R> where R: BitRegister","parent":{"krate":0,"index":1112},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into an electrical bit position.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into an electrical bit position.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217479,"byte_end":217545,"line_start":106,"line_end":106,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217547,"byte_end":217550,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ This function is the basis of the trait, and must adhere to a number of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217552,"byte_end":217627,"line_start":108,"line_end":108,"column_start":2,"column_end":77}},{"value":"/ requirements in order for an implementation to be correct.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217629,"byte_end":217691,"line_start":109,"line_end":109,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217693,"byte_end":217696,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217698,"byte_end":217719,"line_start":111,"line_end":111,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217721,"byte_end":217724,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type that the index and position govern.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217726,"byte_end":217790,"line_start":113,"line_end":113,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217792,"byte_end":217795,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217797,"byte_end":217813,"line_start":115,"line_end":115,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217815,"byte_end":217818,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217820,"byte_end":217885,"line_start":117,"line_end":117,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217887,"byte_end":217890,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217892,"byte_end":217905,"line_start":119,"line_end":119,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217907,"byte_end":217910,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ The electrical position of the indexed bit within the register `R`. See","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217912,"byte_end":217987,"line_start":121,"line_end":121,"column_start":2,"column_end":77}},{"value":"/ the [`BitPos`] documentation for what electrical positions are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":217989,"byte_end":218055,"line_start":122,"line_end":122,"column_start":2,"column_end":68}},{"value":"/ considered to mean.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218057,"byte_end":218080,"line_start":123,"line_end":123,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218082,"byte_end":218085,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218087,"byte_end":218105,"line_start":125,"line_end":125,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218107,"byte_end":218110,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ This function must satisfy the following requirements for all possible","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218112,"byte_end":218186,"line_start":127,"line_end":127,"column_start":2,"column_end":76}},{"value":"/ input and output values, for all possible `R` type parameters:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218188,"byte_end":218254,"line_start":128,"line_end":128,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218256,"byte_end":218259,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ ## Totality","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218261,"byte_end":218276,"line_start":130,"line_end":130,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218278,"byte_end":218281,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ This function must be able to accept every input in the range","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218283,"byte_end":218348,"line_start":132,"line_end":132,"column_start":2,"column_end":67}},{"value":"/ [`BitIdx::ZERO`] to [`BitIdx::LAST`], and produce a value in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218350,"byte_end":218423,"line_start":133,"line_end":133,"column_start":2,"column_end":75}},{"value":"/ range as a [`BitPos`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218425,"byte_end":218451,"line_start":134,"line_end":134,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218453,"byte_end":218456,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ ## Bijection","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218458,"byte_end":218474,"line_start":136,"line_end":136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218476,"byte_end":218479,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ There must be an exactly one-to-one correspondence between input value","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218481,"byte_end":218555,"line_start":138,"line_end":138,"column_start":2,"column_end":76}},{"value":"/ and output value. No input index may choose its output from a set of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218557,"byte_end":218629,"line_start":139,"line_end":139,"column_start":2,"column_end":74}},{"value":"/ more than one position, and no output position may be produced by more","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218631,"byte_end":218705,"line_start":140,"line_end":140,"column_start":2,"column_end":76}},{"value":"/ than one input index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218707,"byte_end":218732,"line_start":141,"line_end":141,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218734,"byte_end":218737,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ ## Purity","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218739,"byte_end":218752,"line_start":143,"line_end":143,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218754,"byte_end":218757,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ The translation from index to position must be consistent for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218759,"byte_end":218828,"line_start":145,"line_end":145,"column_start":2,"column_end":71}},{"value":"/ lifetime of *at least* all data structures in the program. This function","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218830,"byte_end":218906,"line_start":146,"line_end":146,"column_start":2,"column_end":78}},{"value":"/ *may* refer to global state, but that state **must** be immutable while","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218908,"byte_end":218983,"line_start":147,"line_end":147,"column_start":2,"column_end":77}},{"value":"/ any [`bitvec`] data structures exist, and must not be used to violate","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":218985,"byte_end":219058,"line_start":148,"line_end":148,"column_start":2,"column_end":75}},{"value":"/ the totality or bijection requirements.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219060,"byte_end":219103,"line_start":149,"line_end":149,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219105,"byte_end":219108,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ ## Output Validity","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219110,"byte_end":219132,"line_start":151,"line_end":151,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219134,"byte_end":219137,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ The produced [`BitPos`] must be within the valid range of that type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219139,"byte_end":219211,"line_start":153,"line_end":153,"column_start":2,"column_end":74}},{"value":"/ Call sites of this function will not take any steps to constrain or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219213,"byte_end":219284,"line_start":154,"line_end":154,"column_start":2,"column_end":73}},{"value":"/ check the return value. If you use `unsafe` code to produce an invalid","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219286,"byte_end":219360,"line_start":155,"line_end":155,"column_start":2,"column_end":76}},{"value":"/ `BitPos`, the program is incorrect, and will likely crash.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219362,"byte_end":219424,"line_start":156,"line_end":156,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219426,"byte_end":219429,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219431,"byte_end":219442,"line_start":158,"line_end":158,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219444,"byte_end":219447,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ This function is only ever called with input values in the valid","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219449,"byte_end":219517,"line_start":160,"line_end":160,"column_start":2,"column_end":70}},{"value":"/ [`BitIdx`] range. Implementors are not required to consider any values","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219519,"byte_end":219593,"line_start":161,"line_end":161,"column_start":2,"column_end":76}},{"value":"/ outside this range in their function body.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219595,"byte_end":219641,"line_start":162,"line_end":162,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219643,"byte_end":219646,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219648,"byte_end":219684,"line_start":164,"line_end":164,"column_start":2,"column_end":38}},{"value":"/ [`BitIdx::LAST`]: crate::index::BitIdx::LAST","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219686,"byte_end":219734,"line_start":165,"line_end":165,"column_start":2,"column_end":50}},{"value":"/ [`BitIdx::ZERO`]: crate::index::BitIdx::ZERO","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219736,"byte_end":219784,"line_start":166,"line_end":166,"column_start":2,"column_end":50}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219786,"byte_end":219822,"line_start":167,"line_end":167,"column_start":2,"column_end":38}},{"value":"/ [`bitvec`]: crate","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219824,"byte_end":219845,"line_start":168,"line_end":168,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221218,"byte_end":221224,"line_start":208,"line_end":208,"column_start":5,"column_end":11},"name":"select","qualname":"::order::BitOrder::select","value":"pub fn select<R>(BitIdx<R>) -> BitSel<R> where R: BitRegister","parent":{"krate":0,"index":1112},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into a one-hot selector mask.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into a one-hot selector mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219912,"byte_end":219975,"line_start":172,"line_end":172,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219977,"byte_end":219980,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ This is an optional function; a default implementation is provided for","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":219982,"byte_end":220056,"line_start":174,"line_end":174,"column_start":2,"column_end":76}},{"value":"/ you. If you choose to override it, your implementation **must** retain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220058,"byte_end":220132,"line_start":175,"line_end":175,"column_start":2,"column_end":76}},{"value":"/ the behavior of the default implementation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220134,"byte_end":220181,"line_start":176,"line_end":176,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220183,"byte_end":220186,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ The default implementation calls [`Self::at`] to convert the index into","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220188,"byte_end":220263,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/ a position, then turns that position into a selector mask with the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220265,"byte_end":220335,"line_start":179,"line_end":179,"column_start":2,"column_end":72}},{"value":"/ expression `1 << pos`. `BitOrder` implementations may choose to provide","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220337,"byte_end":220412,"line_start":180,"line_end":180,"column_start":2,"column_end":77}},{"value":"/ a faster mask production here, as long as they match this behavior.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220414,"byte_end":220485,"line_start":181,"line_end":181,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220487,"byte_end":220490,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220492,"byte_end":220513,"line_start":183,"line_end":183,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220515,"byte_end":220518,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type that the index and selector govern.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220520,"byte_end":220584,"line_start":185,"line_end":185,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220586,"byte_end":220589,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220591,"byte_end":220607,"line_start":187,"line_end":187,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220609,"byte_end":220612,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220614,"byte_end":220679,"line_start":189,"line_end":189,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220681,"byte_end":220684,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220686,"byte_end":220699,"line_start":191,"line_end":191,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220701,"byte_end":220704,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ A one-hot selector mask for the bit indicated by the index value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220706,"byte_end":220775,"line_start":193,"line_end":193,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220777,"byte_end":220780,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220782,"byte_end":220800,"line_start":195,"line_end":195,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220802,"byte_end":220805,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ A one-hot encoding means that there is exactly one bit set in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220807,"byte_end":220876,"line_start":197,"line_end":197,"column_start":2,"column_end":71}},{"value":"/ produced value. It must be equivalent to `1 << Self::at::<R>(index)`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220878,"byte_end":220951,"line_start":198,"line_end":198,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220953,"byte_end":220956,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ As with `at`, this function must produce a unique mapping from each","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":220958,"byte_end":221029,"line_start":200,"line_end":200,"column_start":2,"column_end":73}},{"value":"/ legal index in the [`BitIdx`] domain to a one-hot value of `R`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221031,"byte_end":221098,"line_start":201,"line_end":201,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221100,"byte_end":221103,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221105,"byte_end":221141,"line_start":203,"line_end":203,"column_start":2,"column_end":38}},{"value":"/ [`Self::at`]: Self::at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221143,"byte_end":221169,"line_start":204,"line_end":204,"column_start":2,"column_end":28}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221171,"byte_end":221180,"line_start":205,"line_end":205,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221182,"byte_end":221212,"line_start":206,"line_end":206,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222253,"byte_end":222257,"line_start":245,"line_end":245,"column_start":5,"column_end":9},"name":"mask","qualname":"::order::BitOrder::mask","value":"pub fn mask<R, impl Into<Option<BitIdx<R>>>: Into<Option<BitIdx<R>>>,\n            impl Into<Option<BitEnd<R>>>: Into<Option<BitEnd<R>>>>(impl Into<Option<BitIdx<R>>>,\n                                                                   impl Into<Option<BitEnd<R>>>)\n-> BitMask<R> where R: BitRegister","parent":{"krate":0,"index":1112},"children":[],"decl_id":null,"docs":" Constructs a multiple-bit selector mask for batched operations on a\n register `R`.","sig":null,"attributes":[{"value":"/ Constructs a multiple-bit selector mask for batched operations on a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221320,"byte_end":221391,"line_start":213,"line_end":213,"column_start":2,"column_end":73}},{"value":"/ register `R`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221393,"byte_end":221410,"line_start":214,"line_end":214,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221412,"byte_end":221415,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function traverses the index range,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221417,"byte_end":221491,"line_start":216,"line_end":216,"column_start":2,"column_end":76}},{"value":"/ converting each index into a single-bit selector with [`Self::select`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221493,"byte_end":221567,"line_start":217,"line_end":217,"column_start":2,"column_end":76}},{"value":"/ and accumulating into a combined register value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221569,"byte_end":221621,"line_start":218,"line_end":218,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221623,"byte_end":221626,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221628,"byte_end":221649,"line_start":220,"line_end":220,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221651,"byte_end":221654,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type for which the mask is built.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221656,"byte_end":221713,"line_start":222,"line_end":222,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221715,"byte_end":221718,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221720,"byte_end":221736,"line_start":224,"line_end":224,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221738,"byte_end":221741,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive starting index for the mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221743,"byte_end":221799,"line_start":226,"line_end":226,"column_start":2,"column_end":58}},{"value":"/ - `upto`: The exclusive ending index for the mask.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221801,"byte_end":221855,"line_start":227,"line_end":227,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221857,"byte_end":221860,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221862,"byte_end":221875,"line_start":229,"line_end":229,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221877,"byte_end":221880,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ A bit-mask with all bits corresponding to the input index range set high","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221882,"byte_end":221958,"line_start":231,"line_end":231,"column_start":2,"column_end":78}},{"value":"/ and all others set low.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221960,"byte_end":221987,"line_start":232,"line_end":232,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221989,"byte_end":221992,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":221994,"byte_end":222012,"line_start":234,"line_end":234,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222014,"byte_end":222017,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ This function must always be equivalent to this expression:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222019,"byte_end":222082,"line_start":236,"line_end":236,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222084,"byte_end":222087,"line_start":237,"line_end":237,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222089,"byte_end":222107,"line_start":238,"line_end":238,"column_start":2,"column_end":20}},{"value":"/ (from .. upto)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222109,"byte_end":222127,"line_start":239,"line_end":239,"column_start":2,"column_end":20}},{"value":"/   .map(Self::select::<R>)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222129,"byte_end":222158,"line_start":240,"line_end":240,"column_start":2,"column_end":31}},{"value":"/   .fold(0, |mask, sel| mask | sel)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222160,"byte_end":222198,"line_start":241,"line_end":241,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222200,"byte_end":222207,"line_start":242,"line_end":242,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222209,"byte_end":222212,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222214,"byte_end":222248,"line_start":244,"line_end":244,"column_start":2,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5420},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222846,"byte_end":222850,"line_start":264,"line_end":264,"column_start":12,"column_end":16},"name":"Lsb0","qualname":"::order::Lsb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from the least significant bit to the most significant.\n","sig":null,"attributes":[{"value":"/ Traverses a register from the least significant bit to the most significant.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222677,"byte_end":222757,"line_start":262,"line_end":262,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":5442},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":224198,"byte_end":224202,"line_start":310,"line_end":310,"column_start":12,"column_end":16},"name":"Msb0","qualname":"::order::Msb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from the most significant bit to the least significant.\n","sig":null,"attributes":[{"value":"/ Traverses a register from the most significant bit to the least significant.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":224029,"byte_end":224109,"line_start":308,"line_end":308,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":1142},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":227092,"byte_end":227098,"line_start":409,"line_end":409,"column_start":8,"column_end":14},"name":"verify","qualname":"::order::verify","value":"pub fn verify<O>(bool) where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Verifies a [`BitOrder`] implementation’s adherence to the stated rules.","sig":null,"attributes":[{"value":"* Verifies a [`BitOrder`] implementation’s adherence to the stated rules.\n\nThis function checks some [`BitOrder`] implementation’s behavior on each of the\n[`BitRegister`] types it must handle, and reports any violation of the rules\nthat it detects.\n\n# Type Parameters\n\n- `O`: The [`BitOrder`] implementation to test.\n\n# Parameters\n\n- `verbose`: Sets whether the test should print diagnostic information to\n  `stdout`.\n\n# Panics\n\nThis panics if it detects any violation of the [`BitOrder`] implementation rules\nfor `O`.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":226460,"byte_end":227067,"line_start":385,"line_end":407,"column_start":1,"column_end":4}},{"value":"inline(never)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":227068,"byte_end":227084,"line_start":408,"line_end":408,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":1144},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":228253,"byte_end":228268,"line_start":448,"line_end":448,"column_start":8,"column_end":23},"name":"verify_for_type","qualname":"::order::verify_for_type","value":"pub fn verify_for_type<O, R>(bool) where O: BitOrder, R: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Verifies a [`BitOrder`] implementation’s adherence to the stated rules, for\none register type.","sig":null,"attributes":[{"value":"* Verifies a [`BitOrder`] implementation’s adherence to the stated rules, for\none register type.\n\nThis function checks some [`BitOrder`] implementation against only one of the\n[`BitRegister`] types that it will encounter. This is useful if you are\nimplementing an ordering that only needs to be concerned with a subset of the\ntypes, and you know that you will never use it with the types it does not\nsupport.\n\n# Type Parameters\n\n- `O`: The [`BitOrder`] implementation to test.\n- `R`: The [`BitRegister`] type for which to test `O`.\n\n# Parameters\n\n- `verbose`: Sets whether the test should print diagnostic information to\n  `stdout`.\n\n# Panics\n\nThis panics if it detects any violation of the [`BitOrder`] implementation rules\nfor the combination of input types and index values.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":227364,"byte_end":228228,"line_start":420,"line_end":446,"column_start":1,"column_end":4}},{"value":"inline(never)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":228229,"byte_end":228245,"line_start":447,"line_end":447,"column_start":1,"column_end":17}}]},{"kind":"Mod","id":{"krate":0,"index":1150},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1158},{"krate":0,"index":1161},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1193},{"krate":0,"index":1196},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1209}],"decl_id":null,"docs":" [`bitvec`] symbol export.","sig":null,"attributes":[{"value":"* [`bitvec`] symbol export.\n\nThis module collects the general public API into a single spot for inclusion, as\n`use bitvec::prelude::*;`, without polluting the root namespace of the crate.\n\n[`bitvec`]: crate\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/prelude.rs","byte_start":231717,"byte_end":231929,"line_start":1,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1212},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ptr","qualname":"::ptr","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1315},{"krate":0,"index":1506},{"krate":0,"index":1664},{"krate":0,"index":1942},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2148},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2156},{"krate":0,"index":2159},{"krate":0,"index":2160},{"krate":0,"index":2162},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2174},{"krate":0,"index":2177},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2184},{"krate":0,"index":2187},{"krate":0,"index":2190},{"krate":0,"index":2195},{"krate":0,"index":2200},{"krate":0,"index":2204},{"krate":0,"index":2208},{"krate":0,"index":2211},{"krate":0,"index":2214},{"krate":0,"index":2217},{"krate":0,"index":2220},{"krate":0,"index":2223},{"krate":0,"index":2228},{"krate":0,"index":2233},{"krate":0,"index":2236}],"decl_id":null,"docs":" Mirror of the [`core::ptr`] module and `bitvec`-specific pointer structures.","sig":null,"attributes":[{"value":"* Mirror of the [`core::ptr`] module and `bitvec`-specific pointer structures.\n\n# Types\n\nAs `bitvec` is not the standard library, it does not have the freedom to use\nlanguage builtins such as actual pointers. Instead, `bitvec` uses its own\nanalagous structures:\n\n- [`BitPtr<M, O, T>`]: This represents a pointer to a single bit, and is vaguely\n  similar to `*const bool`, `*mut bool`, and `NonNull<bool>`. It consists of a\n  (non-null, well-aligned) pointer to a `T` memory element and a bit-index\n  within that element. It uses the `O` ordering implementation to access the\n  selected bit, and uses `M` to determine whether it has write permissions to\n  the location.\n- [`BitPtrRange<M, O, T>`]: This is equivalent to `Range<BitPtr<M, O, T>>`. It\n  exists because [`Range`] has some associated types that are still unstable to\n  implement for its type parameters. It is also smaller than the `Range` would\n  be, because it can take advantage of layout optimizations.\n- [`BitRef<M, O, T>`]: This is a proxy reference type, equivalent to the C++\n  [`bitset<N>::reference`]. It implements `Deref` and, if `M` is `Mut`,\n  `DerefMut` to bool, so that it can be read from and written to as if it were\n  an `&bool` or `&mut bool`. It is **not** a referent type, and cannot be used\n  in APIs that expect actual references. It is implemented under the hood as a\n  `BitPtr` with a `bool` cached in one of the padding bytes.\n- `BitSpan<M, O, T>`: This is a crate-internal type that encodes a `BitPtr` and\n  a length counter into a two-word structure that can be transmuted into\n  `*BitSlice<O, T>`. This type enforces the non-null/well-aligned rule, and is\n  the source of the limitation that `bitvec` region types can only address ⅛ of\n  a `usize`, rather than the ½ limitation of the standard library collections.\n\n  This type is not public API; it will only ever appear in its transmuted form,\n  `*BitSlice<O, T>`. Users are **not permitted** to use any of the [`core::ptr`]\n  or [`pointer`] functions to view or modify `*BitSlice` pointers, or their\n  referent locations, in any way.\n\n# Safety\n\nThe functions in this module take `bitvec` equivalents to raw pointers as their\narguments and read from or write to them. For this to be safe, these pointers\nmust be *valid*. Whether a pointer is valid depends on the operation it is used\nfor (reading or writing), and the extent of the memory that is accessed (i.e.\nhow many bits are read/written in and how many underlying memory elements are\naccessed). Most functions use [`BitPtr`] to access only a single bit, in which\ncase the documentation omits the size and implicitly assumes it to be one bit in\none `T` element.\n\nThe Rust rules about pointer validity are always in effect; `bitvec` refines\nthem to a bit-precision granularity, but must still respect the byte-level and\nelement-level rules.\n\n# Crate-Specific Restrictions\n\n`bitvec` uses an internal encoding scheme to make bit-region pointers fit into a\nstandard Rust slice pointer. This encoding requires that the base element\naddress of a bit-pointer be *non-null* and *well-aligned* for all pointers that\nare used in the encoding scheme.\n\nThe `bitvec` structure used to emulate a pointer to a single bit is larger than\none processor word, and thus cannot be encoded to fit in a `*const Bit`. To ease\ninternal complexity, these restrictions are universal in `bitvec`: the crate as\na whole refuses to operate on null pointers, or pointers that are not aligned to\ntheir referent type, even if your usage never touches the span encoding.\n\nAs such, the pointer types in this module can essentially only be sourced from\nreferences, not from arbitrary address values. While this module attempts to\nrely on actual Rust references as much as possible, and instead use only the\nordinary [`core::ptr`] and [`pointer`] functions. This is not always possible;\nin particular, Rust does not offer stable atomic intrinsics, and instead only\nallows them to be used on references.\n\n[`BitPtr`]: crate::ptr::BitPtr\n[`BitPtr<M, O, T>`]: crate::ptr::BitPtr\n[`BitPtrRange<M, O, T>`]: crate::ptr::BitPtrRange\n[`BitRef<M, O, T>`]: crate::ptr::BitRef\n[`BitSpan<M, O, T>`]: crate::ptr::BitSpan\n[`Range`]: core::ops::Range\n[`bitset<N>::reference`]: https://en.cppreference.com/w/cpp/utility/bitset/reference\n[`core::ptr`]: core::ptr\n[`pointer`]: https://doc.rust-lang.org/std/primitive.pointer.html\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":232271,"byte_end":236650,"line_start":1,"line_end":80,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1280},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":254469,"byte_end":254484,"line_start":35,"line_end":35,"column_start":8,"column_end":23},"name":"check_alignment","qualname":"::ptr::address::check_alignment","value":"pub fn check_alignment<M, T>(Address<M, T>)\n-> Result<Address<M, T>, MisalignError<T>> where M: Mutability","parent":null,"children":[],"decl_id":null,"docs":" Ensures that an address is well-aligned to its referent type.\n","sig":null,"attributes":[{"value":"/ Ensures that an address is well-aligned to its referent type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":254386,"byte_end":254451,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":254452,"byte_end":254461,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":1285},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":254882,"byte_end":254892,"line_start":52,"line_end":52,"column_start":7,"column_end":17},"name":"Permission","qualname":"::ptr::address::AddressExt::Permission","value":"type Permission: Mutability;","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" Tracks the original mutation capability of the source pointer.\n","sig":null,"attributes":[{"value":"/ Tracks the original mutation capability of the source pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":254809,"byte_end":254875,"line_start":51,"line_end":51,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":5464},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256292,"byte_end":256305,"line_start":94,"line_end":94,"column_start":12,"column_end":25},"name":"MisalignError","qualname":"::ptr::address::MisalignError","value":"MisalignError { ptr }","parent":null,"children":[{"krate":0,"index":5466}],"decl_id":null,"docs":" Error produced when an address is insufficiently aligned to its type.\n","sig":null,"attributes":[{"value":"/ Error produced when an address is insufficiently aligned to its type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256146,"byte_end":256219,"line_start":92,"line_end":92,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":5466},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256345,"byte_end":256348,"line_start":96,"line_end":96,"column_start":6,"column_end":9},"name":"ptr","qualname":"::ptr::address::MisalignError::ptr","value":"*const T","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" The misaligned pointer.\n","sig":null,"attributes":[{"value":"/ The misaligned pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256312,"byte_end":256339,"line_start":95,"line_end":95,"column_start":2,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1386},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":260793,"byte_end":260799,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"name":"BitRef","qualname":"::ptr::proxy::BitRef","value":"BitRef {  }","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1395}],"decl_id":null,"docs":" A proxy reference, equivalent to C++ [`std::bitset<N>::reference`].","sig":null,"attributes":[{"value":"* A proxy reference, equivalent to C++ [`std::bitset<N>::reference`].\n\nThis type wraps a `BitPtr` and caches a `bool` in a padding byte. It is then\nable to freely produce references to the cached bool, and commits the cache back\nto the referent bit location on `drop`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the source `&'a mut BitSlice` that created the `BitRef`.\n\n# Type Parameters\n\n- `M`: The write permission of the reference. When this is `Const`, the\n  `DerefMut` implementation is removed, forbidding the proxy from writing back\n  to memory.\n- `O`: The ordering used to address a bit in memory.\n- `T`: The storage type containing the referent bit.\n\n# Quirks\n\nBecause this type has both a lifetime and a destructor, it can introduce an\nuncommon error condition in Rust. When an expression that produces this type is\nin the final expression of a block, including if that expression is used as a\ncondition in a `match`, `if let`, or `if`, then the compiler will attempt to\nextend the drop scope of this type to the outside of the block. This causes a\nlifetime mismatch error if the source region from which this proxy is produced\ngoes out of scope at the end of the block.\n\nIf you get a compiler error that this type causes something to be dropped while\nborrowed, you can end the borrow by putting any expression-ending syntax element\nafter the offending expression that produces this type, including a semicolon or\nan item definition.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\n\nlet (left, right) = bits.split_at_mut(1);\nlet mut first = left.get_mut(0).unwrap();\nlet second = right.get_mut(0).unwrap();\n\n// Referential behavior\n*first = true;\n// Direct write\nsecond.set(true);\n\ndrop(first); // it’s not a reference!\nassert_eq!(bits, bits![1; 2]);\n```\n\n[`std::bitset<N>::reference`]: https://en.cppreference.com/w/cpp/utility/bitset/reference\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":258616,"byte_end":260500,"line_start":49,"line_end":103,"column_start":1,"column_end":4}},{"value":"repr(C, align(8))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":260669,"byte_end":260686,"line_start":106,"line_end":106,"column_start":41,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261711,"byte_end":261722,"line_start":151,"line_end":151,"column_start":16,"column_end":27},"name":"from_bitptr","qualname":"<BitRef>::from_bitptr","value":"pub unsafe fn from_bitptr(BitPtr<M, O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-pointer into a proxy bit-reference.","sig":null,"attributes":[{"value":"/ Converts a bit-pointer into a proxy bit-reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261252,"byte_end":261306,"line_start":133,"line_end":133,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261308,"byte_end":261311,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ The conversion reads from the pointer, then stores the `bool` in a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261313,"byte_end":261383,"line_start":135,"line_end":135,"column_start":2,"column_end":72}},{"value":"/ padding byte.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261385,"byte_end":261402,"line_start":136,"line_end":136,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261404,"byte_end":261407,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261409,"byte_end":261425,"line_start":138,"line_end":138,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261427,"byte_end":261430,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ - `bitptr`: A bit-pointer to turn into a bit-reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261432,"byte_end":261491,"line_start":140,"line_end":140,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261493,"byte_end":261496,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261498,"byte_end":261511,"line_start":142,"line_end":142,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261513,"byte_end":261516,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ A bit-reference pointing at `bitptr`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261518,"byte_end":261559,"line_start":144,"line_end":144,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261561,"byte_end":261564,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261566,"byte_end":261578,"line_start":146,"line_end":146,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261580,"byte_end":261583,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ The `bitptr` must address a location that is valid for reads and, if `M`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261585,"byte_end":261661,"line_start":148,"line_end":148,"column_start":2,"column_end":78}},{"value":"/ is `Mut`, writes.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261663,"byte_end":261684,"line_start":149,"line_end":149,"column_start":2,"column_end":23}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261686,"byte_end":261695,"line_start":150,"line_end":150,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262630,"byte_end":262641,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"name":"into_bitptr","qualname":"<BitRef>::into_bitptr","value":"pub fn into_bitptr(Self) -> BitPtr<M, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Decays the bit-reference to an ordinary bit-pointer.","sig":null,"attributes":[{"value":"/ Decays the bit-reference to an ordinary bit-pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262268,"byte_end":262324,"line_start":176,"line_end":176,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262326,"byte_end":262329,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262331,"byte_end":262347,"line_start":178,"line_end":178,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262349,"byte_end":262352,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262354,"byte_end":262366,"line_start":180,"line_end":180,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262368,"byte_end":262371,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262373,"byte_end":262386,"line_start":182,"line_end":182,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262388,"byte_end":262391,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ The interior bit-pointer, without the associated cache. If this was a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262393,"byte_end":262466,"line_start":184,"line_end":184,"column_start":2,"column_end":75}},{"value":"/ write-capable pointer, then the cached bit is committed to memory before","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262468,"byte_end":262544,"line_start":185,"line_end":185,"column_start":2,"column_end":78}},{"value":"/ this method returns.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262546,"byte_end":262570,"line_start":186,"line_end":186,"column_start":2,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262572,"byte_end":262589,"line_start":187,"line_end":187,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262591,"byte_end":262621,"line_start":188,"line_end":188,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262957,"byte_end":262964,"line_start":206,"line_end":206,"column_start":9,"column_end":16},"name":"replace","qualname":"<BitRef>::replace","value":"pub fn replace(&mut Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Moves `src` into the referenced bit, returning the previous value.","sig":null,"attributes":[{"value":"/ Moves `src` into the referenced bit, returning the previous value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262759,"byte_end":262829,"line_start":199,"line_end":199,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262831,"byte_end":262834,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262836,"byte_end":262850,"line_start":201,"line_end":201,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262852,"byte_end":262855,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ [`mem::replace`](core::mem::replace)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262857,"byte_end":262897,"line_start":203,"line_end":203,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262899,"byte_end":262916,"line_start":204,"line_end":204,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262918,"byte_end":262948,"line_start":205,"line_end":205,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1409},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263247,"byte_end":263251,"line_start":218,"line_end":218,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitRef>::swap","value":"pub fn swap<O2, T2>(&mut Self, &mut BitRef<, Mut, O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations, without deïnitializing either\n one.","sig":null,"attributes":[{"value":"/ Swaps the values at two mutable locations, without deïnitializing either","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263038,"byte_end":263115,"line_start":210,"line_end":210,"column_start":2,"column_end":78}},{"value":"/ one.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263117,"byte_end":263125,"line_start":211,"line_end":211,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263127,"byte_end":263130,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263132,"byte_end":263146,"line_start":213,"line_end":213,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263148,"byte_end":263151,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ [`mem::swap`](core::mem::swap)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263153,"byte_end":263187,"line_start":215,"line_end":215,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263189,"byte_end":263206,"line_start":216,"line_end":216,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263208,"byte_end":263238,"line_start":217,"line_end":217,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264044,"byte_end":264047,"line_start":241,"line_end":241,"column_start":9,"column_end":12},"name":"set","qualname":"<BitRef>::set","value":"pub fn set(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a bit into the proxied location without an intermediate copy.","sig":null,"attributes":[{"value":"/ Writes a bit into the proxied location without an intermediate copy.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263396,"byte_end":263468,"line_start":226,"line_end":226,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263470,"byte_end":263473,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ This function writes `value` directly into the proxied location, and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263475,"byte_end":263547,"line_start":228,"line_end":228,"column_start":2,"column_end":74}},{"value":"/ does not store `value` in the proxy’s internal cache. This should be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263549,"byte_end":263623,"line_start":229,"line_end":229,"column_start":2,"column_end":74}},{"value":"/ equivalent to the behavior seen when using ordinary [`DerefMut`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263625,"byte_end":263693,"line_start":230,"line_end":230,"column_start":2,"column_end":70}},{"value":"/ proxying, but the latter depends on compiler optimization.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263695,"byte_end":263757,"line_start":231,"line_end":231,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263759,"byte_end":263762,"line_start":232,"line_end":232,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263764,"byte_end":263780,"line_start":233,"line_end":233,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263782,"byte_end":263785,"line_start":234,"line_end":234,"column_start":2,"column_end":5}},{"value":"/ - `self`: This destroys the proxy, as it becomes invalid when writing","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263787,"byte_end":263860,"line_start":235,"line_end":235,"column_start":2,"column_end":75}},{"value":"/   directly to the location without updating the cache.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263862,"byte_end":263920,"line_start":236,"line_end":236,"column_start":2,"column_end":60}},{"value":"/ - `value`: The new bit to write into the proxied slot.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263922,"byte_end":263980,"line_start":237,"line_end":237,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263982,"byte_end":263985,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ [`DerefMut`]: core::ops::DerefMut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":263987,"byte_end":264024,"line_start":239,"line_end":239,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264026,"byte_end":264035,"line_start":240,"line_end":240,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1568},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272347,"byte_end":272358,"line_start":69,"line_end":69,"column_start":12,"column_end":23},"name":"BitPtrRange","qualname":"::ptr::range::BitPtrRange","value":"BitPtrRange { start, end }","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573}],"decl_id":null,"docs":" Equivalent to `Range<BitPtr<M, O, T>>`.","sig":null,"attributes":[{"value":"* Equivalent to `Range<BitPtr<M, O, T>>`.\n\nAs with `Range`, this is a half-open set: the starting pointer is included in\nthe set of live addresses, while the ending pointer is one-past-the-end of live\naddresses, and is not usable.\n\nThis structure exists because `Range` does not permit foreign implementations of\nits internal traits.\n\n# Original\n\n[`Range<*bool>`](core::ops::Range)\n\n# API Differences\n\nThis cannot be constructed directly from the `..` syntax, though a `From`\nimplementation is provided.\n\n# Type Parameters\n\n- `M`: The write permissions of the pointers this range produces.\n- `O`: The bit-ordering within a storage element used to access bits.\n- `T`: The storage element type containing the referent bits.\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":271327,"byte_end":272054,"line_start":38,"line_end":61,"column_start":1,"column_end":4}},{"value":"repr(C, align(8))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272223,"byte_end":272240,"line_start":64,"line_end":64,"column_start":41,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1572},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272487,"byte_end":272492,"line_start":76,"line_end":76,"column_start":6,"column_end":11},"name":"start","qualname":"::ptr::range::BitPtrRange::start","value":"ptr::single::BitPtr<M, O, T>","parent":{"krate":0,"index":1568},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"/ The lower bound of the range (inclusive).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272436,"byte_end":272481,"line_start":75,"line_end":75,"column_start":2,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1573},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272564,"byte_end":272567,"line_start":78,"line_end":78,"column_start":6,"column_end":9},"name":"end","qualname":"::ptr::range::BitPtrRange::end","value":"ptr::single::BitPtr<M, O, T>","parent":{"krate":0,"index":1568},"children":[],"decl_id":null,"docs":" The higher bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"/ The higher bound of the range (exclusive).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272512,"byte_end":272558,"line_start":77,"line_end":77,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1578},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272771,"byte_end":272776,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"EMPTY","qualname":"::ptr::range::BitPtrRange::<M, O, T>::EMPTY","value":"Self","parent":{"krate":0,"index":1574},"children":[],"decl_id":null,"docs":" The canonical empty range. All ranges with zero length are equally\n empty.\n","sig":null,"attributes":[{"value":"/ The canonical empty range. All ranges with zero length are equally","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272677,"byte_end":272747,"line_start":87,"line_end":87,"column_start":2,"column_end":72}},{"value":"/ empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272749,"byte_end":272759,"line_start":88,"line_end":88,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272974,"byte_end":272983,"line_start":97,"line_end":97,"column_start":9,"column_end":18},"name":"raw_parts","qualname":"<BitPtrRange<M, O, T>>::raw_parts","value":"pub fn raw_parts(&Self) -> (BitPtr<M, O, T>, BitPtr<M, O, T>)","parent":null,"children":[],"decl_id":null,"docs":" Destructures the range back into its start and end pointers.\n","sig":null,"attributes":[{"value":"/ Destructures the range back into its start and end pointers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272850,"byte_end":272914,"line_start":94,"line_end":94,"column_start":2,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272916,"byte_end":272933,"line_start":95,"line_end":95,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272935,"byte_end":272965,"line_start":96,"line_end":96,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273240,"byte_end":273250,"line_start":105,"line_end":105,"column_start":9,"column_end":19},"name":"into_range","qualname":"<BitPtrRange<M, O, T>>::into_range","value":"pub fn into_range(Self) -> Range<BitPtr<M, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts the structure into an actual `Range`. The `Range` will have\n limited functionality compared to `self`.\n","sig":null,"attributes":[{"value":"/ Converts the structure into an actual `Range`. The `Range` will have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273061,"byte_end":273133,"line_start":101,"line_end":101,"column_start":2,"column_end":74}},{"value":"/ limited functionality compared to `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273135,"byte_end":273180,"line_start":102,"line_end":102,"column_start":2,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273182,"byte_end":273199,"line_start":103,"line_end":103,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273201,"byte_end":273231,"line_start":104,"line_end":104,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273852,"byte_end":273860,"line_start":131,"line_end":131,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitPtrRange<M, O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if the range is empty (the distance between pointers is `0`).","sig":null,"attributes":[{"value":"/ Tests if the range is empty (the distance between pointers is `0`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273315,"byte_end":273386,"line_start":109,"line_end":109,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273388,"byte_end":273391,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273393,"byte_end":273407,"line_start":111,"line_end":111,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273409,"byte_end":273412,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ [`Range::is_empty`](core::ops::Range::is_empty)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273414,"byte_end":273465,"line_start":113,"line_end":113,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273467,"byte_end":273470,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273472,"byte_end":273486,"line_start":115,"line_end":115,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273488,"byte_end":273491,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273493,"byte_end":273504,"line_start":117,"line_end":117,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273506,"byte_end":273533,"line_start":118,"line_end":118,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273535,"byte_end":273568,"line_start":119,"line_end":119,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273570,"byte_end":273573,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ let data = 0u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273575,"byte_end":273594,"line_start":121,"line_end":121,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273596,"byte_end":273648,"line_start":122,"line_end":122,"column_start":2,"column_end":54}},{"value":"/ let mut range = unsafe { ptr.range(1) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273650,"byte_end":273694,"line_start":123,"line_end":123,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273696,"byte_end":273699,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ assert!(!range.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273701,"byte_end":273732,"line_start":125,"line_end":125,"column_start":2,"column_end":33}},{"value":"/ range.next();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273734,"byte_end":273751,"line_start":126,"line_end":126,"column_start":2,"column_end":19}},{"value":"/ assert!(range.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273753,"byte_end":273783,"line_start":127,"line_end":127,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273785,"byte_end":273792,"line_start":128,"line_end":128,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273794,"byte_end":273811,"line_start":129,"line_end":129,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273813,"byte_end":273843,"line_start":130,"line_end":130,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1582},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":275273,"byte_end":275281,"line_start":178,"line_end":178,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitPtrRange<M, O, T>>::contains","value":"pub fn contains<M2, T2>(&Self, &BitPtr<M2, O, T2>) -> bool where\nM2: Mutability, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `pointer` is contained in the range.","sig":null,"attributes":[{"value":"/ Returns `true` if the `pointer` is contained in the range.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273908,"byte_end":273970,"line_start":135,"line_end":135,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273972,"byte_end":273975,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273977,"byte_end":273991,"line_start":137,"line_end":137,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273993,"byte_end":273996,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ [`Range::contains`](core::ops::Range::contains)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":273998,"byte_end":274049,"line_start":139,"line_end":139,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274051,"byte_end":274054,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274056,"byte_end":274077,"line_start":141,"line_end":141,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274079,"byte_end":274082,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ The candidate pointer may differ in mutability permissions and exact","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274084,"byte_end":274156,"line_start":143,"line_end":143,"column_start":2,"column_end":74}},{"value":"/ storage type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274158,"byte_end":274175,"line_start":144,"line_end":144,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274177,"byte_end":274180,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ If `T2::Mem` is not `T::Mem`, then this always returns `false`. If `T2`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274182,"byte_end":274257,"line_start":146,"line_end":146,"column_start":2,"column_end":77}},{"value":"/ and `T` have the same memory type, but different alias permissions, then","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274259,"byte_end":274335,"line_start":147,"line_end":147,"column_start":2,"column_end":78}},{"value":"/ the comparison can continue.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274337,"byte_end":274369,"line_start":148,"line_end":148,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274371,"byte_end":274374,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274376,"byte_end":274390,"line_start":150,"line_end":150,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274392,"byte_end":274395,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274397,"byte_end":274408,"line_start":152,"line_end":152,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274410,"byte_end":274437,"line_start":153,"line_end":153,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274439,"byte_end":274472,"line_start":154,"line_end":154,"column_start":2,"column_end":35}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274474,"byte_end":274499,"line_start":155,"line_end":155,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274501,"byte_end":274504,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ let data = 0u16;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274506,"byte_end":274526,"line_start":157,"line_end":157,"column_start":2,"column_end":22}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274528,"byte_end":274580,"line_start":158,"line_end":158,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274582,"byte_end":274585,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ let mut range = unsafe { ptr.range(16) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274587,"byte_end":274632,"line_start":160,"line_end":160,"column_start":2,"column_end":47}},{"value":"/ // Reduce the range contents.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274634,"byte_end":274667,"line_start":161,"line_end":161,"column_start":2,"column_end":35}},{"value":"/ range.nth(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274669,"byte_end":274686,"line_start":162,"line_end":162,"column_start":2,"column_end":19}},{"value":"/ range.nth_back(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274688,"byte_end":274710,"line_start":163,"line_end":163,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274712,"byte_end":274715,"line_start":164,"line_end":164,"column_start":2,"column_end":5}},{"value":"/ // The start pointer is now excluded, but the interior remains.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274717,"byte_end":274784,"line_start":165,"line_end":165,"column_start":2,"column_end":69}},{"value":"/ assert!(!range.contains(&ptr));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274786,"byte_end":274821,"line_start":166,"line_end":166,"column_start":2,"column_end":37}},{"value":"/ assert!(range.contains(&unsafe { ptr.add(8) }));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274823,"byte_end":274875,"line_start":167,"line_end":167,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274877,"byte_end":274880,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ // Different base types are always excluded.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274882,"byte_end":274930,"line_start":169,"line_end":169,"column_start":2,"column_end":50}},{"value":"/ let casted = ptr.cast::<u8>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274932,"byte_end":274966,"line_start":170,"line_end":170,"column_start":2,"column_end":36}},{"value":"/ assert!(!range.contains(&unsafe { casted.add(8) }));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":274968,"byte_end":275024,"line_start":171,"line_end":171,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":275026,"byte_end":275029,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ // Casting to a different alias model with the same width is valid.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":275031,"byte_end":275102,"line_start":173,"line_end":173,"column_start":2,"column_end":73}},{"value":"/ let casted = ptr.cast::<Cell<u16>>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":275104,"byte_end":275145,"line_start":174,"line_end":174,"column_start":2,"column_end":43}},{"value":"/ assert!(range.contains(&unsafe { casted.add(8) }));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":275147,"byte_end":275202,"line_start":175,"line_end":175,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":275204,"byte_end":275211,"line_start":176,"line_end":176,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":275248,"byte_end":275262,"line_start":177,"line_end":177,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1779},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283248,"byte_end":283254,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"BitPtr","qualname":"::ptr::single::BitPtr","value":"BitPtr {  }","parent":null,"children":[{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785}],"decl_id":null,"docs":" Pointer to an individual bit in a memory element. Analagous to `*bool`.","sig":null,"attributes":[{"value":"* Pointer to an individual bit in a memory element. Analagous to `*bool`.\n\n# Original\n\n[`*bool`](https://doc.rust-lang.org/std/primitive.pointer.html) and\n[`NonNull<bool>`](core::ptr::NonNull)\n\n# API Differences\n\nThis must be a structure, rather than a raw pointer, for two reasons:\n\n- It is larger than a raw pointer.\n- Raw pointers are not `#[fundamental]` and cannot have foreign implementations.\n\nAdditionally, rather than create two structures to map to `*const bool` and\n`*mut bool`, respectively, this takes mutability as a type parameter.\n\nBecause the encoded span pointer requires that memory addresses are well\naligned, this type also imposes the alignment requirement and refuses\nconstruction for misaligned element addresses. While this type is used in the\nAPI equivalent of ordinary raw pointers, it is restricted in value to only be\n*references* to memory elements.\n\n# ABI Differences\n\nThis has alignment `1`, rather than an alignment to the processor word. This is\nnecessary for some crate-internal optimizations.\n\n# Type Parameters\n\n- `M`: Marks whether the pointer permits mutation of memory through it.\n- `O`: The ordering of bits within a memory element.\n- `T`: A memory type used to select both the register size and the access\n  behavior when performing loads/stores.\n\n# Usage\n\nThis structure is used as the [`bitvec`] equivalent to `*bool`. It is used in\nall raw-pointer APIs, and provides behavior to emulate raw pointers. It cannot\nbe directly dereferenced, as it is not a pointer; it can only be transformed\nback into higher referential types, or used in [`bitvec::ptr`] free functions.\n\nThese pointers can never be null, or misaligned.\n\n[`bitvec`]: crate\n[`bitvec::ptr`]: crate::ptr\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":281503,"byte_end":283217,"line_start":59,"line_end":105,"column_start":1,"column_end":4}},{"value":"repr(C, packed)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283218,"byte_end":283236,"line_start":106,"line_end":106,"column_start":1,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":1790},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283757,"byte_end":283765,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"DANGLING","qualname":"::ptr::single::BitPtr::<M, O, T>::DANGLING","value":"Self","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":" The dangling pointer. This selects the starting bit of the `T` dangling\n address.\n","sig":null,"attributes":[{"value":"/ The dangling pointer. This selects the starting bit of the `T` dangling","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283656,"byte_end":283731,"line_start":127,"line_end":127,"column_start":2,"column_end":77}},{"value":"/ address.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283733,"byte_end":283745,"line_start":128,"line_end":128,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285080,"byte_end":285087,"line_start":168,"line_end":168,"column_start":9,"column_end":16},"name":"try_new","qualname":"<BitPtr<M, O, T>>::try_new","value":"pub fn try_new<A>(A, u8) -> Result<Self, BitPtrError<T>> where\nA: TryInto<Address<M, T>>, BitPtrError<T>: From<A::Error>","parent":null,"children":[],"decl_id":null,"docs":" Tries to construct a `BitPtr` from a memory location and a bit index.","sig":null,"attributes":[{"value":"/ Tries to construct a `BitPtr` from a memory location and a bit index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284240,"byte_end":284313,"line_start":144,"line_end":144,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284315,"byte_end":284318,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284320,"byte_end":284341,"line_start":146,"line_end":146,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284343,"byte_end":284346,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ - `A`: This accepts anything that may be used as a memory address.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284348,"byte_end":284418,"line_start":148,"line_end":148,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284420,"byte_end":284423,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284425,"byte_end":284441,"line_start":150,"line_end":150,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284443,"byte_end":284446,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ - `addr`: The memory address to use in the `BitPtr`. If this value","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284448,"byte_end":284518,"line_start":152,"line_end":152,"column_start":2,"column_end":72}},{"value":"/   violates the [`Address`] rules, then its conversion error will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284520,"byte_end":284591,"line_start":153,"line_end":153,"column_start":2,"column_end":73}},{"value":"/   returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284593,"byte_end":284608,"line_start":154,"line_end":154,"column_start":2,"column_end":17}},{"value":"/ - `head`: The index of the bit in `*addr` that this pointer selects. If","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284610,"byte_end":284685,"line_start":155,"line_end":155,"column_start":2,"column_end":77}},{"value":"/   this value violates the [`BitIdx`] rules, then its conversion error","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284687,"byte_end":284760,"line_start":156,"line_end":156,"column_start":2,"column_end":75}},{"value":"/   will be returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284762,"byte_end":284785,"line_start":157,"line_end":157,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284787,"byte_end":284790,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284792,"byte_end":284805,"line_start":159,"line_end":159,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284807,"byte_end":284810,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ A new `BitPtr`, selecting the memory location `addr` and the bit `head`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284812,"byte_end":284888,"line_start":161,"line_end":161,"column_start":2,"column_end":78}},{"value":"/ If either `addr` or `head` are invalid values, then this propagates","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284890,"byte_end":284961,"line_start":162,"line_end":162,"column_start":2,"column_end":73}},{"value":"/ their error.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284963,"byte_end":284979,"line_start":163,"line_end":163,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284981,"byte_end":284984,"line_start":164,"line_end":164,"column_start":2,"column_end":5}},{"value":"/ [`Address`]: crate::ptr::Address","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":284986,"byte_end":285022,"line_start":165,"line_end":165,"column_start":2,"column_end":38}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285024,"byte_end":285060,"line_start":166,"line_end":166,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285062,"byte_end":285071,"line_start":167,"line_end":167,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285778,"byte_end":285781,"line_start":192,"line_end":192,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPtr<M, O, T>>::new","value":"pub fn new(Address<M, T>, BitIdx<T::Mem>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a memory location and a bit index.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a memory location and a bit index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285274,"byte_end":285339,"line_start":176,"line_end":176,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285341,"byte_end":285344,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ Since this requires that the address and bit index are already","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285346,"byte_end":285412,"line_start":178,"line_end":178,"column_start":2,"column_end":68}},{"value":"/ well-formed, it can assemble the `BitPtr` without inspecting their","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285414,"byte_end":285484,"line_start":179,"line_end":179,"column_start":2,"column_end":72}},{"value":"/ values.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285486,"byte_end":285497,"line_start":180,"line_end":180,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285499,"byte_end":285502,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285504,"byte_end":285520,"line_start":182,"line_end":182,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285522,"byte_end":285525,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ - `addr`: A well-formed memory address of `T`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285527,"byte_end":285577,"line_start":184,"line_end":184,"column_start":2,"column_end":52}},{"value":"/ - `head`: A well-formed bit index within `T`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285579,"byte_end":285628,"line_start":185,"line_end":185,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285630,"byte_end":285633,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285635,"byte_end":285648,"line_start":187,"line_end":187,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285650,"byte_end":285653,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ A `BitPtr` selecting the `head` bit in the location `addr`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285655,"byte_end":285718,"line_start":189,"line_end":189,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285720,"byte_end":285737,"line_start":190,"line_end":190,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285739,"byte_end":285769,"line_start":191,"line_end":191,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286213,"byte_end":286222,"line_start":212,"line_end":212,"column_start":9,"column_end":18},"name":"raw_parts","qualname":"<BitPtr<M, O, T>>::raw_parts","value":"pub fn raw_parts(Self) -> (Address<M, T>, BitIdx<T::Mem>)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes the pointer into its element address and bit index.","sig":null,"attributes":[{"value":"/ Decomposes the pointer into its element address and bit index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285893,"byte_end":285959,"line_start":200,"line_end":200,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285961,"byte_end":285964,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285966,"byte_end":285982,"line_start":202,"line_end":202,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285984,"byte_end":285987,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":285989,"byte_end":286001,"line_start":204,"line_end":204,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286003,"byte_end":286006,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286008,"byte_end":286021,"line_start":206,"line_end":206,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286023,"byte_end":286026,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The memory address in which the referent bit is located.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286028,"byte_end":286096,"line_start":208,"line_end":208,"column_start":2,"column_end":70}},{"value":"/ - `.1`: The index of the referent bit within `*.0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286098,"byte_end":286153,"line_start":209,"line_end":209,"column_start":2,"column_end":57}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286155,"byte_end":286172,"line_start":210,"line_end":210,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":286174,"byte_end":286204,"line_start":211,"line_end":211,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288697,"byte_end":288702,"line_start":294,"line_end":294,"column_start":16,"column_end":21},"name":"range","qualname":"<BitPtr<M, O, T>>::range","value":"pub unsafe fn range(Self, usize) -> BitPtrRange<M, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Produces a pointer range starting at `self` and running for `count`\n bits.","sig":null,"attributes":[{"value":"/ Produces a pointer range starting at `self` and running for `count`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":287981,"byte_end":288052,"line_start":270,"line_end":270,"column_start":2,"column_end":73}},{"value":"/ bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288054,"byte_end":288063,"line_start":271,"line_end":271,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288065,"byte_end":288068,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ This calls `self.add(count)`, then bundles the resulting pointer as the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288070,"byte_end":288145,"line_start":273,"line_end":273,"column_start":2,"column_end":77}},{"value":"/ high end of the produced range.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288147,"byte_end":288182,"line_start":274,"line_end":274,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288184,"byte_end":288187,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288189,"byte_end":288205,"line_start":276,"line_end":276,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288207,"byte_end":288210,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ - `self`: The starting pointer of the produced range.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288212,"byte_end":288269,"line_start":278,"line_end":278,"column_start":2,"column_end":59}},{"value":"/ - `count`: The number of bits that the produced range includes.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288271,"byte_end":288338,"line_start":279,"line_end":279,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288340,"byte_end":288343,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288345,"byte_end":288358,"line_start":281,"line_end":281,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288360,"byte_end":288363,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ A half-open range of pointers, beginning at (and including) `self`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288365,"byte_end":288436,"line_start":283,"line_end":283,"column_start":2,"column_end":73}},{"value":"/ running for `count` bits, and ending at (and excluding)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288438,"byte_end":288497,"line_start":284,"line_end":284,"column_start":2,"column_end":61}},{"value":"/ `self.add(count)`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288499,"byte_end":288521,"line_start":285,"line_end":285,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288523,"byte_end":288526,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288528,"byte_end":288540,"line_start":287,"line_end":287,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288542,"byte_end":288545,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ `count` cannot violate the constraints in [`add`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288547,"byte_end":288601,"line_start":289,"line_end":289,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288603,"byte_end":288606,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288608,"byte_end":288630,"line_start":291,"line_end":291,"column_start":2,"column_end":24}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288632,"byte_end":288649,"line_start":292,"line_end":292,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288651,"byte_end":288681,"line_start":293,"line_end":293,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289007,"byte_end":289018,"line_start":308,"line_end":308,"column_start":16,"column_end":27},"name":"into_bitref","qualname":"<BitPtr<M, O, T>>::into_bitref","value":"pub unsafe fn into_bitref<'a>(Self) -> BitRef","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-pointer into a proxy bit-reference.","sig":null,"attributes":[{"value":"/ Converts a bit-pointer into a proxy bit-reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288815,"byte_end":288869,"line_start":301,"line_end":301,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288871,"byte_end":288874,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288876,"byte_end":288888,"line_start":303,"line_end":303,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288890,"byte_end":288893,"line_start":304,"line_end":304,"column_start":2,"column_end":5}},{"value":"/ The pointer must be valid to dereference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288895,"byte_end":288940,"line_start":305,"line_end":305,"column_start":2,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288942,"byte_end":288959,"line_start":306,"line_end":306,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":288961,"byte_end":288991,"line_start":307,"line_end":307,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289196,"byte_end":289201,"line_start":315,"line_end":315,"column_start":9,"column_end":14},"name":"immut","qualname":"<BitPtr<M, O, T>>::immut","value":"pub fn immut(Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Removes write permissions from a bit-pointer.\n","sig":null,"attributes":[{"value":"/ Removes write permissions from a bit-pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289087,"byte_end":289136,"line_start":312,"line_end":312,"column_start":2,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289138,"byte_end":289155,"line_start":313,"line_end":313,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289157,"byte_end":289187,"line_start":314,"line_end":314,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1803},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289544,"byte_end":289554,"line_start":331,"line_end":331,"column_start":16,"column_end":26},"name":"assert_mut","qualname":"<BitPtr<M, O, T>>::assert_mut","value":"pub unsafe fn assert_mut(Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds write permissions to a bit-pointer.","sig":null,"attributes":[{"value":"/ Adds write permissions to a bit-pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289345,"byte_end":289389,"line_start":324,"line_end":324,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289391,"byte_end":289394,"line_start":325,"line_end":325,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289396,"byte_end":289408,"line_start":326,"line_end":326,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289410,"byte_end":289413,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ This pointer must have been derived from a `*mut` pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289415,"byte_end":289477,"line_start":328,"line_end":328,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289479,"byte_end":289496,"line_start":329,"line_end":329,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":289498,"byte_end":289528,"line_start":330,"line_end":330,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1805},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290558,"byte_end":290565,"line_start":368,"line_end":368,"column_start":9,"column_end":16},"name":"is_null","qualname":"<BitPtr<M, O, T>>::is_null","value":"pub fn is_null(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if a bit-pointer is the null value.","sig":null,"attributes":[{"value":"/ Tests if a bit-pointer is the null value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290148,"byte_end":290193,"line_start":357,"line_end":357,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290195,"byte_end":290198,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ This is always false, as `BitPtr` is a `NonNull` internally. Use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290200,"byte_end":290268,"line_start":359,"line_end":359,"column_start":2,"column_end":70}},{"value":"/ `Option<BitPtr>` to express the potential for a null pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290270,"byte_end":290335,"line_start":360,"line_end":360,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290337,"byte_end":290340,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290342,"byte_end":290356,"line_start":362,"line_end":362,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290358,"byte_end":290361,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ [`pointer::is_null`](https://doc.rust-lang.org/std/primitive.pointer.html#method.is_null)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290363,"byte_end":290456,"line_start":364,"line_end":364,"column_start":2,"column_end":95}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290458,"byte_end":290475,"line_start":365,"line_end":365,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290477,"byte_end":290507,"line_start":366,"line_end":366,"column_start":2,"column_end":32}},{"value":"deprecated = \"`BitPtr` is never null\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290509,"byte_end":290549,"line_start":367,"line_end":367,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1806},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291192,"byte_end":291196,"line_start":387,"line_end":387,"column_start":9,"column_end":13},"name":"cast","qualname":"<BitPtr<M, O, T>>::cast","value":"pub fn cast<U>(Self) -> BitPtr<M, O, U> where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Casts to a bit-pointer of another storage type, preserving the\n bit-ordering and mutability permissions.","sig":null,"attributes":[{"value":"/ Casts to a bit-pointer of another storage type, preserving the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290595,"byte_end":290661,"line_start":372,"line_end":372,"column_start":2,"column_end":68}},{"value":"/ bit-ordering and mutability permissions.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290663,"byte_end":290707,"line_start":373,"line_end":373,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290709,"byte_end":290712,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290714,"byte_end":290728,"line_start":375,"line_end":375,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290730,"byte_end":290733,"line_start":376,"line_end":376,"column_start":2,"column_end":5}},{"value":"/ [`pointer::cast`](https://doc.rust-lang.org/std/primitive.pointer.html#method.cast)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290735,"byte_end":290822,"line_start":377,"line_end":377,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290824,"byte_end":290827,"line_start":378,"line_end":378,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290829,"byte_end":290843,"line_start":379,"line_end":379,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290845,"byte_end":290848,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ This is not a free typecast! It encodes the pointer as a crate-internal","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290850,"byte_end":290925,"line_start":381,"line_end":381,"column_start":2,"column_end":77}},{"value":"/ span descriptor, casts the span descriptor to the `U` storage element","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":290927,"byte_end":291000,"line_start":382,"line_end":382,"column_start":2,"column_end":75}},{"value":"/ parameter, then decodes the result. This preserves general correctness,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291002,"byte_end":291077,"line_start":383,"line_end":383,"column_start":2,"column_end":77}},{"value":"/ but will likely change both the virtual and physical bits addressed by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291079,"byte_end":291153,"line_start":384,"line_end":384,"column_start":2,"column_end":76}},{"value":"/ this pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291155,"byte_end":291172,"line_start":385,"line_end":385,"column_start":2,"column_end":19}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291174,"byte_end":291183,"line_start":386,"line_end":386,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292599,"byte_end":292605,"line_start":432,"line_end":432,"column_start":16,"column_end":22},"name":"as_ref","qualname":"<BitPtr<M, O, T>>::as_ref","value":"pub unsafe fn as_ref<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy reference to the referent bit.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291363,"byte_end":291414,"line_start":394,"line_end":394,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291416,"byte_end":291419,"line_start":395,"line_end":395,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` is a non-null, well-aligned, pointer, this never","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291421,"byte_end":291490,"line_start":396,"line_end":396,"column_start":2,"column_end":71}},{"value":"/ returns `None`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291492,"byte_end":291511,"line_start":397,"line_end":397,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291513,"byte_end":291516,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291518,"byte_end":291532,"line_start":399,"line_end":399,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291534,"byte_end":291537,"line_start":400,"line_end":400,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_ref`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291539,"byte_end":291630,"line_start":401,"line_end":401,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291632,"byte_end":291635,"line_start":402,"line_end":402,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291637,"byte_end":291658,"line_start":403,"line_end":403,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291660,"byte_end":291663,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291665,"byte_end":291735,"line_start":405,"line_end":405,"column_start":2,"column_end":72}},{"value":"/ implements `Deref<Target = bool>`, and can be converted to `&bool` with","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291737,"byte_end":291812,"line_start":406,"line_end":406,"column_start":2,"column_end":77}},{"value":"/ `&*`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291814,"byte_end":291823,"line_start":407,"line_end":407,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291825,"byte_end":291828,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291830,"byte_end":291842,"line_start":409,"line_end":409,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291844,"byte_end":291847,"line_start":410,"line_end":410,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291849,"byte_end":291924,"line_start":411,"line_end":411,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer, and you must ensure the following","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":291926,"byte_end":292000,"line_start":412,"line_end":412,"column_start":2,"column_end":76}},{"value":"/ conditions are met:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292002,"byte_end":292025,"line_start":413,"line_end":413,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292027,"byte_end":292030,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferencable as defined in the standard library","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292032,"byte_end":292107,"line_start":415,"line_end":415,"column_start":2,"column_end":77}},{"value":"/   documentation","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292109,"byte_end":292128,"line_start":416,"line_end":416,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292130,"byte_end":292192,"line_start":417,"line_end":417,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292194,"byte_end":292270,"line_start":418,"line_end":418,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292272,"byte_end":292346,"line_start":419,"line_end":419,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292348,"byte_end":292351,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292353,"byte_end":292367,"line_start":421,"line_end":421,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292369,"byte_end":292372,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292374,"byte_end":292385,"line_start":423,"line_end":423,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292387,"byte_end":292414,"line_start":424,"line_end":424,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292416,"byte_end":292419,"line_start":425,"line_end":425,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292421,"byte_end":292440,"line_start":426,"line_end":426,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292442,"byte_end":292494,"line_start":427,"line_end":427,"column_start":2,"column_end":54}},{"value":"/ let val = unsafe { ptr.as_ref() }.unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292496,"byte_end":292543,"line_start":428,"line_end":428,"column_start":2,"column_end":49}},{"value":"/ assert!(*val);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292545,"byte_end":292563,"line_start":429,"line_end":429,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292565,"byte_end":292572,"line_start":430,"line_end":430,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292574,"byte_end":292583,"line_start":431,"line_end":431,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1810},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294311,"byte_end":294317,"line_start":481,"line_end":481,"column_start":16,"column_end":22},"name":"offset","qualname":"<BitPtr<M, O, T>>::offset","value":"pub unsafe fn offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer.","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292700,"byte_end":292741,"line_start":436,"line_end":436,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292743,"byte_end":292746,"line_start":437,"line_end":437,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292748,"byte_end":292780,"line_start":438,"line_end":438,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292782,"byte_end":292785,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292787,"byte_end":292801,"line_start":440,"line_end":440,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292803,"byte_end":292806,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292808,"byte_end":292899,"line_start":442,"line_end":442,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292901,"byte_end":292904,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292906,"byte_end":292918,"line_start":444,"line_end":444,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292920,"byte_end":292923,"line_start":445,"line_end":445,"column_start":2,"column_end":5}},{"value":"/ If any of the following conditions are violated, the result is Undefined","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":292925,"byte_end":293001,"line_start":446,"line_end":446,"column_start":2,"column_end":78}},{"value":"/ Behavior:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293003,"byte_end":293016,"line_start":447,"line_end":447,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293018,"byte_end":293021,"line_start":448,"line_end":448,"column_start":2,"column_end":5}},{"value":"/ - Both the starting and resulting pointer must be either in bounds or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293023,"byte_end":293096,"line_start":449,"line_end":449,"column_start":2,"column_end":75}},{"value":"/   one byte past the end of the same allocated object. Note that in Rust,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293098,"byte_end":293174,"line_start":450,"line_end":450,"column_start":2,"column_end":78}},{"value":"/   every (stack-allocated) variable is considered a separate allocated","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293176,"byte_end":293249,"line_start":451,"line_end":451,"column_start":2,"column_end":75}},{"value":"/   object.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293251,"byte_end":293264,"line_start":452,"line_end":452,"column_start":2,"column_end":15}},{"value":"/ - The computed offset, **in bytes**, cannot overflow an `isize`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293266,"byte_end":293334,"line_start":453,"line_end":453,"column_start":2,"column_end":70}},{"value":"/ - The offset being in bounds cannot rely on “wrapping around” the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293336,"byte_end":293409,"line_start":454,"line_end":454,"column_start":2,"column_end":71}},{"value":"/   address space. That is, the infinite-precision sum, **in bytes** must","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293411,"byte_end":293486,"line_start":455,"line_end":455,"column_start":2,"column_end":77}},{"value":"/   fit in a `usize`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293488,"byte_end":293511,"line_start":456,"line_end":456,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293513,"byte_end":293516,"line_start":457,"line_end":457,"column_start":2,"column_end":5}},{"value":"/ These pointers are almost always derived from [`BitSlice`] regions,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293518,"byte_end":293589,"line_start":458,"line_end":458,"column_start":2,"column_end":73}},{"value":"/ which have an encoding limitation that the high three bits of the length","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293591,"byte_end":293667,"line_start":459,"line_end":459,"column_start":2,"column_end":78}},{"value":"/ counter are zero, so `bitvec` pointers are even less likely than","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293669,"byte_end":293737,"line_start":460,"line_end":460,"column_start":2,"column_end":70}},{"value":"/ ordinary pointers to run afoul of these limitations.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293739,"byte_end":293795,"line_start":461,"line_end":461,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293797,"byte_end":293800,"line_start":462,"line_end":462,"column_start":2,"column_end":5}},{"value":"/ Use [`wrapping_offset`] if you expect to risk hitting the high edge of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293802,"byte_end":293876,"line_start":463,"line_end":463,"column_start":2,"column_end":76}},{"value":"/ the address space.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293878,"byte_end":293900,"line_start":464,"line_end":464,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293902,"byte_end":293905,"line_start":465,"line_end":465,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293907,"byte_end":293921,"line_start":466,"line_end":466,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293923,"byte_end":293926,"line_start":467,"line_end":467,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293928,"byte_end":293939,"line_start":468,"line_end":468,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293941,"byte_end":293968,"line_start":469,"line_end":469,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293970,"byte_end":293973,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ let data = 5u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293975,"byte_end":293994,"line_start":471,"line_end":471,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":293996,"byte_end":294048,"line_start":472,"line_end":472,"column_start":2,"column_end":54}},{"value":"/ assert!(unsafe { ptr.read() });","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294050,"byte_end":294085,"line_start":473,"line_end":473,"column_start":2,"column_end":37}},{"value":"/ assert!(!unsafe { ptr.offset(1).read() });","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294087,"byte_end":294133,"line_start":474,"line_end":474,"column_start":2,"column_end":48}},{"value":"/ assert!(unsafe { ptr.offset(2).read() });","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294135,"byte_end":294180,"line_start":475,"line_end":475,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294182,"byte_end":294189,"line_start":476,"line_end":476,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294191,"byte_end":294194,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294196,"byte_end":294236,"line_start":478,"line_end":478,"column_start":2,"column_end":42}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294238,"byte_end":294284,"line_start":479,"line_end":479,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294286,"byte_end":294295,"line_start":480,"line_end":480,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1811},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296370,"byte_end":296385,"line_start":537,"line_end":537,"column_start":9,"column_end":24},"name":"wrapping_offset","qualname":"<BitPtr<M, O, T>>::wrapping_offset","value":"pub fn wrapping_offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic.","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294441,"byte_end":294508,"line_start":486,"line_end":486,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294510,"byte_end":294513,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294515,"byte_end":294547,"line_start":488,"line_end":488,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294549,"byte_end":294552,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294554,"byte_end":294568,"line_start":490,"line_end":490,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294570,"byte_end":294573,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_offset`](https://doc.rust/lang.org/std/primitive.pointer.html#method.wrapping_offset)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294575,"byte_end":294684,"line_start":492,"line_end":492,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294686,"byte_end":294689,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294691,"byte_end":294703,"line_start":494,"line_end":494,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294705,"byte_end":294708,"line_start":495,"line_end":495,"column_start":2,"column_end":5}},{"value":"/ The resulting pointer does not need to be in bounds, but it is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294710,"byte_end":294776,"line_start":496,"line_end":496,"column_start":2,"column_end":68}},{"value":"/ potentially hazardous to dereference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294778,"byte_end":294819,"line_start":497,"line_end":497,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294821,"byte_end":294824,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ In particular, the resulting pointer remains attached to the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294826,"byte_end":294895,"line_start":499,"line_end":499,"column_start":2,"column_end":71}},{"value":"/ allocated object that `self` points to. It may *not* be used to access a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294897,"byte_end":294973,"line_start":500,"line_end":500,"column_start":2,"column_end":78}},{"value":"/ different allocated object. Note that in Rust, every (stack-allocated)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":294975,"byte_end":295049,"line_start":501,"line_end":501,"column_start":2,"column_end":76}},{"value":"/ variable is considered a separate allocated object.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295051,"byte_end":295106,"line_start":502,"line_end":502,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295108,"byte_end":295111,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295113,"byte_end":295182,"line_start":504,"line_end":504,"column_start":2,"column_end":71}},{"value":"/ usize)` is not the same as `y`, and dereferencing it is undefined","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295184,"byte_end":295253,"line_start":505,"line_end":505,"column_start":2,"column_end":71}},{"value":"/ behavior unless `x` and `y` point into the same allocated object.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295255,"byte_end":295324,"line_start":506,"line_end":506,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295326,"byte_end":295329,"line_start":507,"line_end":507,"column_start":2,"column_end":5}},{"value":"/ Compared to [`offset`], this method basically delays the requirement of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295331,"byte_end":295406,"line_start":508,"line_end":508,"column_start":2,"column_end":77}},{"value":"/ staying within the same allocated object: [`offset`] is immediate","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295408,"byte_end":295477,"line_start":509,"line_end":509,"column_start":2,"column_end":71}},{"value":"/ Undefined Behavior when crossing object boundaries; `wrapping_offset`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295479,"byte_end":295552,"line_start":510,"line_end":510,"column_start":2,"column_end":75}},{"value":"/ produces a pointer but still leads to Undefined Behavior if that pointer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295554,"byte_end":295630,"line_start":511,"line_end":511,"column_start":2,"column_end":78}},{"value":"/ is dereferenced. [`offset`] can be optimized better and is thus","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295632,"byte_end":295699,"line_start":512,"line_end":512,"column_start":2,"column_end":69}},{"value":"/ preferable in performance-sensitive code.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295701,"byte_end":295746,"line_start":513,"line_end":513,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295748,"byte_end":295751,"line_start":514,"line_end":514,"column_start":2,"column_end":5}},{"value":"/ If you need to cross object boundaries, destructure this pointer into","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295753,"byte_end":295826,"line_start":515,"line_end":515,"column_start":2,"column_end":75}},{"value":"/ its base address and bit index, cast the base address to an integer, and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295828,"byte_end":295904,"line_start":516,"line_end":516,"column_start":2,"column_end":78}},{"value":"/ do the arithmetic in the purely integer space.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295906,"byte_end":295956,"line_start":517,"line_end":517,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295958,"byte_end":295961,"line_start":518,"line_end":518,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295963,"byte_end":295977,"line_start":519,"line_end":519,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295979,"byte_end":295982,"line_start":520,"line_end":520,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295984,"byte_end":295995,"line_start":521,"line_end":521,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":295997,"byte_end":296024,"line_start":522,"line_end":522,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296026,"byte_end":296029,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ let data = 0u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296031,"byte_end":296050,"line_start":524,"line_end":524,"column_start":2,"column_end":21}},{"value":"/ let mut ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296052,"byte_end":296108,"line_start":525,"line_end":525,"column_start":2,"column_end":58}},{"value":"/ let end = ptr.wrapping_offset(8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296110,"byte_end":296147,"line_start":526,"line_end":526,"column_start":2,"column_end":39}},{"value":"/ while ptr < end {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296149,"byte_end":296170,"line_start":527,"line_end":527,"column_start":2,"column_end":23}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296172,"byte_end":296205,"line_start":528,"line_end":528,"column_start":2,"column_end":35}},{"value":"/   println!(\"{}\", unsafe { ptr.read() });","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296207,"byte_end":296251,"line_start":529,"line_end":529,"column_start":2,"column_end":46}},{"value":"/   # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296253,"byte_end":296262,"line_start":530,"line_end":530,"column_start":2,"column_end":11}},{"value":"/   ptr = ptr.wrapping_offset(3);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296264,"byte_end":296299,"line_start":531,"line_end":531,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296301,"byte_end":296306,"line_start":532,"line_end":532,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296308,"byte_end":296315,"line_start":533,"line_end":533,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296317,"byte_end":296320,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296322,"byte_end":296350,"line_start":535,"line_end":535,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296352,"byte_end":296361,"line_start":536,"line_end":536,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298976,"byte_end":298987,"line_start":618,"line_end":618,"column_start":16,"column_end":27},"name":"offset_from","qualname":"<BitPtr<M, O, T>>::offset_from","value":"pub unsafe fn offset_from(Self, Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Calculates the distance between two pointers. The returned value is in\n units of bits.","sig":null,"attributes":[{"value":"/ Calculates the distance between two pointers. The returned value is in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296518,"byte_end":296592,"line_start":542,"line_end":542,"column_start":2,"column_end":76}},{"value":"/ units of bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296594,"byte_end":296612,"line_start":543,"line_end":543,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296614,"byte_end":296617,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ This function is the inverse of [`offset`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296619,"byte_end":296666,"line_start":545,"line_end":545,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296668,"byte_end":296671,"line_start":546,"line_end":546,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296673,"byte_end":296687,"line_start":547,"line_end":547,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296689,"byte_end":296692,"line_start":548,"line_end":548,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset_from)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296694,"byte_end":296790,"line_start":549,"line_end":549,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296792,"byte_end":296795,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296797,"byte_end":296809,"line_start":551,"line_end":551,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296811,"byte_end":296814,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ If any of the following conditions are violated, the result is Undefined","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296816,"byte_end":296892,"line_start":553,"line_end":553,"column_start":2,"column_end":78}},{"value":"/ Behavior:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296894,"byte_end":296907,"line_start":554,"line_end":554,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296909,"byte_end":296912,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ - Both the starting and other pointer must be either in bounds or one","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296914,"byte_end":296987,"line_start":556,"line_end":556,"column_start":2,"column_end":75}},{"value":"/   byte past the end of the same allocated object. Note that in Rust,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":296989,"byte_end":297061,"line_start":557,"line_end":557,"column_start":2,"column_end":74}},{"value":"/   every (stack-allocated) variable is considered a separate allocated","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297063,"byte_end":297136,"line_start":558,"line_end":558,"column_start":2,"column_end":75}},{"value":"/   object.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297138,"byte_end":297151,"line_start":559,"line_end":559,"column_start":2,"column_end":15}},{"value":"/ - Both pointers must be *derived from* a pointer to the same object.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297153,"byte_end":297225,"line_start":560,"line_end":560,"column_start":2,"column_end":74}},{"value":"/ - The distance between the pointers, **in bytes**, cannot overflow an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297227,"byte_end":297300,"line_start":561,"line_end":561,"column_start":2,"column_end":75}},{"value":"/   `isize`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297302,"byte_end":297316,"line_start":562,"line_end":562,"column_start":2,"column_end":16}},{"value":"/ - The distance being in bounds cannot rely on “wrapping around” the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297318,"byte_end":297393,"line_start":563,"line_end":563,"column_start":2,"column_end":73}},{"value":"/   address space.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297395,"byte_end":297415,"line_start":564,"line_end":564,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297417,"byte_end":297420,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ These pointers are almost always derived from [`BitSlice`] regions,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297422,"byte_end":297493,"line_start":566,"line_end":566,"column_start":2,"column_end":73}},{"value":"/ which have an encoding limitation that the high three bits of the length","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297495,"byte_end":297571,"line_start":567,"line_end":567,"column_start":2,"column_end":78}},{"value":"/ counter are zero, so `bitvec` pointers are even less likely than","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297573,"byte_end":297641,"line_start":568,"line_end":568,"column_start":2,"column_end":70}},{"value":"/ ordinary pointers to run afoul of these limitations.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297643,"byte_end":297699,"line_start":569,"line_end":569,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297701,"byte_end":297704,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297706,"byte_end":297720,"line_start":571,"line_end":571,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297722,"byte_end":297725,"line_start":572,"line_end":572,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297727,"byte_end":297743,"line_start":573,"line_end":573,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297745,"byte_end":297748,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297750,"byte_end":297761,"line_start":575,"line_end":575,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297763,"byte_end":297790,"line_start":576,"line_end":576,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297792,"byte_end":297795,"line_start":577,"line_end":577,"column_start":2,"column_end":5}},{"value":"/ let data = 0u16;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297797,"byte_end":297817,"line_start":578,"line_end":578,"column_start":2,"column_end":22}},{"value":"/ let base = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297819,"byte_end":297872,"line_start":579,"line_end":579,"column_start":2,"column_end":55}},{"value":"/ let low = unsafe { base.add(5) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297874,"byte_end":297911,"line_start":580,"line_end":580,"column_start":2,"column_end":39}},{"value":"/ let high = unsafe { low.add(6) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297913,"byte_end":297950,"line_start":581,"line_end":581,"column_start":2,"column_end":39}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297952,"byte_end":297964,"line_start":582,"line_end":582,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(high.offset_from(low), 6);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":297966,"byte_end":298009,"line_start":583,"line_end":583,"column_start":2,"column_end":45}},{"value":"/   assert_eq!(low.offset_from(high), -6);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298011,"byte_end":298055,"line_start":584,"line_end":584,"column_start":2,"column_end":46}},{"value":"/   assert_eq!(low.offset(6), high);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298057,"byte_end":298095,"line_start":585,"line_end":585,"column_start":2,"column_end":40}},{"value":"/   assert_eq!(high.offset(-6), low);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298097,"byte_end":298136,"line_start":586,"line_end":586,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298138,"byte_end":298143,"line_start":587,"line_end":587,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298145,"byte_end":298152,"line_start":588,"line_end":588,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298154,"byte_end":298157,"line_start":589,"line_end":589,"column_start":2,"column_end":5}},{"value":"/ *Incorrect* usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298159,"byte_end":298181,"line_start":590,"line_end":590,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298183,"byte_end":298186,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298188,"byte_end":298206,"line_start":592,"line_end":592,"column_start":2,"column_end":20}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298208,"byte_end":298235,"line_start":593,"line_end":593,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298237,"byte_end":298240,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ let a = 0u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298242,"byte_end":298258,"line_start":595,"line_end":595,"column_start":2,"column_end":18}},{"value":"/ let b = !0u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298260,"byte_end":298277,"line_start":596,"line_end":596,"column_start":2,"column_end":19}},{"value":"/ let a_ptr = BitPtr::<_, Lsb0, _>::from_ref(&a);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298279,"byte_end":298330,"line_start":597,"line_end":597,"column_start":2,"column_end":53}},{"value":"/ let b_ptr = BitPtr::<_, Lsb0, _>::from_ref(&b);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298332,"byte_end":298383,"line_start":598,"line_end":598,"column_start":2,"column_end":53}},{"value":"/ let diff = (b_ptr.pointer() as isize)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298385,"byte_end":298426,"line_start":599,"line_end":599,"column_start":2,"column_end":43}},{"value":"/   .wrapping_sub(a_ptr.pointer() as isize)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298428,"byte_end":298473,"line_start":600,"line_end":600,"column_start":2,"column_end":47}},{"value":"/   // Remember: raw pointers are byte-addressed,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298475,"byte_end":298526,"line_start":601,"line_end":601,"column_start":2,"column_end":53}},{"value":"/   // but these are bit-addressed.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298528,"byte_end":298565,"line_start":602,"line_end":602,"column_start":2,"column_end":39}},{"value":"/   .wrapping_mul(8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298567,"byte_end":298590,"line_start":603,"line_end":603,"column_start":2,"column_end":25}},{"value":"/ // Create a pointer to `b`, derived from `a`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298592,"byte_end":298641,"line_start":604,"line_end":604,"column_start":2,"column_end":51}},{"value":"/ let b_ptr_2 = a_ptr.wrapping_offset(diff);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298643,"byte_end":298689,"line_start":605,"line_end":605,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298691,"byte_end":298694,"line_start":606,"line_end":606,"column_start":2,"column_end":5}},{"value":"/ // The pointers are *arithmetically* equal now","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298696,"byte_end":298746,"line_start":607,"line_end":607,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(b_ptr, b_ptr_2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298748,"byte_end":298779,"line_start":608,"line_end":608,"column_start":2,"column_end":33}},{"value":"/ // Undefined Behavior!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298781,"byte_end":298807,"line_start":609,"line_end":609,"column_start":2,"column_end":28}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298809,"byte_end":298821,"line_start":610,"line_end":610,"column_start":2,"column_end":14}},{"value":"/   b_ptr_2.offset_from(b_ptr);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298823,"byte_end":298856,"line_start":611,"line_end":611,"column_start":2,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298858,"byte_end":298863,"line_start":612,"line_end":612,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298865,"byte_end":298872,"line_start":613,"line_end":613,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298874,"byte_end":298877,"line_start":614,"line_end":614,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298879,"byte_end":298919,"line_start":615,"line_end":615,"column_start":2,"column_end":42}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298921,"byte_end":298949,"line_start":616,"line_end":616,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":298951,"byte_end":298960,"line_start":617,"line_end":617,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1813},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300054,"byte_end":300057,"line_start":650,"line_end":650,"column_start":16,"column_end":19},"name":"add","qualname":"<BitPtr<M, O, T>>::add","value":"pub unsafe fn add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer (convenience for `.offset(count as\n isize)`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer (convenience for `.offset(count as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299665,"byte_end":299740,"line_start":634,"line_end":634,"column_start":2,"column_end":77}},{"value":"/ isize)`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299742,"byte_end":299755,"line_start":635,"line_end":635,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299757,"byte_end":299760,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299762,"byte_end":299794,"line_start":637,"line_end":637,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299796,"byte_end":299799,"line_start":638,"line_end":638,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299801,"byte_end":299815,"line_start":639,"line_end":639,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299817,"byte_end":299820,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ [`pointer::add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.add)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299822,"byte_end":299907,"line_start":641,"line_end":641,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299909,"byte_end":299912,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299914,"byte_end":299926,"line_start":643,"line_end":643,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299928,"byte_end":299931,"line_start":644,"line_end":644,"column_start":2,"column_end":5}},{"value":"/ See [`offset`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299933,"byte_end":299952,"line_start":645,"line_end":645,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299954,"byte_end":299957,"line_start":646,"line_end":646,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299959,"byte_end":299987,"line_start":647,"line_end":647,"column_start":2,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":299989,"byte_end":300006,"line_start":648,"line_end":648,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300008,"byte_end":300038,"line_start":649,"line_end":649,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300489,"byte_end":300492,"line_start":669,"line_end":669,"column_start":16,"column_end":19},"name":"sub","qualname":"<BitPtr<M, O, T>>::sub","value":"pub unsafe fn sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer (convenience for `.offset((count as\n isize).wrapping_neg())`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer (convenience for `.offset((count as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300123,"byte_end":300199,"line_start":654,"line_end":654,"column_start":2,"column_end":78}},{"value":"/ isize).wrapping_neg())`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300201,"byte_end":300230,"line_start":655,"line_end":655,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300232,"byte_end":300235,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300237,"byte_end":300269,"line_start":657,"line_end":657,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300271,"byte_end":300274,"line_start":658,"line_end":658,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300276,"byte_end":300290,"line_start":659,"line_end":659,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300292,"byte_end":300295,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ [`pointer::sub`](https://doc.rust-lang.org/std/primitive.pointer.html#method.sub)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300297,"byte_end":300382,"line_start":661,"line_end":661,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300384,"byte_end":300387,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300389,"byte_end":300401,"line_start":663,"line_end":663,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300403,"byte_end":300406,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ See [`offset`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300408,"byte_end":300427,"line_start":665,"line_end":665,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300429,"byte_end":300432,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300434,"byte_end":300462,"line_start":667,"line_end":667,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300464,"byte_end":300473,"line_start":668,"line_end":668,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300998,"byte_end":301010,"line_start":687,"line_end":687,"column_start":9,"column_end":21},"name":"wrapping_add","qualname":"<BitPtr<M, O, T>>::wrapping_add","value":"pub fn wrapping_add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic\n (convenience for `.wrapping_offset(count as isize)`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300575,"byte_end":300641,"line_start":673,"line_end":673,"column_start":2,"column_end":68}},{"value":"/ (convenience for `.wrapping_offset(count as isize)`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300643,"byte_end":300700,"line_start":674,"line_end":674,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300702,"byte_end":300705,"line_start":675,"line_end":675,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300707,"byte_end":300721,"line_start":676,"line_end":676,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300723,"byte_end":300726,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300728,"byte_end":300831,"line_start":678,"line_end":678,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300833,"byte_end":300836,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300838,"byte_end":300850,"line_start":680,"line_end":680,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300852,"byte_end":300855,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ See [`wrapping_offset`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300857,"byte_end":300885,"line_start":682,"line_end":682,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300887,"byte_end":300890,"line_start":683,"line_end":683,"column_start":2,"column_end":5}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300892,"byte_end":300938,"line_start":684,"line_end":684,"column_start":2,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300940,"byte_end":300957,"line_start":685,"line_end":685,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":300959,"byte_end":300989,"line_start":686,"line_end":686,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1816},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301517,"byte_end":301529,"line_start":705,"line_end":705,"column_start":9,"column_end":21},"name":"wrapping_sub","qualname":"<BitPtr<M, O, T>>::wrapping_sub","value":"pub fn wrapping_sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic\n (convenience for `.wrapping_offset((count as isize).wrapping_neg())`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301085,"byte_end":301151,"line_start":691,"line_end":691,"column_start":2,"column_end":68}},{"value":"/ (convenience for `.wrapping_offset((count as isize).wrapping_neg())`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301153,"byte_end":301227,"line_start":692,"line_end":692,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301229,"byte_end":301232,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301234,"byte_end":301248,"line_start":694,"line_end":694,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301250,"byte_end":301253,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_sub`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301255,"byte_end":301358,"line_start":696,"line_end":696,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301360,"byte_end":301363,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301365,"byte_end":301377,"line_start":698,"line_end":698,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301379,"byte_end":301382,"line_start":699,"line_end":699,"column_start":2,"column_end":5}},{"value":"/ See [`wrapping_offset`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301384,"byte_end":301412,"line_start":700,"line_end":700,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301414,"byte_end":301417,"line_start":701,"line_end":701,"column_start":2,"column_end":5}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301419,"byte_end":301465,"line_start":702,"line_end":702,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301467,"byte_end":301476,"line_start":703,"line_end":703,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301478,"byte_end":301508,"line_start":704,"line_end":704,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301917,"byte_end":301921,"line_start":721,"line_end":721,"column_start":16,"column_end":20},"name":"read","qualname":"<BitPtr<M, O, T>>::read","value":"pub unsafe fn read(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `*self`.","sig":null,"attributes":[{"value":"/ Reads the bit from `*self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301621,"byte_end":301652,"line_start":709,"line_end":709,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301654,"byte_end":301657,"line_start":710,"line_end":710,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301659,"byte_end":301673,"line_start":711,"line_end":711,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301675,"byte_end":301678,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301680,"byte_end":301767,"line_start":713,"line_end":713,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301769,"byte_end":301772,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301774,"byte_end":301786,"line_start":715,"line_end":715,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301788,"byte_end":301791,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301793,"byte_end":301848,"line_start":717,"line_end":717,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301850,"byte_end":301853,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ [`ptr::read`]: crate::ptr::read","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301855,"byte_end":301890,"line_start":719,"line_end":719,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":301892,"byte_end":301901,"line_start":720,"line_end":720,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302552,"byte_end":302565,"line_start":743,"line_end":743,"column_start":16,"column_end":29},"name":"read_volatile","qualname":"<BitPtr<M, O, T>>::read_volatile","value":"pub unsafe fn read_volatile(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the bit from `self`.","sig":null,"attributes":[{"value":"/ Performs a volatile read of the bit from `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302015,"byte_end":302067,"line_start":727,"line_end":727,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302069,"byte_end":302072,"line_start":728,"line_end":728,"column_start":2,"column_end":5}},{"value":"/ Volatile operations are intended to act on I/O memory, and are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302074,"byte_end":302140,"line_start":729,"line_end":729,"column_start":2,"column_end":68}},{"value":"/ guaranteed to not be elided or reördered by the compiler across other","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302142,"byte_end":302216,"line_start":730,"line_end":730,"column_start":2,"column_end":75}},{"value":"/ volatile operations.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302218,"byte_end":302242,"line_start":731,"line_end":731,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302244,"byte_end":302247,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302249,"byte_end":302263,"line_start":733,"line_end":733,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302265,"byte_end":302268,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302270,"byte_end":302375,"line_start":735,"line_end":735,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302377,"byte_end":302380,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302382,"byte_end":302394,"line_start":737,"line_end":737,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302396,"byte_end":302399,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read_volatile`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302401,"byte_end":302465,"line_start":739,"line_end":739,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302467,"byte_end":302470,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ [`ptr::read_volatile`]: crate::ptr::read_volatile","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302472,"byte_end":302525,"line_start":741,"line_end":741,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302527,"byte_end":302536,"line_start":742,"line_end":742,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303081,"byte_end":303088,"line_start":762,"line_end":762,"column_start":16,"column_end":23},"name":"copy_to","qualname":"<BitPtr<M, O, T>>::copy_to","value":"pub unsafe fn copy_to<O2, T2>(Self, BitPtr<Mut, O2, T2>, usize) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302650,"byte_end":302723,"line_start":747,"line_end":747,"column_start":2,"column_end":75}},{"value":"/ may overlap.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302725,"byte_end":302741,"line_start":748,"line_end":748,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302743,"byte_end":302746,"line_start":749,"line_end":749,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *same* argument order as [`ptr::copy`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302748,"byte_end":302810,"line_start":750,"line_end":750,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302812,"byte_end":302815,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302817,"byte_end":302831,"line_start":752,"line_end":752,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302833,"byte_end":302836,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302838,"byte_end":302931,"line_start":754,"line_end":754,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302933,"byte_end":302936,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302938,"byte_end":302950,"line_start":756,"line_end":756,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302952,"byte_end":302955,"line_start":757,"line_end":757,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":302957,"byte_end":303012,"line_start":758,"line_end":758,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303014,"byte_end":303017,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy`]: crate::ptr::copy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303019,"byte_end":303054,"line_start":760,"line_end":760,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303056,"byte_end":303065,"line_start":761,"line_end":761,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1822},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304360,"byte_end":304382,"line_start":809,"line_end":809,"column_start":16,"column_end":38},"name":"copy_to_nonoverlapping","qualname":"<BitPtr<M, O, T>>::copy_to_nonoverlapping","value":"pub unsafe fn copy_to_nonoverlapping<O2, T2>(Self, BitPtr<Mut, O2, T2>, usize)\nwhere O2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303828,"byte_end":303901,"line_start":793,"line_end":793,"column_start":2,"column_end":75}},{"value":"/ may *not* overlap.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303903,"byte_end":303925,"line_start":794,"line_end":794,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303927,"byte_end":303930,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *same* argument order as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303932,"byte_end":303979,"line_start":796,"line_end":796,"column_start":2,"column_end":49}},{"value":"/ [`ptr::copy_nonoverlapping`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":303981,"byte_end":304014,"line_start":797,"line_end":797,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304016,"byte_end":304019,"line_start":798,"line_end":798,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304021,"byte_end":304035,"line_start":799,"line_end":799,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304037,"byte_end":304040,"line_start":800,"line_end":800,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304042,"byte_end":304165,"line_start":801,"line_end":801,"column_start":2,"column_end":125}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304167,"byte_end":304170,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304172,"byte_end":304184,"line_start":803,"line_end":803,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304186,"byte_end":304189,"line_start":804,"line_end":804,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304191,"byte_end":304261,"line_start":805,"line_end":805,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304263,"byte_end":304266,"line_start":806,"line_end":806,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy_nonoverlapping`](crate::ptr::copy_nonoverlapping)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304268,"byte_end":304333,"line_start":807,"line_end":807,"column_start":2,"column_end":67}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304335,"byte_end":304344,"line_start":808,"line_end":808,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1825},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306581,"byte_end":306593,"line_start":874,"line_end":874,"column_start":9,"column_end":21},"name":"align_offset","qualname":"<BitPtr<M, O, T>>::align_offset","value":"pub fn align_offset(Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the offset (in bits) that needs to be applied to the pointer in\n order to make it aligned to `align`.","sig":null,"attributes":[{"value":"/ Computes the offset (in bits) that needs to be applied to the pointer in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304587,"byte_end":304663,"line_start":822,"line_end":822,"column_start":2,"column_end":78}},{"value":"/ order to make it aligned to `align`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304665,"byte_end":304705,"line_start":823,"line_end":823,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304707,"byte_end":304710,"line_start":824,"line_end":824,"column_start":2,"column_end":5}},{"value":"/ “Alignment” here means that the pointer is selecting the start bit of a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304712,"byte_end":304791,"line_start":825,"line_end":825,"column_start":2,"column_end":77}},{"value":"/ memory location whose address satisfies the requested alignment.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304793,"byte_end":304861,"line_start":826,"line_end":826,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304863,"byte_end":304866,"line_start":827,"line_end":827,"column_start":2,"column_end":5}},{"value":"/ `align` is measured in **bytes**. If you wish to align your bit-pointer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304868,"byte_end":304943,"line_start":828,"line_end":828,"column_start":2,"column_end":77}},{"value":"/ to a specific fraction (½, ¼, or ⅛ of one byte), please file an issue","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":304945,"byte_end":305022,"line_start":829,"line_end":829,"column_start":2,"column_end":75}},{"value":"/ and this functionality will be added to [`BitIdx`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305024,"byte_end":305079,"line_start":830,"line_end":830,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305081,"byte_end":305084,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305086,"byte_end":305100,"line_start":832,"line_end":832,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305102,"byte_end":305105,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ [`pointer::align_offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305107,"byte_end":305210,"line_start":834,"line_end":834,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305212,"byte_end":305215,"line_start":835,"line_end":835,"column_start":2,"column_end":5}},{"value":"/ If the base-element address of the pointer is already aligned to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305217,"byte_end":305285,"line_start":836,"line_end":836,"column_start":2,"column_end":70}},{"value":"/ `align`, then this will return the bit-offset required to select the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305287,"byte_end":305359,"line_start":837,"line_end":837,"column_start":2,"column_end":74}},{"value":"/ first bit of the successor element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305361,"byte_end":305400,"line_start":838,"line_end":838,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305402,"byte_end":305405,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ If it is not possible to align the pointer, the implementation returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305407,"byte_end":305481,"line_start":840,"line_end":840,"column_start":2,"column_end":76}},{"value":"/ `usize::MAX`. It is permissible for the implementation to *always*","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305483,"byte_end":305553,"line_start":841,"line_end":841,"column_start":2,"column_end":72}},{"value":"/ return `usize::MAX`. Only your algorithm’s performance can depend on","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305555,"byte_end":305629,"line_start":842,"line_end":842,"column_start":2,"column_end":74}},{"value":"/ getting a usable offset here, not its correctness.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305631,"byte_end":305685,"line_start":843,"line_end":843,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305687,"byte_end":305690,"line_start":844,"line_end":844,"column_start":2,"column_end":5}},{"value":"/ The offset is expressed in number of bits, and not `T` elements or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305692,"byte_end":305762,"line_start":845,"line_end":845,"column_start":2,"column_end":72}},{"value":"/ bytes. The value returned can be used with the [`wrapping_add`] method.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305764,"byte_end":305839,"line_start":846,"line_end":846,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305841,"byte_end":305844,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305846,"byte_end":305858,"line_start":848,"line_end":848,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305860,"byte_end":305863,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ There are no guarantees whatsoëver that offsetting the pointer will not","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305865,"byte_end":305941,"line_start":850,"line_end":850,"column_start":2,"column_end":77}},{"value":"/ overflow or go beyond the allocation that the pointer points into. It is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":305943,"byte_end":306019,"line_start":851,"line_end":851,"column_start":2,"column_end":78}},{"value":"/ up to the caller to ensure that the returned offset is correct in all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306021,"byte_end":306094,"line_start":852,"line_end":852,"column_start":2,"column_end":75}},{"value":"/ terms other than alignment.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306096,"byte_end":306127,"line_start":853,"line_end":853,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306129,"byte_end":306132,"line_start":854,"line_end":854,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306134,"byte_end":306146,"line_start":855,"line_end":855,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306148,"byte_end":306151,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ The function panics if `align` is not a power-of-two.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306153,"byte_end":306210,"line_start":857,"line_end":857,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306212,"byte_end":306215,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306217,"byte_end":306231,"line_start":859,"line_end":859,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306233,"byte_end":306236,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306238,"byte_end":306249,"line_start":861,"line_end":861,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306251,"byte_end":306278,"line_start":862,"line_end":862,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306280,"byte_end":306283,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306285,"byte_end":306309,"line_start":864,"line_end":864,"column_start":2,"column_end":26}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data[0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306311,"byte_end":306366,"line_start":865,"line_end":865,"column_start":2,"column_end":57}},{"value":"/ let ptr = unsafe { ptr.add(2) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306368,"byte_end":306404,"line_start":866,"line_end":866,"column_start":2,"column_end":38}},{"value":"/ let count = ptr.align_offset(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306406,"byte_end":306442,"line_start":867,"line_end":867,"column_start":2,"column_end":38}},{"value":"/ assert!(count > 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306444,"byte_end":306467,"line_start":868,"line_end":868,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306469,"byte_end":306476,"line_start":869,"line_end":869,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306478,"byte_end":306481,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306483,"byte_end":306519,"line_start":871,"line_end":871,"column_start":2,"column_end":38}},{"value":"/ [`wrapping_add`]: Self::wrapping_add","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306521,"byte_end":306561,"line_start":872,"line_end":872,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306563,"byte_end":306572,"line_start":873,"line_end":873,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307230,"byte_end":307238,"line_start":903,"line_end":903,"column_start":9,"column_end":17},"name":"from_ref","qualname":"<BitPtr<Const, O, T>>::from_ref","value":"pub fn from_ref(&T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from an element reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from an element reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306991,"byte_end":307043,"line_start":893,"line_end":893,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307045,"byte_end":307048,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307050,"byte_end":307066,"line_start":895,"line_end":895,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307068,"byte_end":307071,"line_start":896,"line_end":896,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A borrowed memory element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307073,"byte_end":307113,"line_start":897,"line_end":897,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307115,"byte_end":307118,"line_start":898,"line_end":898,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307120,"byte_end":307133,"line_start":899,"line_end":899,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307135,"byte_end":307138,"line_start":900,"line_end":900,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the `*elem` location.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307140,"byte_end":307210,"line_start":901,"line_end":901,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307212,"byte_end":307221,"line_start":902,"line_end":902,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307625,"byte_end":307633,"line_start":919,"line_end":919,"column_start":9,"column_end":17},"name":"from_ptr","qualname":"<BitPtr<Const, O, T>>::from_ptr","value":"pub fn from_ptr(*const T) -> Result<Self, BitPtrError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct a `BitPtr` from an element location.","sig":null,"attributes":[{"value":"/ Attempts to construct a `BitPtr` from an element location.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307303,"byte_end":307365,"line_start":907,"line_end":907,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307367,"byte_end":307370,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307372,"byte_end":307388,"line_start":909,"line_end":909,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307390,"byte_end":307393,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A read-only element address.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307395,"byte_end":307437,"line_start":911,"line_end":911,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307439,"byte_end":307442,"line_start":912,"line_end":912,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307444,"byte_end":307457,"line_start":913,"line_end":913,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307459,"byte_end":307462,"line_start":914,"line_end":914,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the `*elem` location, if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307464,"byte_end":307537,"line_start":915,"line_end":915,"column_start":2,"column_end":75}},{"value":"/ `elem` is well-formed.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307539,"byte_end":307565,"line_start":916,"line_end":916,"column_start":2,"column_end":28}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307567,"byte_end":307584,"line_start":917,"line_end":917,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307586,"byte_end":307616,"line_start":918,"line_end":918,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308573,"byte_end":308583,"line_start":947,"line_end":947,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitPtr<Const, O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a slice reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a slice reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307714,"byte_end":307763,"line_start":923,"line_end":923,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307765,"byte_end":307768,"line_start":924,"line_end":924,"column_start":2,"column_end":5}},{"value":"/ This differs from [`from_ref`] in that the returned pointer keeps its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307770,"byte_end":307843,"line_start":925,"line_end":925,"column_start":2,"column_end":75}},{"value":"/ provenance over the entire slice, whereas producing a pointer to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307845,"byte_end":307917,"line_start":926,"line_end":926,"column_start":2,"column_end":74}},{"value":"/ base bit of a slice with `BitPtr::from_ref(&slice[0])` narrows its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307919,"byte_end":307989,"line_start":927,"line_end":927,"column_start":2,"column_end":72}},{"value":"/ provenance to only the `slice[0]` element, and calling [`add`] to leave","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":307991,"byte_end":308066,"line_start":928,"line_end":928,"column_start":2,"column_end":77}},{"value":"/ that element, even remaining in the slice, may cause UB.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308068,"byte_end":308128,"line_start":929,"line_end":929,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308130,"byte_end":308133,"line_start":930,"line_end":930,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308135,"byte_end":308151,"line_start":931,"line_end":931,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308153,"byte_end":308156,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An immutabily borrowed slice of memory.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308158,"byte_end":308212,"line_start":933,"line_end":933,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308214,"byte_end":308217,"line_start":934,"line_end":934,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308219,"byte_end":308232,"line_start":935,"line_end":935,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308234,"byte_end":308237,"line_start":936,"line_end":936,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the base location of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308239,"byte_end":308312,"line_start":937,"line_end":937,"column_start":2,"column_end":75}},{"value":"/ slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308314,"byte_end":308324,"line_start":938,"line_end":938,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308326,"byte_end":308329,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ This pointer has provenance over the entire `slice`, and may safely use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308331,"byte_end":308406,"line_start":940,"line_end":940,"column_start":2,"column_end":77}},{"value":"/ [`add`] to traverse memory elements as long as it stays within the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308408,"byte_end":308478,"line_start":941,"line_end":941,"column_start":2,"column_end":72}},{"value":"/ slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308480,"byte_end":308490,"line_start":942,"line_end":942,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308492,"byte_end":308495,"line_start":943,"line_end":943,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308497,"byte_end":308519,"line_start":944,"line_end":944,"column_start":2,"column_end":24}},{"value":"/ [`from_ref`]: Self::from_ref","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308521,"byte_end":308553,"line_start":945,"line_end":945,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308555,"byte_end":308564,"line_start":946,"line_end":946,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1832},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308812,"byte_end":308819,"line_start":955,"line_end":955,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Const, O, T>>::pointer","value":"pub fn pointer(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Gets the pointer to the base memory location containing the referent\n bit.\n","sig":null,"attributes":[{"value":"/ Gets the pointer to the base memory location containing the referent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308678,"byte_end":308750,"line_start":951,"line_end":951,"column_start":2,"column_end":74}},{"value":"/ bit.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308752,"byte_end":308760,"line_start":952,"line_end":952,"column_start":2,"column_end":10}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308762,"byte_end":308771,"line_start":953,"line_end":953,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308773,"byte_end":308803,"line_start":954,"line_end":954,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1836},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309642,"byte_end":309650,"line_start":986,"line_end":986,"column_start":9,"column_end":17},"name":"from_mut","qualname":"<BitPtr<Mut, O, T>>::from_mut","value":"pub fn from_mut(&mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from an element reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from an element reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308942,"byte_end":308994,"line_start":965,"line_end":965,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308996,"byte_end":308999,"line_start":966,"line_end":966,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309001,"byte_end":309017,"line_start":967,"line_end":967,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309019,"byte_end":309022,"line_start":968,"line_end":968,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A mutably borrowed memory element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309024,"byte_end":309072,"line_start":969,"line_end":969,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309074,"byte_end":309077,"line_start":970,"line_end":970,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309079,"byte_end":309092,"line_start":971,"line_end":971,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309094,"byte_end":309097,"line_start":972,"line_end":972,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the `*elem` location.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309099,"byte_end":309173,"line_start":973,"line_end":973,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309175,"byte_end":309178,"line_start":974,"line_end":974,"column_start":2,"column_end":5}},{"value":"/ Note that even if `elem` is an address within a contiguous array or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309180,"byte_end":309251,"line_start":975,"line_end":975,"column_start":2,"column_end":73}},{"value":"/ slice, the returned bit-pointer only has provenance for the `elem`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309253,"byte_end":309323,"line_start":976,"line_end":976,"column_start":2,"column_end":72}},{"value":"/ location, and no other.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309325,"byte_end":309352,"line_start":977,"line_end":977,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309354,"byte_end":309357,"line_start":978,"line_end":978,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309359,"byte_end":309371,"line_start":979,"line_end":979,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309373,"byte_end":309376,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ The exclusive borrow of `elem` is released after this function returns.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309378,"byte_end":309453,"line_start":981,"line_end":981,"column_start":2,"column_end":77}},{"value":"/ However, you must not use any other pointer than that returned by this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309455,"byte_end":309529,"line_start":982,"line_end":982,"column_start":2,"column_end":76}},{"value":"/ function to view or modify `*elem`, unless the `T` type supports aliased","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309531,"byte_end":309607,"line_start":983,"line_end":983,"column_start":2,"column_end":78}},{"value":"/ mutation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309609,"byte_end":309622,"line_start":984,"line_end":984,"column_start":2,"column_end":15}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309624,"byte_end":309633,"line_start":985,"line_end":985,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310049,"byte_end":310061,"line_start":1002,"line_end":1002,"column_start":9,"column_end":21},"name":"from_mut_ptr","qualname":"<BitPtr<Mut, O, T>>::from_mut_ptr","value":"pub fn from_mut_ptr(*mut T) -> Result<Self, BitPtrError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct a `BitPtr` from an element location.","sig":null,"attributes":[{"value":"/ Attempts to construct a `BitPtr` from an element location.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309719,"byte_end":309781,"line_start":990,"line_end":990,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309783,"byte_end":309786,"line_start":991,"line_end":991,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309788,"byte_end":309804,"line_start":992,"line_end":992,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309806,"byte_end":309809,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A write-capable element address.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309811,"byte_end":309857,"line_start":994,"line_end":994,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309859,"byte_end":309862,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309864,"byte_end":309877,"line_start":996,"line_end":996,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309879,"byte_end":309882,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the `*elem` location,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309884,"byte_end":309958,"line_start":998,"line_end":998,"column_start":2,"column_end":76}},{"value":"/ if `elem` is well-formed.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309960,"byte_end":309989,"line_start":999,"line_end":999,"column_start":2,"column_end":31}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":309991,"byte_end":310008,"line_start":1000,"line_end":1000,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310010,"byte_end":310040,"line_start":1001,"line_end":1001,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311004,"byte_end":311018,"line_start":1030,"line_end":1030,"column_start":9,"column_end":23},"name":"from_mut_slice","qualname":"<BitPtr<Mut, O, T>>::from_mut_slice","value":"pub fn from_mut_slice(&mut [T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a slice reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a slice reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310140,"byte_end":310189,"line_start":1006,"line_end":1006,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310191,"byte_end":310194,"line_start":1007,"line_end":1007,"column_start":2,"column_end":5}},{"value":"/ This differs from [`from_mut`] in that the returned pointer keeps its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310196,"byte_end":310269,"line_start":1008,"line_end":1008,"column_start":2,"column_end":75}},{"value":"/ provenance over the entire slice, whereas producing a pointer to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310271,"byte_end":310343,"line_start":1009,"line_end":1009,"column_start":2,"column_end":74}},{"value":"/ base bit of a slice with `BitPtr::from_mut(&mut slice[0])` narrows its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310345,"byte_end":310419,"line_start":1010,"line_end":1010,"column_start":2,"column_end":76}},{"value":"/ provenance to only the `slice[0]` element, and calling [`add`] to leave","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310421,"byte_end":310496,"line_start":1011,"line_end":1011,"column_start":2,"column_end":77}},{"value":"/ that element, even remaining in the slice, may cause UB.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310498,"byte_end":310558,"line_start":1012,"line_end":1012,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310560,"byte_end":310563,"line_start":1013,"line_end":1013,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310565,"byte_end":310581,"line_start":1014,"line_end":1014,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310583,"byte_end":310586,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A mutabily borrowed slice of memory.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310588,"byte_end":310639,"line_start":1016,"line_end":1016,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310641,"byte_end":310644,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310646,"byte_end":310659,"line_start":1018,"line_end":1018,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310661,"byte_end":310664,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the base location of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310666,"byte_end":310739,"line_start":1020,"line_end":1020,"column_start":2,"column_end":75}},{"value":"/ the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310741,"byte_end":310755,"line_start":1021,"line_end":1021,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310757,"byte_end":310760,"line_start":1022,"line_end":1022,"column_start":2,"column_end":5}},{"value":"/ This pointer has provenance over the entire `slice`, and may safely use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310762,"byte_end":310837,"line_start":1023,"line_end":1023,"column_start":2,"column_end":77}},{"value":"/ [`add`] to traverse memory elements as long as it stays within the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310839,"byte_end":310909,"line_start":1024,"line_end":1024,"column_start":2,"column_end":72}},{"value":"/ slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310911,"byte_end":310921,"line_start":1025,"line_end":1025,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310923,"byte_end":310926,"line_start":1026,"line_end":1026,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310928,"byte_end":310950,"line_start":1027,"line_end":1027,"column_start":2,"column_end":24}},{"value":"/ [`from_mut`]: Self::from_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310952,"byte_end":310984,"line_start":1028,"line_end":1028,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":310986,"byte_end":310995,"line_start":1029,"line_end":1029,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311255,"byte_end":311262,"line_start":1038,"line_end":1038,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Mut, O, T>>::pointer","value":"pub fn pointer(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets the pointer to the base memory location containing the referent\n bit.\n","sig":null,"attributes":[{"value":"/ Gets the pointer to the base memory location containing the referent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311121,"byte_end":311193,"line_start":1034,"line_end":1034,"column_start":2,"column_end":74}},{"value":"/ bit.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311195,"byte_end":311203,"line_start":1035,"line_end":1035,"column_start":2,"column_end":10}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311205,"byte_end":311214,"line_start":1036,"line_end":1036,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311216,"byte_end":311246,"line_start":1037,"line_end":1037,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312977,"byte_end":312983,"line_start":1091,"line_end":1091,"column_start":16,"column_end":22},"name":"as_mut","qualname":"<BitPtr<Mut, O, T>>::as_mut","value":"pub unsafe fn as_mut<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy mutable reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy mutable reference to the referent bit.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311355,"byte_end":311414,"line_start":1044,"line_end":1044,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311416,"byte_end":311419,"line_start":1045,"line_end":1045,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` is a non-null, well-aligned, pointer, this never","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311421,"byte_end":311490,"line_start":1046,"line_end":1046,"column_start":2,"column_end":71}},{"value":"/ returns `None`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311492,"byte_end":311511,"line_start":1047,"line_end":1047,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311513,"byte_end":311516,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311518,"byte_end":311532,"line_start":1049,"line_end":1049,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311534,"byte_end":311537,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_mut`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311539,"byte_end":311630,"line_start":1051,"line_end":1051,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311632,"byte_end":311635,"line_start":1052,"line_end":1052,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311637,"byte_end":311658,"line_start":1053,"line_end":1053,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311660,"byte_end":311663,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311665,"byte_end":311735,"line_start":1055,"line_end":1055,"column_start":2,"column_end":72}},{"value":"/ implements `DerefMut<Target = bool>`, and can be converted to `&mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311737,"byte_end":311808,"line_start":1056,"line_end":1056,"column_start":2,"column_end":73}},{"value":"/ bool` with `&mut *`. Writes to the proxy are not reflected in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311810,"byte_end":311879,"line_start":1057,"line_end":1057,"column_start":2,"column_end":71}},{"value":"/ proxied location until the proxy is destroyed, either through `Drop` or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311881,"byte_end":311956,"line_start":1058,"line_end":1058,"column_start":2,"column_end":77}},{"value":"/ with its [`set`] method.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311958,"byte_end":311986,"line_start":1059,"line_end":1059,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311988,"byte_end":311991,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ The proxy must be bound as `mut` in order to write through the binding.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":311993,"byte_end":312068,"line_start":1061,"line_end":1061,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312070,"byte_end":312073,"line_start":1062,"line_end":1062,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312075,"byte_end":312087,"line_start":1063,"line_end":1063,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312089,"byte_end":312092,"line_start":1064,"line_end":1064,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312094,"byte_end":312169,"line_start":1065,"line_end":1065,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer and you must ensure the following","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312171,"byte_end":312244,"line_start":1066,"line_end":1066,"column_start":2,"column_end":75}},{"value":"/ conditions are met:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312246,"byte_end":312269,"line_start":1067,"line_end":1067,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312271,"byte_end":312274,"line_start":1068,"line_end":1068,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferencable as defined in the standard library","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312276,"byte_end":312351,"line_start":1069,"line_end":1069,"column_start":2,"column_end":77}},{"value":"/   documentation","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312353,"byte_end":312372,"line_start":1070,"line_end":1070,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312374,"byte_end":312436,"line_start":1071,"line_end":1071,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312438,"byte_end":312514,"line_start":1072,"line_end":1072,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312516,"byte_end":312590,"line_start":1073,"line_end":1073,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312592,"byte_end":312595,"line_start":1074,"line_end":1074,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312597,"byte_end":312611,"line_start":1075,"line_end":1075,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312613,"byte_end":312616,"line_start":1076,"line_end":1076,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312618,"byte_end":312629,"line_start":1077,"line_end":1077,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312631,"byte_end":312658,"line_start":1078,"line_end":1078,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312660,"byte_end":312663,"line_start":1079,"line_end":1079,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312665,"byte_end":312688,"line_start":1080,"line_end":1080,"column_start":2,"column_end":25}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312690,"byte_end":312746,"line_start":1081,"line_end":1081,"column_start":2,"column_end":58}},{"value":"/ let mut val = unsafe { ptr.as_mut() }.unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312748,"byte_end":312799,"line_start":1082,"line_end":1082,"column_start":2,"column_end":53}},{"value":"/ assert!(!*val);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312801,"byte_end":312820,"line_start":1083,"line_end":1083,"column_start":2,"column_end":21}},{"value":"/ *val = true;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312822,"byte_end":312838,"line_start":1084,"line_end":1084,"column_start":2,"column_end":18}},{"value":"/ assert!(*val);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312840,"byte_end":312858,"line_start":1085,"line_end":1085,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312860,"byte_end":312867,"line_start":1086,"line_end":1086,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312869,"byte_end":312872,"line_start":1087,"line_end":1087,"column_start":2,"column_end":5}},{"value":"/ [`set`]: crate::ptr::BitRef::set","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312874,"byte_end":312910,"line_start":1088,"line_end":1088,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312912,"byte_end":312929,"line_start":1089,"line_end":1089,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":312931,"byte_end":312961,"line_start":1090,"line_end":1090,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313546,"byte_end":313555,"line_start":1111,"line_end":1111,"column_start":16,"column_end":25},"name":"copy_from","qualname":"<BitPtr<Mut, O, T>>::copy_from","value":"pub unsafe fn copy_from<O2, T2>(Self, BitPtr<Const, O2, T2>, usize) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `self`. The source and destination may\n overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `self`. The source and destination may","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313068,"byte_end":313144,"line_start":1095,"line_end":1095,"column_start":2,"column_end":78}},{"value":"/ overlap.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313146,"byte_end":313158,"line_start":1096,"line_end":1096,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313160,"byte_end":313163,"line_start":1097,"line_end":1097,"column_start":2,"column_end":5}},{"value":"/ Note: this has the *opposite* argument order of [`ptr::copy`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313165,"byte_end":313231,"line_start":1098,"line_end":1098,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313233,"byte_end":313236,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313238,"byte_end":313252,"line_start":1100,"line_end":1100,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313254,"byte_end":313257,"line_start":1101,"line_end":1101,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313259,"byte_end":313356,"line_start":1102,"line_end":1102,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313358,"byte_end":313361,"line_start":1103,"line_end":1103,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313363,"byte_end":313375,"line_start":1104,"line_end":1104,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313377,"byte_end":313380,"line_start":1105,"line_end":1105,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313382,"byte_end":313437,"line_start":1106,"line_end":1106,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313439,"byte_end":313442,"line_start":1107,"line_end":1107,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy`]: crate::ptr::copy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313444,"byte_end":313479,"line_start":1108,"line_end":1108,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313481,"byte_end":313498,"line_start":1109,"line_end":1109,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313500,"byte_end":313530,"line_start":1110,"line_end":1110,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1845},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314275,"byte_end":314299,"line_start":1139,"line_end":1139,"column_start":16,"column_end":40},"name":"copy_from_nonoverlapping","qualname":"<BitPtr<Mut, O, T>>::copy_from_nonoverlapping","value":"pub unsafe fn copy_from_nonoverlapping<O2,\n                                       T2>(Self, BitPtr<Const, O2, T2>, usize)\nwhere O2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `self`. The source and destination may\n *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `self`. The source and destination may","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313696,"byte_end":313772,"line_start":1122,"line_end":1122,"column_start":2,"column_end":78}},{"value":"/ *not* overlap.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313774,"byte_end":313792,"line_start":1123,"line_end":1123,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313794,"byte_end":313797,"line_start":1124,"line_end":1124,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *opposite* argument order of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313799,"byte_end":313850,"line_start":1125,"line_end":1125,"column_start":2,"column_end":53}},{"value":"/ [`ptr::copy_nonoverlapping`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313852,"byte_end":313885,"line_start":1126,"line_end":1126,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313887,"byte_end":313890,"line_start":1127,"line_end":1127,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313892,"byte_end":313906,"line_start":1128,"line_end":1128,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313908,"byte_end":313911,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from_nonoverlapping)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":313913,"byte_end":314040,"line_start":1130,"line_end":1130,"column_start":2,"column_end":129}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314042,"byte_end":314045,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314047,"byte_end":314059,"line_start":1132,"line_end":1132,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314061,"byte_end":314064,"line_start":1133,"line_end":1133,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314066,"byte_end":314136,"line_start":1134,"line_end":1134,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314138,"byte_end":314141,"line_start":1135,"line_end":1135,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314143,"byte_end":314208,"line_start":1136,"line_end":1136,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314210,"byte_end":314227,"line_start":1137,"line_end":1137,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314229,"byte_end":314259,"line_start":1138,"line_end":1138,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314804,"byte_end":314809,"line_start":1161,"line_end":1161,"column_start":16,"column_end":21},"name":"write","qualname":"<BitPtr<Mut, O, T>>::write","value":"pub unsafe fn write(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given bit.","sig":null,"attributes":[{"value":"/ Overwrites a memory location with the given bit.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314455,"byte_end":314507,"line_start":1150,"line_end":1150,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314509,"byte_end":314512,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314514,"byte_end":314570,"line_start":1152,"line_end":1152,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314572,"byte_end":314575,"line_start":1153,"line_end":1153,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314577,"byte_end":314591,"line_start":1154,"line_end":1154,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314593,"byte_end":314596,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314598,"byte_end":314687,"line_start":1156,"line_end":1156,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314689,"byte_end":314692,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write`]: crate::ptr::write","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314694,"byte_end":314731,"line_start":1158,"line_end":1158,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314733,"byte_end":314742,"line_start":1159,"line_end":1159,"column_start":2,"column_end":11}},{"value":"allow(clippy :: clippy :: missing_safety_doc)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314744,"byte_end":314788,"line_start":1160,"line_end":1160,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1849},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315760,"byte_end":315774,"line_start":1187,"line_end":1187,"column_start":16,"column_end":30},"name":"write_volatile","qualname":"<BitPtr<Mut, O, T>>::write_volatile","value":"pub unsafe fn write_volatile(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given bit.","sig":null,"attributes":[{"value":"/ Performs a volatile write of a memory location with the given bit.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314859,"byte_end":314929,"line_start":1165,"line_end":1165,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314931,"byte_end":314934,"line_start":1166,"line_end":1166,"column_start":2,"column_end":5}},{"value":"/ Because processors do not have single-bit write instructions, this must","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":314936,"byte_end":315011,"line_start":1167,"line_end":1167,"column_start":2,"column_end":77}},{"value":"/ perform a volatile read of the location, perform the bit modification","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315013,"byte_end":315086,"line_start":1168,"line_end":1168,"column_start":2,"column_end":75}},{"value":"/ within the processor register, and then perform a volatile write back to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315088,"byte_end":315164,"line_start":1169,"line_end":1169,"column_start":2,"column_end":78}},{"value":"/ memory. These three steps are guaranteed to be sequential, but are not","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315166,"byte_end":315240,"line_start":1170,"line_end":1170,"column_start":2,"column_end":76}},{"value":"/ guaranteed to be atomic.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315242,"byte_end":315270,"line_start":1171,"line_end":1171,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315272,"byte_end":315275,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ Volatile operations are intended to act on I/O memory, and are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315277,"byte_end":315343,"line_start":1173,"line_end":1173,"column_start":2,"column_end":68}},{"value":"/ guaranteed to not be elided or reördered by the compiler across other","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315345,"byte_end":315419,"line_start":1174,"line_end":1174,"column_start":2,"column_end":75}},{"value":"/ volatile operations.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315421,"byte_end":315445,"line_start":1175,"line_end":1175,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315447,"byte_end":315450,"line_start":1176,"line_end":1176,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315452,"byte_end":315466,"line_start":1177,"line_end":1177,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315468,"byte_end":315471,"line_start":1178,"line_end":1178,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write_volatile)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315473,"byte_end":315580,"line_start":1179,"line_end":1179,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315582,"byte_end":315585,"line_start":1180,"line_end":1180,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315587,"byte_end":315599,"line_start":1181,"line_end":1181,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315601,"byte_end":315604,"line_start":1182,"line_end":1182,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write_volatile`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315606,"byte_end":315671,"line_start":1183,"line_end":1183,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315673,"byte_end":315676,"line_start":1184,"line_end":1184,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write_volatile`]: crate::ptr::write_volatile","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315678,"byte_end":315733,"line_start":1185,"line_end":1185,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":315735,"byte_end":315744,"line_start":1186,"line_end":1186,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316375,"byte_end":316382,"line_start":1212,"line_end":1212,"column_start":16,"column_end":23},"name":"replace","qualname":"<BitPtr<Mut, O, T>>::replace","value":"pub unsafe fn replace(Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Replaces the bit at `*self` with `src`, returning the old bit.","sig":null,"attributes":[{"value":"/ Replaces the bit at `*self` with `src`, returning the old bit.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316029,"byte_end":316095,"line_start":1200,"line_end":1200,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316097,"byte_end":316100,"line_start":1201,"line_end":1201,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316102,"byte_end":316116,"line_start":1202,"line_end":1202,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316118,"byte_end":316121,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ [`pointer::replace`](https://doc.rust-lang.org/std/primitive.pointer.html#method.replace)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316123,"byte_end":316216,"line_start":1204,"line_end":1204,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316218,"byte_end":316221,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316223,"byte_end":316235,"line_start":1206,"line_end":1206,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316237,"byte_end":316240,"line_start":1207,"line_end":1207,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::replace`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316242,"byte_end":316300,"line_start":1208,"line_end":1208,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316302,"byte_end":316305,"line_start":1209,"line_end":1209,"column_start":2,"column_end":5}},{"value":"/ [`ptr::replace`]: crate::ptr::replace","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316307,"byte_end":316348,"line_start":1210,"line_end":1210,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316350,"byte_end":316359,"line_start":1211,"line_end":1211,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316780,"byte_end":316784,"line_start":1228,"line_end":1228,"column_start":16,"column_end":20},"name":"swap","qualname":"<BitPtr<Mut, O, T>>::swap","value":"pub unsafe fn swap<O2, T2>(Self, BitPtr<Mut, O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bits at two mutable locations. They may overlap.","sig":null,"attributes":[{"value":"/ Swaps the bits at two mutable locations. They may overlap.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316453,"byte_end":316515,"line_start":1216,"line_end":1216,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316517,"byte_end":316520,"line_start":1217,"line_end":1217,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316522,"byte_end":316536,"line_start":1218,"line_end":1218,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316538,"byte_end":316541,"line_start":1219,"line_end":1219,"column_start":2,"column_end":5}},{"value":"/ [`pointer::swap`](https://doc.rust-lang.org/std/primitive.pointer.html#method.swap)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316543,"byte_end":316630,"line_start":1220,"line_end":1220,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316632,"byte_end":316635,"line_start":1221,"line_end":1221,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316637,"byte_end":316649,"line_start":1222,"line_end":1222,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316651,"byte_end":316654,"line_start":1223,"line_end":1223,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::swap`] for safety concerns and examples.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316656,"byte_end":316711,"line_start":1224,"line_end":1224,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316713,"byte_end":316716,"line_start":1225,"line_end":1225,"column_start":2,"column_end":5}},{"value":"/ [`ptr::swap`]: crate::ptr::swap","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316718,"byte_end":316753,"line_start":1226,"line_end":1226,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316755,"byte_end":316764,"line_start":1227,"line_end":1227,"column_start":2,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5495},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321396,"byte_end":321400,"line_start":1461,"line_end":1461,"column_start":2,"column_end":6},"name":"Null","qualname":"::ptr::single::BitPtrError::Null","value":"BitPtrError::Null(NullPtrError)","parent":{"krate":0,"index":5493},"children":[],"decl_id":null,"docs":" The null address was provided.\n","sig":null,"attributes":[{"value":"/ The null address was provided.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321360,"byte_end":321394,"line_start":1460,"line_end":1460,"column_start":2,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5498},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321471,"byte_end":321481,"line_start":1463,"line_end":1463,"column_start":2,"column_end":12},"name":"Misaligned","qualname":"::ptr::single::BitPtrError::Misaligned","value":"BitPtrError::Misaligned(MisalignError<T>)","parent":{"krate":0,"index":5493},"children":[],"decl_id":null,"docs":" The address was misaligned for the element type.\n","sig":null,"attributes":[{"value":"/ The address was misaligned for the element type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321417,"byte_end":321469,"line_start":1462,"line_end":1462,"column_start":2,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5501},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321555,"byte_end":321563,"line_start":1465,"line_end":1465,"column_start":2,"column_end":10},"name":"BadIndex","qualname":"::ptr::single::BitPtrError::BadIndex","value":"BitPtrError::BadIndex(BitIdxError<T::Mem>)","parent":{"krate":0,"index":5493},"children":[],"decl_id":null,"docs":" The bit index was invalid for the element type.\n","sig":null,"attributes":[{"value":"/ The bit index was invalid for the element type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321502,"byte_end":321553,"line_start":1464,"line_end":1464,"column_start":2,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":5493},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321324,"byte_end":321335,"line_start":1457,"line_end":1457,"column_start":10,"column_end":21},"name":"BitPtrError","qualname":"::ptr::single::BitPtrError","value":"pub enum BitPtrError<T> where T: BitStore {\n    Null(NullPtrError),\n    Misaligned(MisalignError<T>),\n    BadIndex(BitIdxError<T::Mem>),\n}","parent":null,"children":[{"krate":0,"index":5495},{"krate":0,"index":5498},{"krate":0,"index":5501}],"decl_id":null,"docs":" Errors produced by invalid bit-pointer components.\n","sig":null,"attributes":[{"value":"/ Errors produced by invalid bit-pointer components.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321192,"byte_end":321246,"line_start":1455,"line_end":1455,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5535},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355711,"byte_end":355724,"line_start":1079,"line_end":1079,"column_start":2,"column_end":15},"name":"InvalidBitptr","qualname":"::ptr::span::BitSpanError::InvalidBitptr","value":"BitSpanError::InvalidBitptr(BitPtrError<T>)","parent":{"krate":0,"index":5533},"children":[],"decl_id":null,"docs":" The base `BitPtr` is invalid.\n","sig":null,"attributes":[{"value":"/ The base `BitPtr` is invalid.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355676,"byte_end":355709,"line_start":1078,"line_end":1078,"column_start":2,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5538},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355789,"byte_end":355796,"line_start":1081,"line_end":1081,"column_start":2,"column_end":9},"name":"TooLong","qualname":"::ptr::span::BitSpanError::TooLong","value":"BitSpanError::TooLong(usize)","parent":{"krate":0,"index":5533},"children":[],"decl_id":null,"docs":" `BitSpan` domains have a length ceiling.\n","sig":null,"attributes":[{"value":"/ `BitSpan` domains have a length ceiling.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355743,"byte_end":355787,"line_start":1080,"line_end":1080,"column_start":2,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5541},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355854,"byte_end":355861,"line_start":1083,"line_end":1083,"column_start":2,"column_end":9},"name":"TooHigh","qualname":"::ptr::span::BitSpanError::TooHigh","value":"BitSpanError::TooHigh(*const T)","parent":{"krate":0,"index":5533},"children":[],"decl_id":null,"docs":" `BitSpan` domains have an address ceiling.\n","sig":null,"attributes":[{"value":"/ `BitSpan` domains have an address ceiling.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355806,"byte_end":355852,"line_start":1082,"line_end":1082,"column_start":2,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":5533},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355639,"byte_end":355651,"line_start":1075,"line_end":1075,"column_start":10,"column_end":22},"name":"BitSpanError","qualname":"::ptr::span::BitSpanError","value":"pub enum BitSpanError<T> where T: BitStore {\n    InvalidBitptr(BitPtrError<T>),\n    TooLong(usize),\n    TooHigh(*const T),\n}","parent":null,"children":[{"krate":0,"index":5535},{"krate":0,"index":5538},{"krate":0,"index":5541}],"decl_id":null,"docs":" An error produced when creating `BitSpan` encoded references.\n","sig":null,"attributes":[{"value":"/ An error produced when creating `BitSpan` encoded references.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355509,"byte_end":355574,"line_start":1073,"line_end":1073,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2190},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239238,"byte_end":239242,"line_start":194,"line_end":194,"column_start":15,"column_end":19},"name":"copy","qualname":"::ptr::copy","value":"pub unsafe fn copy<O1, O2, T1,\n                   T2>(BitPtr<Const, O1, T1>, BitPtr<Mut, O2, T2>, usize)\nwhere O1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `dst`. The source and destination may\n overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `dst`. The source and destination may","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237121,"byte_end":237196,"line_start":122,"line_end":122,"column_start":1,"column_end":76}},{"value":"/ overlap.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237197,"byte_end":237209,"line_start":123,"line_end":123,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237210,"byte_end":237213,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ If the source and destination will *never* overlap, [`copy_nonoverlapping`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237214,"byte_end":237293,"line_start":125,"line_end":125,"column_start":1,"column_end":80}},{"value":"/ can be used instead.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237294,"byte_end":237318,"line_start":126,"line_end":126,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237319,"byte_end":237322,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ `copy` is semantically equivalent to C’s [`memmove`], but with the argument","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237323,"byte_end":237404,"line_start":128,"line_end":128,"column_start":1,"column_end":80}},{"value":"/ order swapped. Copying takes place as if the bits were copied from `src` to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237405,"byte_end":237484,"line_start":129,"line_end":129,"column_start":1,"column_end":80}},{"value":"/ a temporary array, then copied from the array into `dst`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237485,"byte_end":237546,"line_start":130,"line_end":130,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237547,"byte_end":237550,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237551,"byte_end":237565,"line_start":132,"line_end":132,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237566,"byte_end":237569,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ [`ptr::copy`](core::ptr::copy)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237570,"byte_end":237604,"line_start":134,"line_end":134,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237605,"byte_end":237608,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237609,"byte_end":237630,"line_start":136,"line_end":136,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237631,"byte_end":237634,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ The pointers may differ in bit-ordering or storage element types. `bitvec`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237635,"byte_end":237713,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"/ considers it Undefined Behavior for two pointer regions to overlap in memory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237714,"byte_end":237794,"line_start":139,"line_end":139,"column_start":1,"column_end":81}},{"value":"/ if they have different bit-orderings, and so will only perform overlap","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237795,"byte_end":237869,"line_start":140,"line_end":140,"column_start":1,"column_end":75}},{"value":"/ detection when `O1` and `O2` match.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237870,"byte_end":237909,"line_start":141,"line_end":141,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237910,"byte_end":237913,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237914,"byte_end":237926,"line_start":143,"line_end":143,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237927,"byte_end":237930,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":237931,"byte_end":238005,"line_start":145,"line_end":145,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238006,"byte_end":238009,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ - `src` must be [valid] for reads of `count` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238010,"byte_end":238064,"line_start":147,"line_end":147,"column_start":1,"column_end":55}},{"value":"/ - `dst` must be [valid] for writes of `count` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238065,"byte_end":238120,"line_start":148,"line_end":148,"column_start":1,"column_end":56}},{"value":"/ - `src` and `dst` must not overlap if they have different bit-ordering","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238121,"byte_end":238195,"line_start":149,"line_end":149,"column_start":1,"column_end":75}},{"value":"/   parameters.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238196,"byte_end":238213,"line_start":150,"line_end":150,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238214,"byte_end":238217,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ The type parameters `T1` and `T2` are permitted to differ.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238218,"byte_end":238280,"line_start":152,"line_end":152,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238281,"byte_end":238284,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238285,"byte_end":238299,"line_start":154,"line_end":154,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238300,"byte_end":238303,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238304,"byte_end":238320,"line_start":156,"line_end":156,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238321,"byte_end":238324,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238325,"byte_end":238336,"line_start":158,"line_end":158,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238337,"byte_end":238364,"line_start":159,"line_end":159,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238365,"byte_end":238368,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ let start = 0b1011u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238369,"byte_end":238394,"line_start":161,"line_end":161,"column_start":1,"column_end":26}},{"value":"/ let mut end = 0u16;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238395,"byte_end":238418,"line_start":162,"line_end":162,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238419,"byte_end":238422,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238423,"byte_end":238435,"line_start":164,"line_end":164,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy::<Lsb0, Msb0, _, _>(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238436,"byte_end":238480,"line_start":165,"line_end":165,"column_start":1,"column_end":45}},{"value":"/     (&start).into(),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238481,"byte_end":238505,"line_start":166,"line_end":166,"column_start":1,"column_end":25}},{"value":"/     (&mut end).into(),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238506,"byte_end":238532,"line_start":167,"line_end":167,"column_start":1,"column_end":27}},{"value":"/     4,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238533,"byte_end":238543,"line_start":168,"line_end":168,"column_start":1,"column_end":11}},{"value":"/   );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238544,"byte_end":238552,"line_start":169,"line_end":169,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238553,"byte_end":238558,"line_start":170,"line_end":170,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(end, 0b1101_0000__0000_0000);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238559,"byte_end":238603,"line_start":171,"line_end":171,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238604,"byte_end":238611,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238612,"byte_end":238615,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ Overlapping regions:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238616,"byte_end":238640,"line_start":174,"line_end":174,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238641,"byte_end":238644,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238645,"byte_end":238656,"line_start":176,"line_end":176,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238657,"byte_end":238684,"line_start":177,"line_end":177,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238685,"byte_end":238688,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ let mut x = 0b1111_0010u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238689,"byte_end":238719,"line_start":179,"line_end":179,"column_start":1,"column_end":31}},{"value":"/ let src = BitPtr::<_, Lsb0, _>::from_mut(&mut x);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238720,"byte_end":238773,"line_start":180,"line_end":180,"column_start":1,"column_end":54}},{"value":"/ let dst = unsafe { src.add(2) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238774,"byte_end":238810,"line_start":181,"line_end":181,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238811,"byte_end":238814,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238815,"byte_end":238827,"line_start":183,"line_end":183,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy(src.immut(), dst, 4);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238828,"byte_end":238873,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238874,"byte_end":238879,"line_start":185,"line_end":185,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(x, 0b1100_1010);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238880,"byte_end":238911,"line_start":186,"line_end":186,"column_start":1,"column_end":32}},{"value":"/ //                ^^ ^^ bottom nibble moved here","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238912,"byte_end":238964,"line_start":187,"line_end":187,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238965,"byte_end":238972,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238973,"byte_end":238976,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/std/ptr/index.html#safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":238977,"byte_end":239041,"line_start":190,"line_end":190,"column_start":1,"column_end":65}},{"value":"/ [`copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239042,"byte_end":239102,"line_start":191,"line_end":191,"column_start":1,"column_end":61}},{"value":"/ [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239103,"byte_end":239171,"line_start":192,"line_end":192,"column_start":1,"column_end":69}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239207,"byte_end":239221,"line_start":193,"line_end":193,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2195},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240843,"byte_end":240862,"line_start":255,"line_end":255,"column_start":15,"column_end":34},"name":"copy_nonoverlapping","qualname":"::ptr::copy_nonoverlapping","value":"pub unsafe fn copy_nonoverlapping<O1, O2, T1,\n                                  T2>(BitPtr<Const, O1, T1>,\n                                      BitPtr<Mut, O2, T2>, usize) where\nO1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `dst`. The source and destination must\n *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `dst`. The source and destination must","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239430,"byte_end":239506,"line_start":207,"line_end":207,"column_start":1,"column_end":77}},{"value":"/ *not* overlap.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239507,"byte_end":239525,"line_start":208,"line_end":208,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239526,"byte_end":239529,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ For regions of memory which might overlap, use [`copy`] instead.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239530,"byte_end":239598,"line_start":210,"line_end":210,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239599,"byte_end":239602,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ `copy_nonoverlapping` is semantically equivalent to C’s [`memcpy`], but with","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239603,"byte_end":239685,"line_start":212,"line_end":212,"column_start":1,"column_end":81}},{"value":"/ the argument order swapped.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239686,"byte_end":239717,"line_start":213,"line_end":213,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239718,"byte_end":239721,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239722,"byte_end":239736,"line_start":215,"line_end":215,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239737,"byte_end":239740,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ [`ptr::copy_nonoverlapping`](core::ptr::copy_nonoverlapping)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239741,"byte_end":239805,"line_start":217,"line_end":217,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239806,"byte_end":239809,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239810,"byte_end":239831,"line_start":219,"line_end":219,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239832,"byte_end":239835,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ The pointers may differ in bit-ordering or storage element parameters.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239836,"byte_end":239910,"line_start":221,"line_end":221,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239911,"byte_end":239914,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239915,"byte_end":239927,"line_start":223,"line_end":223,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239928,"byte_end":239931,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":239932,"byte_end":240006,"line_start":225,"line_end":225,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240007,"byte_end":240010,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ - `src` must be [valid] for reads of `count` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240011,"byte_end":240065,"line_start":227,"line_end":227,"column_start":1,"column_end":55}},{"value":"/ - `dst` must be [valid] for writes of `count` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240066,"byte_end":240121,"line_start":228,"line_end":228,"column_start":1,"column_end":56}},{"value":"/ - The region of memory beginning at `src` with a size of `count` bits must","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240122,"byte_end":240200,"line_start":229,"line_end":229,"column_start":1,"column_end":79}},{"value":"/   not overlap with the region of memory beginning at `dst` with the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240201,"byte_end":240277,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/   size.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240278,"byte_end":240289,"line_start":231,"line_end":231,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240290,"byte_end":240293,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240294,"byte_end":240308,"line_start":233,"line_end":233,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240309,"byte_end":240312,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240313,"byte_end":240324,"line_start":235,"line_end":235,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240325,"byte_end":240352,"line_start":236,"line_end":236,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240353,"byte_end":240356,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ let mut data = 0b1011u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240357,"byte_end":240385,"line_start":238,"line_end":238,"column_start":1,"column_end":29}},{"value":"/ let ptr = BitPtr::<_, Msb0, _>::from_mut(&mut data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240386,"byte_end":240442,"line_start":239,"line_end":239,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240443,"byte_end":240446,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240447,"byte_end":240459,"line_start":241,"line_end":241,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy_nonoverlapping(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240460,"byte_end":240499,"line_start":242,"line_end":242,"column_start":1,"column_end":40}},{"value":"/     ptr.add(4).immut(),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240500,"byte_end":240527,"line_start":243,"line_end":243,"column_start":1,"column_end":28}},{"value":"/     ptr,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240528,"byte_end":240540,"line_start":244,"line_end":244,"column_start":1,"column_end":13}},{"value":"/     4,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240541,"byte_end":240551,"line_start":245,"line_end":245,"column_start":1,"column_end":11}},{"value":"/   );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240552,"byte_end":240560,"line_start":246,"line_end":246,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240561,"byte_end":240566,"line_start":247,"line_end":247,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(data, 0b1011_1011);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240567,"byte_end":240601,"line_start":248,"line_end":248,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240602,"byte_end":240609,"line_start":249,"line_end":249,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240610,"byte_end":240613,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/std/ptr/index.html#safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240614,"byte_end":240678,"line_start":251,"line_end":251,"column_start":1,"column_end":65}},{"value":"/ [`copy`]: crate::ptr::copy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240679,"byte_end":240709,"line_start":252,"line_end":252,"column_start":1,"column_end":31}},{"value":"/ [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240710,"byte_end":240776,"line_start":253,"line_end":253,"column_start":1,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":240812,"byte_end":240826,"line_start":254,"line_end":254,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2200},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":241937,"byte_end":241939,"line_start":301,"line_end":301,"column_start":8,"column_end":10},"name":"eq","qualname":"::ptr::eq","value":"pub fn eq<O, T1, T2>(BitPtr<Const, O, T1>, BitPtr<Const, O, T2>) -> bool where\nO: BitOrder, T1: BitStore, T2: BitStore,\nBitPtr<Const, O, T1>: PartialEq<BitPtr<Const, O, T2>>","parent":null,"children":[],"decl_id":null,"docs":" Compares raw bit-pointers for equality.","sig":null,"attributes":[{"value":"* Compares raw bit-pointers for equality.\n\nThis is the same as using the `==` operator, but less generic: the arguments\nhave to be `BitPtr<Const, _, _>` bit-pointers, not anything that implements\n`PartialEq`.\n\n# Original\n\n[`ptr::eq`](core::ptr::eq)\n\n# API Differences\n\nThe two pointers can differ in their storage type parameters. `bitvec` defines\npointer equality only between pointers with the same underlying `BitStore::Mem`\nregister type.\n\nThis cannot compare span pointers. `*const BitSlice` can be used in the standard\nlibrary `ptr::eq` and does not need an override.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\nuse core::cell::Cell;\n\nlet data = 0u8;\nlet bare_ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);\nlet cell_ptr = bare_ptr.cast::<Cell<u8>>();\n\nassert!(bitvec::ptr::eq(bare_ptr, cell_ptr));\n```\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":241065,"byte_end":241877,"line_start":268,"line_end":299,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":241913,"byte_end":241927,"line_start":300,"line_end":300,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2204},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":242352,"byte_end":242356,"line_start":322,"line_end":322,"column_start":8,"column_end":12},"name":"hash","qualname":"::ptr::hash","value":"pub fn hash<O, T, S>(BitPtr<Const, O, T>, &mut S) where O: BitOrder,\nT: BitStore, S: Hasher","parent":null,"children":[],"decl_id":null,"docs":" Hash a raw bit-pointer.","sig":null,"attributes":[{"value":"* Hash a raw bit-pointer.\n\nThis can be used to prove hashing the pointer address value, rather than the\nreferent bit.\n\n# Original\n\n[`ptr::hash`](core::ptr::hash)\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":242128,"byte_end":242295,"line_start":311,"line_end":319,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":242296,"byte_end":242313,"line_start":320,"line_end":320,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":242314,"byte_end":242344,"line_start":321,"line_end":321,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2208},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":243031,"byte_end":243035,"line_start":359,"line_end":359,"column_start":15,"column_end":19},"name":"read","qualname":"::ptr::read","value":"pub unsafe fn read<O, T>(BitPtr<Const, O, T>) -> bool where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `src`.","sig":null,"attributes":[{"value":"* Reads the bit from `src`.\n\n# Original\n\n[`ptr::read`](core::ptr::read)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `src` must be [valid] for reads.\n- `src` must point to a properly initialized value of type `T`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = 128u8;\nlet ptr = BitPtr::<_, Msb0, _>::from_ref(&data);\nassert!(unsafe {\n  bitvec::ptr::read(ptr)\n});\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":242480,"byte_end":242964,"line_start":331,"line_end":357,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":243000,"byte_end":243014,"line_start":358,"line_end":358,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2211},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":244936,"byte_end":244949,"line_start":420,"line_end":420,"column_start":15,"column_end":28},"name":"read_volatile","qualname":"::ptr::read_volatile","value":"pub unsafe fn read_volatile<O, T>(BitPtr<Const, O, T>) -> bool where\nO: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the bit from `src`.","sig":null,"attributes":[{"value":"* Performs a volatile read of the bit from `src`.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed to not\nbe elided or reördered by the compiler across other volatile operations.\n\n# Original\n\n[`ptr::read_volatile`](core::ptr::read_volatile)\n\n# Notes\n\nRust does not curretnly have a rigorously and formally defined memory model, so\nthe precise semantics of what “volatile” means here is subject to change over\ntime. That being said, the semantics will almost always end up pretty similar to\n[C11’s definition of volatile][c11].\n\nThe compiler shouldn’t change the relative order or number of volatile memory\noperations.\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for reads\n- `dst` must point to a properly initialized value of type `T`\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\nJust like in C, whether an operation is volatile has no bearing whatsoëver on\nquestions involving concurrent access from multiple threads. Volatile accesses\nbehave exactly like non-atomic accesses in that regard. In particular, a race\nbetween a `read_volatile` and any write operation on the same location is\nundefined behavior.\n\nThis is true even for atomic types! This instruction is an ordinary load that\nthe compiler will not remove. It is *not* an atomic instruction.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = 4u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);\nunsafe {\n  assert!(bitvec::ptr::read_volatile(ptr.add(2)));\n}\n```\n\n[c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":243127,"byte_end":244869,"line_start":367,"line_end":418,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":244905,"byte_end":244919,"line_start":419,"line_end":419,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2214},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":245953,"byte_end":245960,"line_start":462,"line_end":462,"column_start":15,"column_end":22},"name":"replace","qualname":"::ptr::replace","value":"pub unsafe fn replace<O, T>(BitPtr<Mut, O, T>, bool) -> bool where\nO: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Moves `src` into the pointed `dst`, returning the previous `dst` bit.","sig":null,"attributes":[{"value":"* Moves `src` into the pointed `dst`, returning the previous `dst` bit.\n\nThis function is semantically equivalent to [`BitRef::replace`] except that it\noperates on raw pointers instead of references. When a proxy reference is\navailable, prefer [`BitRef::replace`].\n\n# Original\n\n[`ptr::replace`](core::ptr::replace)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for both reads and writes.\n- `dst` must point to a properly initialized value of type `T`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 4u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nassert!(unsafe {\n  bitvec::ptr::replace(ptr.add(2), false)\n});\nassert_eq!(data, 0);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`BitPtr::replace`]: crate::ptr::BitRef::replace\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":245050,"byte_end":245886,"line_start":428,"line_end":460,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":245922,"byte_end":245936,"line_start":461,"line_end":461,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2217},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":246803,"byte_end":246826,"line_start":496,"line_end":496,"column_start":8,"column_end":31},"name":"bitslice_from_raw_parts","qualname":"::ptr::bitslice_from_raw_parts","value":"pub fn bitslice_from_raw_parts<O, T>(BitPtr<Const, O, T>, usize)\n-> *const BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Forms a raw bit-slice from a bit-pointer and a length.","sig":null,"attributes":[{"value":"* Forms a raw bit-slice from a bit-pointer and a length.\n\nThe `len` argument is the number of **bits**, not the number of elements.\n\nThis function is safe, but actually using the return value is unsafe. See the\ndocumentation of [`slice::from_raw_parts`] for bit-slice safety requirements.\n\n# Original\n\n[`ptr::slice_from_raw_parts`](core::ptr::slice_from_raw_parts)\n\n# Examples\n\n```rust\nuse bitvec::ptr;\nuse bitvec::order::Lsb0;\n\nlet x = [5u8, 10, 15];\nlet bitptr = ptr::BitPtr::<_, Lsb0, _>::from_ref(&x[0]);\nlet bitslice = ptr::bitslice_from_raw_parts(bitptr, 24);\nassert_eq!(unsafe { &*bitslice }[2], true);\n```\n\n[`slice::from_raw_parts`]: crate::slice::from_raw_parts\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":246067,"byte_end":246743,"line_start":470,"line_end":494,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":246779,"byte_end":246793,"line_start":495,"line_end":495,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2220},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":247948,"byte_end":247975,"line_start":537,"line_end":537,"column_start":8,"column_end":35},"name":"bitslice_from_raw_parts_mut","qualname":"::ptr::bitslice_from_raw_parts_mut","value":"pub fn bitslice_from_raw_parts_mut<O, T>(BitPtr<Mut, O, T>, usize)\n-> *mut BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`bitslice_from_raw_parts`], except that\na raw mutable bit-slice is returned, as opposed to a raw immutable bit-slice.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`bitslice_from_raw_parts`], except that\na raw mutable bit-slice is returned, as opposed to a raw immutable bit-slice.\n\nSee the documentation of [`bitslice_from_raw_parts`] for more details.\n\nThis function is safe, but actually using the return value is unsafe. See the\ndocumentation of [`slice::from_raw_parts_mut`] for bit-slice safety\nrequirements.\n\n# Original\n\n[`ptr::slice_from_raw_parts`](core::ptr::slice_from_raw_parts)\n\n# Examples\n\n```rust\nuse bitvec::ptr;\nuse bitvec::order::Lsb0;\n\nlet mut x = [5u8, 10, 15];\nlet bitptr = ptr::BitPtr::<_, Lsb0, _>::from_mut(&mut x[0]);\nlet bitslice = ptr::bitslice_from_raw_parts_mut(bitptr, 24);\nunsafe { &mut *bitslice }.set(0, true);\nassert!(unsafe { &*bitslice }[0]);\n```\n\n[`bitslice_from_raw_parts`]: crate::ptr::bitslice_from_raw_parts\n[`slice::from_raw_parts_mut`]: crate::slice::from_raw_parts_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":246996,"byte_end":247888,"line_start":507,"line_end":535,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":247924,"byte_end":247938,"line_start":536,"line_end":536,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2223},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":249063,"byte_end":249067,"line_start":585,"line_end":585,"column_start":15,"column_end":19},"name":"swap","qualname":"::ptr::swap","value":"pub unsafe fn swap<O1, O2, T1, T2>(BitPtr<Mut, O1, T1>, BitPtr<Mut, O2, T2>)\nwhere O1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations.","sig":null,"attributes":[{"value":"* Swaps the values at two mutable locations.\n\nBut for the following exception, this function is semantically equivalent to\n[`BitRef::swap`]: it operates on raw pointers instead of references. When\nreferences are available, prefer [`BitRef::swap`].\n\n# Original\n\n[`ptr::swap`](core::ptr::swap)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- Both `x` and `y` must be [valid] for both reads and writes.\n- Both `x` and `y` must point to initialized instances of type `T1` and `T2`,\n  respectively.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 2u8;\nlet x = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nlet y = unsafe { x.add(1) };\n\nunsafe {\n  bitvec::ptr::swap(x, y);\n}\nassert_eq!(data, 1);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`BitRef::swap`]: crate::ptr::BitRef::swap\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":248145,"byte_end":248996,"line_start":548,"line_end":583,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":249032,"byte_end":249046,"line_start":584,"line_end":584,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2228},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":250310,"byte_end":250329,"line_start":637,"line_end":637,"column_start":15,"column_end":34},"name":"swap_nonoverlapping","qualname":"::ptr::swap_nonoverlapping","value":"pub unsafe fn swap_nonoverlapping<O1, O2, T1,\n                                  T2>(BitPtr<Mut, O1, T1>,\n                                      BitPtr<Mut, O2, T2>, usize) where\nO1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps `count` bits between the two regions of memory beginning at `x` and\n`y`. The two regions must *not* overlap.","sig":null,"attributes":[{"value":"* Swaps `count` bits between the two regions of memory beginning at `x` and\n`y`. The two regions must *not* overlap.\n\n# Original\n\n[`ptr::swap_nonoverlapping`](core::ptr::swap_nonoverlapping)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- Both `x` and `y` must be [valid] for both reads and writes of `count` bits.\n- Both `x` and `y` must be fully initialized instances of `T` for all `count`\n  bits.\n- The regions may have overlapping elements, but must not overlap the concrete\n  bits they describe.\n\nNote that even if `count` is `0`, the pointers must still be validly\nconstructed, non-null, and well-aligned.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut x = [0u8; 2];\nlet mut y = !0u16;\nlet x_ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut x[0]);\nlet y_ptr = BitPtr::<_, Msb0, _>::from_mut(&mut y);\n\nunsafe {\n  bitvec::ptr::swap_nonoverlapping(x_ptr, y_ptr, 16);\n}\nassert_eq!(x, [!0; 2]);\nassert_eq!(y, 0);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":249220,"byte_end":250243,"line_start":597,"line_end":635,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":250279,"byte_end":250293,"line_start":636,"line_end":636,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2233},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":251567,"byte_end":251572,"line_start":689,"line_end":689,"column_start":15,"column_end":20},"name":"write","qualname":"::ptr::write","value":"pub unsafe fn write<O, T>(BitPtr<Mut, O, T>, bool) where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given bit.","sig":null,"attributes":[{"value":"* Overwrites a memory location with the given bit.\n\nBecause this reads from memory in order to construct the new value, it cannot be\nused to set uninitialized memory. The referent `T` element must be fully\ninitialized (such as with [`core::ptr::write`]) before setting bits with this\nfunction.\n\n# Original\n\n[`ptr::write`](core::ptr::write)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for writes\n- `dst` must point to a properly initialized value of type `T`\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 0u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nunsafe {\n  bitvec::ptr::write(ptr.add(2), true);\n}\nassert_eq!(data, 4);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`core::ptr::write`]: core::ptr::write\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":250554,"byte_end":251500,"line_start":652,"line_end":687,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":251536,"byte_end":251550,"line_start":688,"line_end":688,"column_start":36,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2236},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":253783,"byte_end":253797,"line_start":756,"line_end":756,"column_start":15,"column_end":29},"name":"write_volatile","qualname":"::ptr::write_volatile","value":"pub unsafe fn write_volatile<O, T>(BitPtr<Mut, O, T>, bool) where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given bit.","sig":null,"attributes":[{"value":"* Performs a volatile write of a memory location with the given bit.\n\nBecause processors do not have single-bit write instructions, this must\nperform a volatile read of the location, perform the bit modification within\nthe processor register, then perform a volatile write back to memory. These\nthree steps are guaranteed to be atomic.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed\nnot to be elided or reördered by the compiler across other volatile\noperations.\n\n# Original\n\n[`ptr::write_volatile`](core::ptr::write_volatile)\n\n# Notes\n\nRust does not curretnly have a rigorously and formally defined memory model,\nso the precise semantics of what “volatile” means here is subject to change\nover time. That being said, the semantics will almost always end up pretty\nsimilar to [C11’s definition of volatile][c11].\n\nThe compiler shouldn’t change the relative order or number of volatile\nmemory operations.\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for writes\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\nJust like in C, whether an operation is volatile has no bearing whatsoëver\non questions involving concurrent access from multiple threads. Volatile\naccesses behave exactly like non-atomic accesses in that regard. In\nparticular, a race between a `write_volatile` and any other operation\n(reading or writing) on the same location is undefined behavior.\n\nThis is true even for atomic types! This instruction is an ordinary store\nthat the compiler will not remove. It is *not* an atomic instruction.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 0u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nunsafe {\n  bitvec::ptr::write_volatile(ptr, true);\n  assert!(bitvec::ptr::read_volatile(ptr.immut()));\n}\n```\n\n[c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":251674,"byte_end":253716,"line_start":697,"line_end":754,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr.rs","byte_start":253752,"byte_end":253766,"line_start":755,"line_end":755,"column_start":36,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":2239},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","parent":null,"children":[{"krate":0,"index":2240},{"krate":0,"index":2243},{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":2248},{"krate":0,"index":2250},{"krate":0,"index":2253},{"krate":0,"index":2256},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2263},{"krate":0,"index":2266},{"krate":0,"index":2269},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2277},{"krate":0,"index":2280},{"krate":0,"index":2283},{"krate":0,"index":2286},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2293},{"krate":0,"index":2296},{"krate":0,"index":2299},{"krate":0,"index":2302},{"krate":0,"index":2305},{"krate":0,"index":2308},{"krate":0,"index":2311},{"krate":0,"index":2314},{"krate":0,"index":2317},{"krate":0,"index":2320},{"krate":0,"index":2323},{"krate":0,"index":2326},{"krate":0,"index":2329},{"krate":0,"index":2332},{"krate":0,"index":2335},{"krate":0,"index":2338},{"krate":0,"index":2341},{"krate":0,"index":2344},{"krate":0,"index":2347},{"krate":0,"index":2350},{"krate":0,"index":2353},{"krate":0,"index":2356},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2363},{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2370},{"krate":0,"index":2373},{"krate":0,"index":2376},{"krate":0,"index":2379},{"krate":0,"index":2382},{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2399},{"krate":0,"index":2402},{"krate":0,"index":2405},{"krate":0,"index":2408},{"krate":0,"index":2411},{"krate":0,"index":2412},{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2417},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2424},{"krate":0,"index":2427},{"krate":0,"index":2700},{"krate":0,"index":3009},{"krate":0,"index":3097},{"krate":0,"index":3160},{"krate":0,"index":3372},{"krate":0,"index":3378},{"krate":0,"index":3437},{"krate":0,"index":3446},{"krate":0,"index":3458},{"krate":0,"index":3469},{"krate":0,"index":3475},{"krate":0,"index":3480},{"krate":0,"index":3484},{"krate":0,"index":3488}],"decl_id":null,"docs":" A dynamically-sized view into individual bits of a memory region.","sig":null,"attributes":[{"value":"* A dynamically-sized view into individual bits of a memory region.\n\nYou can read the language’s [`slice` module documentation][std] here.\n\nThis module defines the [`BitSlice`] region, and all of its associated support\ncode.\n\n[`BitSlice`] is the primary working type of this crate. It is a wrapper type\nover `[T]` which enables you to view, manipulate, and take the address of\nindividual bits in memory. It behaves in every possible respect exactly like an\nordinary slice: it is dynamically-sized, and must be held by `&` or `&mut`\nreference, just like `[T]`, and implements every inherent method and trait that\n`[T]` does, to the absolute limits of what Rust permits.\n\nThe key to [`BitSlice`]’s powerful capability is that references to it use a\nspecial encoding that store, in addition to the address of the base element and\nthe bit length, the index of the starting bit in the base element. This custom\nreference encoding has some costs in what APIs are possible – for instance, Rust\nforbids it from supporting `&mut BitSlice[index] = bool` write indexing – but in\nexchange, enables it to be *far* more capable than any other bit-slice crate in\nexistence.\n\nBecause of the volume of code that must be written to match the `[T]` standard\nAPI, this module is organized very differently than the slice implementation in\nthe [`core`] and [`std`] distribution libraries.\n\n- the root module `slice` contains new APIs that have no counterpart in `[T]`\n- `slice/api` contains reïmplementations of the `[T]` inherent methods\n- `slice/iter` implements all of the iteration capability\n- `slice/ops` implements the traits in `core::ops`\n- `slice/proxy` implements the proxy reference used in place of `&mut bool`\n- `slice/traits` implements all other traits not in `core::ops`\n- lastly, `slice/tests` contains all the unit tests.\n\n[`BitSlice`]: struct.BitSlice.html\n[`core`]: core\n[`std`]: std\n[std]: https://doc.rust-lang.org/stable/std/slice\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":360699,"byte_end":362648,"line_start":1,"line_end":39,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2560},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445036,"byte_end":445039,"line_start":81,"line_end":81,"column_start":9,"column_end":12},"name":"len","qualname":"<BitSlice<O, T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the slice.","sig":null,"attributes":[{"value":"/ Returns the number of bits in the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444716,"byte_end":444760,"line_start":66,"line_end":66,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444762,"byte_end":444765,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444767,"byte_end":444781,"line_start":68,"line_end":68,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444783,"byte_end":444786,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ [`slice::len`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.len)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444788,"byte_end":444876,"line_start":70,"line_end":70,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444878,"byte_end":444881,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444883,"byte_end":444897,"line_start":72,"line_end":72,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444899,"byte_end":444902,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444904,"byte_end":444915,"line_start":74,"line_end":74,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444917,"byte_end":444944,"line_start":75,"line_end":75,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444946,"byte_end":444949,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ let a = bits![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444951,"byte_end":444978,"line_start":77,"line_end":77,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(a.len(), 3);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444980,"byte_end":445007,"line_start":78,"line_end":78,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445009,"byte_end":445016,"line_start":79,"line_end":79,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445018,"byte_end":445027,"line_start":80,"line_end":80,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2561},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445425,"byte_end":445433,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitSlice<O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice has a length of 0.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice has a length of 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445089,"byte_end":445139,"line_start":85,"line_end":85,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445141,"byte_end":445144,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445146,"byte_end":445160,"line_start":87,"line_end":87,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445162,"byte_end":445165,"line_start":88,"line_end":88,"column_start":2,"column_end":5}},{"value":"/ [`slice::is_empty`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.is_empty)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445167,"byte_end":445265,"line_start":89,"line_end":89,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445267,"byte_end":445270,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445272,"byte_end":445286,"line_start":91,"line_end":91,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445288,"byte_end":445291,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445293,"byte_end":445304,"line_start":93,"line_end":93,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445306,"byte_end":445333,"line_start":94,"line_end":94,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445335,"byte_end":445338,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ let a = bits![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445340,"byte_end":445367,"line_start":96,"line_end":96,"column_start":2,"column_end":29}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445369,"byte_end":445396,"line_start":97,"line_end":97,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445398,"byte_end":445405,"line_start":98,"line_end":98,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445407,"byte_end":445416,"line_start":99,"line_end":99,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2562},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445817,"byte_end":445822,"line_start":120,"line_end":120,"column_start":9,"column_end":14},"name":"first","qualname":"<BitSlice<O, T>>::first","value":"pub fn first(&Self) -> Option<BitRef<, Const, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first bit of the slice, or `None` if it is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445487,"byte_end":445552,"line_start":104,"line_end":104,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445554,"byte_end":445557,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445559,"byte_end":445573,"line_start":106,"line_end":106,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445575,"byte_end":445578,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445580,"byte_end":445594,"line_start":108,"line_end":108,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445596,"byte_end":445599,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445601,"byte_end":445612,"line_start":110,"line_end":110,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445614,"byte_end":445641,"line_start":111,"line_end":111,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445643,"byte_end":445646,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ let v = bits![1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445648,"byte_end":445675,"line_start":113,"line_end":113,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.first().as_deref());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445677,"byte_end":445727,"line_start":114,"line_end":114,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445729,"byte_end":445732,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ let w = bits![];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445734,"byte_end":445754,"line_start":116,"line_end":116,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(None, w.first());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445756,"byte_end":445788,"line_start":117,"line_end":117,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445790,"byte_end":445797,"line_start":118,"line_end":118,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445799,"byte_end":445808,"line_start":119,"line_end":119,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2563},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446659,"byte_end":446668,"line_start":153,"line_end":153,"column_start":9,"column_end":18},"name":"first_mut","qualname":"<BitSlice<O, T>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<BitRef<, Mut, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the first bit of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the first bit of the slice, or `None`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445882,"byte_end":445952,"line_start":124,"line_end":124,"column_start":2,"column_end":72}},{"value":"/ if it is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445954,"byte_end":445973,"line_start":125,"line_end":125,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445975,"byte_end":445978,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445980,"byte_end":445994,"line_start":127,"line_end":127,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":445996,"byte_end":445999,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ [`slice::first_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.first_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446001,"byte_end":446101,"line_start":129,"line_end":129,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446103,"byte_end":446106,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446108,"byte_end":446129,"line_start":131,"line_end":131,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446131,"byte_end":446134,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446136,"byte_end":446207,"line_start":133,"line_end":133,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446209,"byte_end":446283,"line_start":134,"line_end":134,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446285,"byte_end":446358,"line_start":135,"line_end":135,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446360,"byte_end":446367,"line_start":136,"line_end":136,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446369,"byte_end":446372,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446374,"byte_end":446388,"line_start":138,"line_end":138,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446390,"byte_end":446393,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446395,"byte_end":446406,"line_start":140,"line_end":140,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446408,"byte_end":446435,"line_start":141,"line_end":141,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446437,"byte_end":446440,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446442,"byte_end":446473,"line_start":143,"line_end":143,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446475,"byte_end":446478,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut first) = x.first_mut() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446480,"byte_end":446524,"line_start":145,"line_end":145,"column_start":2,"column_end":46}},{"value":"/   *first = true;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446526,"byte_end":446546,"line_start":146,"line_end":146,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446548,"byte_end":446553,"line_start":147,"line_end":147,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446555,"byte_end":446589,"line_start":148,"line_end":148,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446591,"byte_end":446598,"line_start":149,"line_end":149,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446600,"byte_end":446603,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446605,"byte_end":446639,"line_start":151,"line_end":151,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446641,"byte_end":446650,"line_start":152,"line_end":152,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2564},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447249,"byte_end":447260,"line_start":178,"line_end":178,"column_start":9,"column_end":20},"name":"split_first","qualname":"<BitSlice<O, T>>::split_first","value":"pub fn split_first(&Self) -> Option<(BitRef<, Const, O, T>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446734,"byte_end":446801,"line_start":157,"line_end":157,"column_start":2,"column_end":69}},{"value":"/ `None` if it is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446803,"byte_end":446829,"line_start":158,"line_end":158,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446831,"byte_end":446834,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446836,"byte_end":446850,"line_start":160,"line_end":160,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446852,"byte_end":446855,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first`](https://doc.rust-lang.org/stable/std/primitive.slice.html#split_first)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446857,"byte_end":446954,"line_start":162,"line_end":162,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446956,"byte_end":446959,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446961,"byte_end":446975,"line_start":164,"line_end":164,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446977,"byte_end":446980,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446982,"byte_end":446993,"line_start":166,"line_end":166,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":446995,"byte_end":447022,"line_start":167,"line_end":167,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447024,"byte_end":447027,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ let x = bits![1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447029,"byte_end":447056,"line_start":169,"line_end":169,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447058,"byte_end":447061,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ if let Some((first, rest)) = x.split_first() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447063,"byte_end":447113,"line_start":171,"line_end":171,"column_start":2,"column_end":52}},{"value":"/   assert_eq!(first, &true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447115,"byte_end":447146,"line_start":172,"line_end":172,"column_start":2,"column_end":33}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447148,"byte_end":447184,"line_start":173,"line_end":173,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447186,"byte_end":447191,"line_start":174,"line_end":174,"column_start":2,"column_end":7}},{"value":"/ # fn end_the_block() {}","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447193,"byte_end":447220,"line_start":175,"line_end":175,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447222,"byte_end":447229,"line_start":176,"line_end":176,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447231,"byte_end":447240,"line_start":177,"line_end":177,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2565},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448658,"byte_end":448673,"line_start":226,"line_end":226,"column_start":9,"column_end":24},"name":"split_first_mut","qualname":"<BitSlice<O, T>>::split_first_mut","value":"pub fn split_first_mut(&mut Self)\n-> Option<(BitRef<, Mut, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447468,"byte_end":447535,"line_start":188,"line_end":188,"column_start":2,"column_end":69}},{"value":"/ `None` if it is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447537,"byte_end":447563,"line_start":189,"line_end":189,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447565,"byte_end":447568,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447570,"byte_end":447584,"line_start":191,"line_end":191,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447586,"byte_end":447589,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#split_first_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447591,"byte_end":447696,"line_start":193,"line_end":193,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447698,"byte_end":447701,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447703,"byte_end":447724,"line_start":195,"line_end":195,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447726,"byte_end":447729,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447731,"byte_end":447802,"line_start":197,"line_end":197,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447804,"byte_end":447878,"line_start":198,"line_end":198,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447880,"byte_end":447953,"line_start":199,"line_end":199,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447955,"byte_end":447962,"line_start":200,"line_end":200,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447964,"byte_end":447967,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":447969,"byte_end":448041,"line_start":202,"line_end":202,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448043,"byte_end":448116,"line_start":203,"line_end":203,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448118,"byte_end":448152,"line_start":204,"line_end":204,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448154,"byte_end":448157,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448159,"byte_end":448173,"line_start":206,"line_end":206,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448175,"byte_end":448178,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448180,"byte_end":448191,"line_start":208,"line_end":208,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448193,"byte_end":448220,"line_start":209,"line_end":209,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448222,"byte_end":448225,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448227,"byte_end":448258,"line_start":211,"line_end":211,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448260,"byte_end":448263,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut first, rest)) = x.split_first_mut() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448265,"byte_end":448323,"line_start":213,"line_end":213,"column_start":2,"column_end":60}},{"value":"/   *first = true;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448325,"byte_end":448345,"line_start":214,"line_end":214,"column_start":2,"column_end":22}},{"value":"/   rest.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448347,"byte_end":448371,"line_start":215,"line_end":215,"column_start":2,"column_end":26}},{"value":"/   rest.set(1, false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448373,"byte_end":448398,"line_start":216,"line_end":216,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448400,"byte_end":448405,"line_start":217,"line_end":217,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448407,"byte_end":448441,"line_start":218,"line_end":218,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448443,"byte_end":448450,"line_start":219,"line_end":219,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448452,"byte_end":448455,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448457,"byte_end":448491,"line_start":221,"line_end":221,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448605,"byte_end":448614,"line_start":224,"line_end":224,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448616,"byte_end":448649,"line_start":225,"line_end":225,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2566},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449441,"byte_end":449451,"line_start":259,"line_end":259,"column_start":9,"column_end":19},"name":"split_last","qualname":"<BitSlice<O, T>>::split_last","value":"pub fn split_last(&Self) -> Option<(BitRef<, Const, O, T>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448925,"byte_end":448991,"line_start":238,"line_end":238,"column_start":2,"column_end":68}},{"value":"/ `None` if it is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":448993,"byte_end":449019,"line_start":239,"line_end":239,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449021,"byte_end":449024,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449026,"byte_end":449040,"line_start":241,"line_end":241,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449042,"byte_end":449045,"line_start":242,"line_end":242,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449047,"byte_end":449149,"line_start":243,"line_end":243,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449151,"byte_end":449154,"line_start":244,"line_end":244,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449156,"byte_end":449170,"line_start":245,"line_end":245,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449172,"byte_end":449175,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449177,"byte_end":449188,"line_start":247,"line_end":247,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449190,"byte_end":449217,"line_start":248,"line_end":248,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449219,"byte_end":449222,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449224,"byte_end":449251,"line_start":250,"line_end":250,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449253,"byte_end":449256,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ if let Some((last, rest)) = x.split_last() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449258,"byte_end":449306,"line_start":252,"line_end":252,"column_start":2,"column_end":50}},{"value":"/   assert_eq!(last, &true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449308,"byte_end":449338,"line_start":253,"line_end":253,"column_start":2,"column_end":32}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449340,"byte_end":449376,"line_start":254,"line_end":254,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449378,"byte_end":449383,"line_start":255,"line_end":255,"column_start":2,"column_end":7}},{"value":"/ # fn end_the_block() {}","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449385,"byte_end":449412,"line_start":256,"line_end":256,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449414,"byte_end":449421,"line_start":257,"line_end":257,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449423,"byte_end":449432,"line_start":258,"line_end":258,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450874,"byte_end":450888,"line_start":307,"line_end":307,"column_start":9,"column_end":23},"name":"split_last_mut","qualname":"<BitSlice<O, T>>::split_last_mut","value":"pub fn split_last_mut(&mut Self)\n-> Option<(BitRef<, Mut, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449679,"byte_end":449745,"line_start":269,"line_end":269,"column_start":2,"column_end":68}},{"value":"/ `None` if it is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449747,"byte_end":449773,"line_start":270,"line_end":270,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449775,"byte_end":449778,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449780,"byte_end":449794,"line_start":272,"line_end":272,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449796,"byte_end":449799,"line_start":273,"line_end":273,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449801,"byte_end":449911,"line_start":274,"line_end":274,"column_start":2,"column_end":112}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449913,"byte_end":449916,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449918,"byte_end":449939,"line_start":276,"line_end":276,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449941,"byte_end":449944,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":449946,"byte_end":450017,"line_start":278,"line_end":278,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450019,"byte_end":450093,"line_start":279,"line_end":279,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450095,"byte_end":450168,"line_start":280,"line_end":280,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450170,"byte_end":450177,"line_start":281,"line_end":281,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450179,"byte_end":450182,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450184,"byte_end":450256,"line_start":283,"line_end":283,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450258,"byte_end":450331,"line_start":284,"line_end":284,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450333,"byte_end":450367,"line_start":285,"line_end":285,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450369,"byte_end":450372,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450374,"byte_end":450388,"line_start":287,"line_end":287,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450390,"byte_end":450393,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450395,"byte_end":450406,"line_start":289,"line_end":289,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450408,"byte_end":450435,"line_start":290,"line_end":290,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450437,"byte_end":450440,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450442,"byte_end":450473,"line_start":292,"line_end":292,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450475,"byte_end":450478,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut last, rest)) = x.split_last_mut() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450480,"byte_end":450536,"line_start":294,"line_end":294,"column_start":2,"column_end":58}},{"value":"/   *last = true;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450538,"byte_end":450557,"line_start":295,"line_end":295,"column_start":2,"column_end":21}},{"value":"/   rest.set(0, false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450559,"byte_end":450584,"line_start":296,"line_end":296,"column_start":2,"column_end":27}},{"value":"/   rest.set(1, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450586,"byte_end":450610,"line_start":297,"line_end":297,"column_start":2,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450612,"byte_end":450617,"line_start":298,"line_end":298,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450619,"byte_end":450653,"line_start":299,"line_end":299,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450655,"byte_end":450662,"line_start":300,"line_end":300,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450664,"byte_end":450667,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450669,"byte_end":450707,"line_start":302,"line_end":302,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450821,"byte_end":450830,"line_start":305,"line_end":305,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":450832,"byte_end":450865,"line_start":306,"line_end":306,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2568},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451572,"byte_end":451576,"line_start":337,"line_end":337,"column_start":9,"column_end":13},"name":"last","qualname":"<BitSlice<O, T>>::last","value":"pub fn last(&Self) -> Option<BitRef<, Const, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last bit of the slice, or `None` if it is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451148,"byte_end":451212,"line_start":319,"line_end":319,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451214,"byte_end":451217,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451219,"byte_end":451233,"line_start":321,"line_end":321,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451235,"byte_end":451238,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ [`slice::last`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451240,"byte_end":451330,"line_start":323,"line_end":323,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451332,"byte_end":451335,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451337,"byte_end":451351,"line_start":325,"line_end":325,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451353,"byte_end":451356,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451358,"byte_end":451369,"line_start":327,"line_end":327,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451371,"byte_end":451398,"line_start":328,"line_end":328,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451400,"byte_end":451403,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451405,"byte_end":451432,"line_start":330,"line_end":330,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.last().as_deref());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451434,"byte_end":451483,"line_start":331,"line_end":331,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451485,"byte_end":451488,"line_start":332,"line_end":332,"column_start":2,"column_end":5}},{"value":"/ let w = bits![];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451490,"byte_end":451510,"line_start":333,"line_end":333,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(None, w.last());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451512,"byte_end":451543,"line_start":334,"line_end":334,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451545,"byte_end":451552,"line_start":335,"line_end":335,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451554,"byte_end":451563,"line_start":336,"line_end":336,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2569},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452457,"byte_end":452465,"line_start":372,"line_end":372,"column_start":9,"column_end":17},"name":"last_mut","qualname":"<BitSlice<O, T>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<BitRef<, Mut, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the last bit in the slice.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the last bit in the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451717,"byte_end":451776,"line_start":344,"line_end":344,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451778,"byte_end":451781,"line_start":345,"line_end":345,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451783,"byte_end":451797,"line_start":346,"line_end":346,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451799,"byte_end":451802,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ [`slice::last_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451804,"byte_end":451902,"line_start":348,"line_end":348,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451904,"byte_end":451907,"line_start":349,"line_end":349,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451909,"byte_end":451930,"line_start":350,"line_end":350,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451932,"byte_end":451935,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":451937,"byte_end":452008,"line_start":352,"line_end":352,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452010,"byte_end":452084,"line_start":353,"line_end":353,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452086,"byte_end":452159,"line_start":354,"line_end":354,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452161,"byte_end":452168,"line_start":355,"line_end":355,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452170,"byte_end":452173,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452175,"byte_end":452189,"line_start":357,"line_end":357,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452191,"byte_end":452194,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452196,"byte_end":452207,"line_start":359,"line_end":359,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452209,"byte_end":452236,"line_start":360,"line_end":360,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452238,"byte_end":452241,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452243,"byte_end":452274,"line_start":362,"line_end":362,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452276,"byte_end":452279,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut last) = x.last_mut() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452281,"byte_end":452323,"line_start":364,"line_end":364,"column_start":2,"column_end":44}},{"value":"/   *last = true;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452325,"byte_end":452344,"line_start":365,"line_end":365,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452346,"byte_end":452351,"line_start":366,"line_end":366,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452353,"byte_end":452387,"line_start":367,"line_end":367,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452389,"byte_end":452396,"line_start":368,"line_end":368,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452398,"byte_end":452401,"line_start":369,"line_end":369,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452403,"byte_end":452437,"line_start":370,"line_end":370,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452439,"byte_end":452448,"line_start":371,"line_end":371,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2570},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453376,"byte_end":453379,"line_start":402,"line_end":402,"column_start":9,"column_end":12},"name":"get","qualname":"<BitSlice<O, T>>::get","value":"pub fn get<'a, I>(&'a Self, I) -> Option<I::Immut> where I: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a bit or subslice depending on the type of index.","sig":null,"attributes":[{"value":"/ Returns a reference to a bit or subslice depending on the type of index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452612,"byte_end":452688,"line_start":379,"line_end":379,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452690,"byte_end":452693,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ - If given a position, returns a reference to the bit at that position","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452695,"byte_end":452769,"line_start":381,"line_end":381,"column_start":2,"column_end":76}},{"value":"/   or `None` if out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452771,"byte_end":452804,"line_start":382,"line_end":382,"column_start":2,"column_end":35}},{"value":"/ - If given a range, returns the subslice corresponding to that range, or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452806,"byte_end":452882,"line_start":383,"line_end":383,"column_start":2,"column_end":78}},{"value":"/   `None` if out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452884,"byte_end":452914,"line_start":384,"line_end":384,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452916,"byte_end":452919,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452921,"byte_end":452935,"line_start":386,"line_end":386,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452937,"byte_end":452940,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ [`slice::get`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":452942,"byte_end":453030,"line_start":388,"line_end":388,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453032,"byte_end":453035,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453037,"byte_end":453051,"line_start":390,"line_end":390,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453053,"byte_end":453056,"line_start":391,"line_end":391,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453058,"byte_end":453069,"line_start":392,"line_end":392,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453071,"byte_end":453098,"line_start":393,"line_end":393,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453100,"byte_end":453103,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453105,"byte_end":453132,"line_start":395,"line_end":395,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.get(1).as_deref());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453134,"byte_end":453183,"line_start":396,"line_end":396,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(Some(bits![0, 1]), v.get(0 .. 2));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453185,"byte_end":453234,"line_start":397,"line_end":397,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(None, v.get(3));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453236,"byte_end":453267,"line_start":398,"line_end":398,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(None, v.get(0 .. 4));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453269,"byte_end":453305,"line_start":399,"line_end":399,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453307,"byte_end":453314,"line_start":400,"line_end":400,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453351,"byte_end":453365,"line_start":401,"line_end":401,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2573},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454378,"byte_end":454385,"line_start":437,"line_end":437,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BitSlice<O, T>>::get_mut","value":"pub fn get_mut<'a, I>(&'a mut Self, I) -> Option<I::Mut> where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to a bit or subslice depending on the type\n of index (see [`.get()`]) or `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to a bit or subslice depending on the type","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453486,"byte_end":453560,"line_start":407,"line_end":407,"column_start":2,"column_end":76}},{"value":"/ of index (see [`.get()`]) or `None` if the index is out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453562,"byte_end":453632,"line_start":408,"line_end":408,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453634,"byte_end":453637,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453639,"byte_end":453653,"line_start":410,"line_end":410,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453655,"byte_end":453658,"line_start":411,"line_end":411,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453660,"byte_end":453756,"line_start":412,"line_end":412,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453758,"byte_end":453761,"line_start":413,"line_end":413,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453763,"byte_end":453784,"line_start":414,"line_end":414,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453786,"byte_end":453789,"line_start":415,"line_end":415,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453791,"byte_end":453862,"line_start":416,"line_end":416,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453864,"byte_end":453938,"line_start":417,"line_end":417,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":453940,"byte_end":454013,"line_start":418,"line_end":418,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454015,"byte_end":454022,"line_start":419,"line_end":419,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454024,"byte_end":454027,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454029,"byte_end":454043,"line_start":421,"line_end":421,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454045,"byte_end":454048,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454050,"byte_end":454061,"line_start":423,"line_end":423,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454063,"byte_end":454090,"line_start":424,"line_end":424,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454092,"byte_end":454095,"line_start":425,"line_end":425,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454097,"byte_end":454128,"line_start":426,"line_end":426,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454130,"byte_end":454133,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut bit) = x.get_mut(1) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454135,"byte_end":454176,"line_start":428,"line_end":428,"column_start":2,"column_end":43}},{"value":"/   *bit = true;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454178,"byte_end":454196,"line_start":429,"line_end":429,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454198,"byte_end":454203,"line_start":430,"line_end":430,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454205,"byte_end":454239,"line_start":431,"line_end":431,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454241,"byte_end":454248,"line_start":432,"line_end":432,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454250,"byte_end":454253,"line_start":433,"line_end":433,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454255,"byte_end":454289,"line_start":434,"line_end":434,"column_start":2,"column_end":36}},{"value":"/ [`.get()`]: Self::get","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454291,"byte_end":454316,"line_start":435,"line_end":435,"column_start":2,"column_end":27}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454353,"byte_end":454367,"line_start":436,"line_end":436,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2576},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455362,"byte_end":455375,"line_start":468,"line_end":468,"column_start":16,"column_end":29},"name":"get_unchecked","qualname":"<BitSlice<O, T>>::get_unchecked","value":"pub unsafe fn get_unchecked<'a, I>(&'a Self, I) -> I::Immut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a bit or subslice, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Returns a reference to a bit or subslice, without doing bounds checking.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454498,"byte_end":454574,"line_start":442,"line_end":442,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454576,"byte_end":454579,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454581,"byte_end":454657,"line_start":444,"line_end":444,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]* even if the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454659,"byte_end":454728,"line_start":445,"line_end":445,"column_start":2,"column_end":71}},{"value":"/ resulting reference is not used. For a safe alternative, see [`.get()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454730,"byte_end":454806,"line_start":446,"line_end":446,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454808,"byte_end":454811,"line_start":447,"line_end":447,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454813,"byte_end":454827,"line_start":448,"line_end":448,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454829,"byte_end":454832,"line_start":449,"line_end":449,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_unchecked)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454834,"byte_end":454942,"line_start":450,"line_end":450,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454944,"byte_end":454947,"line_start":451,"line_end":451,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454949,"byte_end":454963,"line_start":452,"line_end":452,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454965,"byte_end":454968,"line_start":453,"line_end":453,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454970,"byte_end":454981,"line_start":454,"line_end":454,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":454983,"byte_end":455010,"line_start":455,"line_end":455,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455012,"byte_end":455015,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455017,"byte_end":455044,"line_start":457,"line_end":457,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455046,"byte_end":455049,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455051,"byte_end":455063,"line_start":459,"line_end":459,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(x.get_unchecked(1), &true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455065,"byte_end":455109,"line_start":460,"line_end":460,"column_start":2,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455111,"byte_end":455116,"line_start":461,"line_end":461,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455118,"byte_end":455125,"line_start":462,"line_end":462,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455127,"byte_end":455130,"line_start":463,"line_end":463,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455132,"byte_end":455228,"line_start":464,"line_end":464,"column_start":2,"column_end":98}},{"value":"/ [`.get()`]: Self::get","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455230,"byte_end":455255,"line_start":465,"line_end":465,"column_start":2,"column_end":27}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455257,"byte_end":455293,"line_start":466,"line_end":466,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455330,"byte_end":455344,"line_start":467,"line_end":467,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456736,"byte_end":456753,"line_start":510,"line_end":510,"column_start":16,"column_end":33},"name":"get_unchecked_mut","qualname":"<BitSlice<O, T>>::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut<'a, I>(&'a mut Self, I) -> I::Mut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to a bit or subslice, without doing bounds\n checking.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to a bit or subslice, without doing bounds","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455484,"byte_end":455558,"line_start":473,"line_end":473,"column_start":2,"column_end":76}},{"value":"/ checking.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455560,"byte_end":455573,"line_start":474,"line_end":474,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455575,"byte_end":455578,"line_start":475,"line_end":475,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455580,"byte_end":455656,"line_start":476,"line_end":476,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]* even if the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455658,"byte_end":455727,"line_start":477,"line_end":477,"column_start":2,"column_end":71}},{"value":"/ resulting reference is not used. For a safe alternative, see","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455729,"byte_end":455793,"line_start":478,"line_end":478,"column_start":2,"column_end":66}},{"value":"/ [`.get_mut()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455795,"byte_end":455814,"line_start":479,"line_end":479,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455816,"byte_end":455819,"line_start":480,"line_end":480,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455821,"byte_end":455835,"line_start":481,"line_end":481,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455837,"byte_end":455840,"line_start":482,"line_end":482,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_unchecked_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455842,"byte_end":455958,"line_start":483,"line_end":483,"column_start":2,"column_end":118}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455960,"byte_end":455963,"line_start":484,"line_end":484,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455965,"byte_end":455986,"line_start":485,"line_end":485,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455988,"byte_end":455991,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":455993,"byte_end":456064,"line_start":487,"line_end":487,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456066,"byte_end":456140,"line_start":488,"line_end":488,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456142,"byte_end":456215,"line_start":489,"line_end":489,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456217,"byte_end":456224,"line_start":490,"line_end":490,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456226,"byte_end":456229,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456231,"byte_end":456245,"line_start":492,"line_end":492,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456247,"byte_end":456250,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456252,"byte_end":456263,"line_start":494,"line_end":494,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456265,"byte_end":456292,"line_start":495,"line_end":495,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456294,"byte_end":456297,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456299,"byte_end":456327,"line_start":497,"line_end":497,"column_start":2,"column_end":30}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456329,"byte_end":456341,"line_start":498,"line_end":498,"column_start":2,"column_end":14}},{"value":"/   let mut bit = x.get_unchecked_mut(1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456343,"byte_end":456386,"line_start":499,"line_end":499,"column_start":2,"column_end":45}},{"value":"/   *bit = true;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456388,"byte_end":456406,"line_start":500,"line_end":500,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456408,"byte_end":456413,"line_start":501,"line_end":501,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456415,"byte_end":456449,"line_start":502,"line_end":502,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456451,"byte_end":456458,"line_start":503,"line_end":503,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456460,"byte_end":456463,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456465,"byte_end":456499,"line_start":505,"line_end":505,"column_start":2,"column_end":36}},{"value":"/ [`get_mut`]: Self::get_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456501,"byte_end":456531,"line_start":506,"line_end":506,"column_start":2,"column_end":32}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456533,"byte_end":456629,"line_start":507,"line_end":507,"column_start":2,"column_end":98}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456631,"byte_end":456667,"line_start":508,"line_end":508,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456704,"byte_end":456718,"line_start":509,"line_end":509,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2582},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457006,"byte_end":457012,"line_start":519,"line_end":519,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitSlice<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456884,"byte_end":456901,"line_start":516,"line_end":516,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456903,"byte_end":456933,"line_start":517,"line_end":517,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitptr` to access the region pointer\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":456935,"byte_end":456997,"line_start":518,"line_end":518,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2583},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457214,"byte_end":457226,"line_start":527,"line_end":527,"column_start":9,"column_end":21},"name":"as_ptr_range","qualname":"<BitSlice<O, T>>::as_ptr_range","value":"pub fn as_ptr_range(&Self) -> BitPtrRange<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457085,"byte_end":457102,"line_start":524,"line_end":524,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457104,"byte_end":457134,"line_start":525,"line_end":525,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitptr_range` to access the region pointers\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457136,"byte_end":457205,"line_start":526,"line_end":526,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2584},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457436,"byte_end":457446,"line_start":535,"line_end":535,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitSlice<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457310,"byte_end":457327,"line_start":532,"line_end":532,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457329,"byte_end":457359,"line_start":533,"line_end":533,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitptr` to access the region pointer\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457361,"byte_end":457427,"line_start":534,"line_end":534,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2585},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457658,"byte_end":457674,"line_start":543,"line_end":543,"column_start":9,"column_end":25},"name":"as_mut_ptr_range","qualname":"<BitSlice<O, T>>::as_mut_ptr_range","value":"pub fn as_mut_ptr_range(&mut Self) -> BitPtrRange<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457525,"byte_end":457542,"line_start":540,"line_end":540,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457544,"byte_end":457574,"line_start":541,"line_end":541,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitptr_range` to access the region pointers\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457576,"byte_end":457649,"line_start":542,"line_end":542,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2586},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458269,"byte_end":458273,"line_start":572,"line_end":572,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitSlice<O, T>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457748,"byte_end":457780,"line_start":547,"line_end":547,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457782,"byte_end":457785,"line_start":548,"line_end":548,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457787,"byte_end":457801,"line_start":549,"line_end":549,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457803,"byte_end":457806,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.swap)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457808,"byte_end":457898,"line_start":551,"line_end":551,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457900,"byte_end":457903,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ # Arguments","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457905,"byte_end":457920,"line_start":553,"line_end":553,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457922,"byte_end":457925,"line_start":554,"line_end":554,"column_start":2,"column_end":5}},{"value":"/ - `a`: The index of the first bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457927,"byte_end":457964,"line_start":555,"line_end":555,"column_start":2,"column_end":39}},{"value":"/ - `b`: The index of the second bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":457966,"byte_end":458004,"line_start":556,"line_end":556,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458006,"byte_end":458009,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458011,"byte_end":458023,"line_start":558,"line_end":558,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458025,"byte_end":458028,"line_start":559,"line_end":559,"column_start":2,"column_end":5}},{"value":"/ Panics if `a` or `b` are out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458030,"byte_end":458073,"line_start":560,"line_end":560,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458075,"byte_end":458078,"line_start":561,"line_end":561,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458080,"byte_end":458094,"line_start":562,"line_end":562,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458096,"byte_end":458099,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458101,"byte_end":458112,"line_start":564,"line_end":564,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458114,"byte_end":458141,"line_start":565,"line_end":565,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458143,"byte_end":458146,"line_start":566,"line_end":566,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 1, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458148,"byte_end":458182,"line_start":567,"line_end":567,"column_start":2,"column_end":36}},{"value":"/ v.swap(1, 3);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458184,"byte_end":458201,"line_start":568,"line_end":568,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(v, bits![0, 0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458203,"byte_end":458240,"line_start":569,"line_end":569,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458242,"byte_end":458249,"line_start":570,"line_end":570,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458251,"byte_end":458260,"line_start":571,"line_end":571,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2587},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458814,"byte_end":458821,"line_start":596,"line_end":596,"column_start":9,"column_end":16},"name":"reverse","qualname":"<BitSlice<O, T>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of bits in the slice, in place.","sig":null,"attributes":[{"value":"/ Reverses the order of bits in the slice, in place.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458447,"byte_end":458501,"line_start":580,"line_end":580,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458503,"byte_end":458506,"line_start":581,"line_end":581,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458508,"byte_end":458522,"line_start":582,"line_end":582,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458524,"byte_end":458527,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ [`slice::reverse`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.reverse)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458529,"byte_end":458625,"line_start":584,"line_end":584,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458627,"byte_end":458630,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458632,"byte_end":458646,"line_start":586,"line_end":586,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458648,"byte_end":458651,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458653,"byte_end":458664,"line_start":588,"line_end":588,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458666,"byte_end":458693,"line_start":589,"line_end":589,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458695,"byte_end":458698,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458700,"byte_end":458731,"line_start":591,"line_end":591,"column_start":2,"column_end":33}},{"value":"/ v.reverse();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458733,"byte_end":458749,"line_start":592,"line_end":592,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(v, bits![1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458751,"byte_end":458785,"line_start":593,"line_end":593,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458787,"byte_end":458794,"line_start":594,"line_end":594,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":458796,"byte_end":458805,"line_start":595,"line_end":595,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2588},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461153,"byte_end":461157,"line_start":665,"line_end":665,"column_start":9,"column_end":13},"name":"iter","qualname":"<BitSlice<O, T>>::iter","value":"pub fn iter(&Self) -> Iter<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459913,"byte_end":459952,"line_start":628,"line_end":628,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459954,"byte_end":459957,"line_start":629,"line_end":629,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459959,"byte_end":459973,"line_start":630,"line_end":630,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459975,"byte_end":459978,"line_start":631,"line_end":631,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.iter)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":459980,"byte_end":460070,"line_start":632,"line_end":632,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460072,"byte_end":460075,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460077,"byte_end":460098,"line_start":634,"line_end":634,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460100,"byte_end":460103,"line_start":635,"line_end":635,"column_start":2,"column_end":5}},{"value":"/ This iterator yields [`BitRef`] proxy references, rather than `&bool`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460105,"byte_end":460178,"line_start":636,"line_end":636,"column_start":2,"column_end":75}},{"value":"/ ordinary references. It does so in order to promote consistency in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460180,"byte_end":460254,"line_start":637,"line_end":637,"column_start":2,"column_end":76}},{"value":"/ crate, and make switching between immutable and mutable single-bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460256,"byte_end":460326,"line_start":638,"line_end":638,"column_start":2,"column_end":72}},{"value":"/ access easier.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460328,"byte_end":460346,"line_start":639,"line_end":639,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460348,"byte_end":460351,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ The produced iterator has a [`by_ref`] adapter that yields `&bool`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460353,"byte_end":460423,"line_start":641,"line_end":641,"column_start":2,"column_end":72}},{"value":"/ references, and a [`by_val`] adapter that yields `bool` values. Use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460425,"byte_end":460496,"line_start":642,"line_end":642,"column_start":2,"column_end":73}},{"value":"/ these methods to fit this iterator into APIs that expect ordinary `bool`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460498,"byte_end":460574,"line_start":643,"line_end":643,"column_start":2,"column_end":78}},{"value":"/ inputs.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460576,"byte_end":460587,"line_start":644,"line_end":644,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460589,"byte_end":460592,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460594,"byte_end":460608,"line_start":646,"line_end":646,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460610,"byte_end":460613,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460615,"byte_end":460626,"line_start":648,"line_end":648,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460628,"byte_end":460655,"line_start":649,"line_end":649,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460657,"byte_end":460660,"line_start":650,"line_end":650,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460662,"byte_end":460689,"line_start":651,"line_end":651,"column_start":2,"column_end":29}},{"value":"/ let mut iterator = x.iter();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460691,"byte_end":460723,"line_start":652,"line_end":652,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460725,"byte_end":460728,"line_start":653,"line_end":653,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&false));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460730,"byte_end":460787,"line_start":654,"line_end":654,"column_start":2,"column_end":59}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&false));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460789,"byte_end":460846,"line_start":655,"line_end":655,"column_start":2,"column_end":59}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&true));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460848,"byte_end":460904,"line_start":656,"line_end":656,"column_start":2,"column_end":58}},{"value":"/ assert_eq!(iterator.next().as_deref(), None);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460906,"byte_end":460955,"line_start":657,"line_end":657,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460957,"byte_end":460964,"line_start":658,"line_end":658,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460966,"byte_end":460969,"line_start":659,"line_end":659,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":460971,"byte_end":461005,"line_start":660,"line_end":660,"column_start":2,"column_end":36}},{"value":"/ [`by_ref`]: crate::slice::Iter::by_ref","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461007,"byte_end":461049,"line_start":661,"line_end":661,"column_start":2,"column_end":44}},{"value":"/ [`by_val`]: crate::slice::Iter::by_val","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461051,"byte_end":461093,"line_start":662,"line_end":662,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461095,"byte_end":461112,"line_start":663,"line_end":663,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461114,"byte_end":461144,"line_start":664,"line_end":664,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2589},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462391,"byte_end":462399,"line_start":705,"line_end":705,"column_start":9,"column_end":17},"name":"iter_mut","qualname":"<BitSlice<O, T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each bit.","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each bit.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461204,"byte_end":461259,"line_start":669,"line_end":669,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461261,"byte_end":461264,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461266,"byte_end":461280,"line_start":671,"line_end":671,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461282,"byte_end":461285,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.iter_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461287,"byte_end":461385,"line_start":673,"line_end":673,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461387,"byte_end":461390,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461392,"byte_end":461413,"line_start":675,"line_end":675,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461415,"byte_end":461418,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461420,"byte_end":461491,"line_start":677,"line_end":677,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461493,"byte_end":461567,"line_start":678,"line_end":678,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461569,"byte_end":461642,"line_start":679,"line_end":679,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461644,"byte_end":461651,"line_start":680,"line_end":680,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461653,"byte_end":461656,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461658,"byte_end":461731,"line_start":682,"line_end":682,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461733,"byte_end":461803,"line_start":683,"line_end":683,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461805,"byte_end":461874,"line_start":684,"line_end":684,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461876,"byte_end":461952,"line_start":685,"line_end":685,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":461954,"byte_end":462009,"line_start":686,"line_end":686,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462011,"byte_end":462014,"line_start":687,"line_end":687,"column_start":2,"column_end":5}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462016,"byte_end":462019,"line_start":688,"line_end":688,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462021,"byte_end":462035,"line_start":689,"line_end":689,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462037,"byte_end":462040,"line_start":690,"line_end":690,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462042,"byte_end":462053,"line_start":691,"line_end":691,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462055,"byte_end":462082,"line_start":692,"line_end":692,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462084,"byte_end":462087,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462089,"byte_end":462120,"line_start":694,"line_end":694,"column_start":2,"column_end":33}},{"value":"/ for mut bit in x.iter_mut() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462122,"byte_end":462155,"line_start":695,"line_end":695,"column_start":2,"column_end":35}},{"value":"/   *bit = !*bit;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462157,"byte_end":462176,"line_start":696,"line_end":696,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462178,"byte_end":462183,"line_start":697,"line_end":697,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462185,"byte_end":462219,"line_start":698,"line_end":698,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462221,"byte_end":462228,"line_start":699,"line_end":699,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462230,"byte_end":462233,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462235,"byte_end":462269,"line_start":701,"line_end":701,"column_start":2,"column_end":36}},{"value":"/ [`.remove_alias()`]: crate::slice::IterMut::remove_alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462271,"byte_end":462331,"line_start":702,"line_end":702,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462333,"byte_end":462350,"line_start":703,"line_end":703,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462352,"byte_end":462382,"line_start":704,"line_end":704,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2590},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463383,"byte_end":463390,"line_start":744,"line_end":744,"column_start":9,"column_end":16},"name":"windows","qualname":"<BitSlice<O, T>>::windows","value":"pub fn windows(&Self, usize) -> Windows<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all contiguous windows of length `size`. The\n windows overlap. If the slice is shorter than `size`, the iterator\n returns no values.","sig":null,"attributes":[{"value":"/ Returns an iterator over all contiguous windows of length `size`. The","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462456,"byte_end":462529,"line_start":709,"line_end":709,"column_start":2,"column_end":75}},{"value":"/ windows overlap. If the slice is shorter than `size`, the iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462531,"byte_end":462601,"line_start":710,"line_end":710,"column_start":2,"column_end":72}},{"value":"/ returns no values.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462603,"byte_end":462625,"line_start":711,"line_end":711,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462627,"byte_end":462630,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462632,"byte_end":462646,"line_start":713,"line_end":713,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462648,"byte_end":462651,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ [`slice::windows`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.windows)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462653,"byte_end":462749,"line_start":715,"line_end":715,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462751,"byte_end":462754,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462756,"byte_end":462768,"line_start":717,"line_end":717,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462770,"byte_end":462773,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ Panics if `size` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462775,"byte_end":462801,"line_start":719,"line_end":719,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462803,"byte_end":462806,"line_start":720,"line_end":720,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462808,"byte_end":462822,"line_start":721,"line_end":721,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462824,"byte_end":462827,"line_start":722,"line_end":722,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462829,"byte_end":462840,"line_start":723,"line_end":723,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462842,"byte_end":462869,"line_start":724,"line_end":724,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462871,"byte_end":462874,"line_start":725,"line_end":725,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462876,"byte_end":462910,"line_start":726,"line_end":726,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.windows(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462912,"byte_end":462948,"line_start":727,"line_end":727,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0; 2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":462950,"byte_end":463000,"line_start":728,"line_end":728,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463002,"byte_end":463052,"line_start":729,"line_end":729,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463054,"byte_end":463104,"line_start":730,"line_end":730,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463106,"byte_end":463141,"line_start":731,"line_end":731,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463143,"byte_end":463150,"line_start":732,"line_end":732,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463152,"byte_end":463155,"line_start":733,"line_end":733,"column_start":2,"column_end":5}},{"value":"/ If the slice is shorter than `size`:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463157,"byte_end":463197,"line_start":734,"line_end":734,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463199,"byte_end":463202,"line_start":735,"line_end":735,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463204,"byte_end":463215,"line_start":736,"line_end":736,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463217,"byte_end":463244,"line_start":737,"line_end":737,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463246,"byte_end":463249,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463251,"byte_end":463279,"line_start":739,"line_end":739,"column_start":2,"column_end":30}},{"value":"/ let mut iter = slice.windows(4);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463281,"byte_end":463317,"line_start":740,"line_end":740,"column_start":2,"column_end":38}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463319,"byte_end":463354,"line_start":741,"line_end":741,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463356,"byte_end":463363,"line_start":742,"line_end":742,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463365,"byte_end":463374,"line_start":743,"line_end":743,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2591},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464646,"byte_end":464652,"line_start":784,"line_end":784,"column_start":9,"column_end":15},"name":"chunks","qualname":"<BitSlice<O, T>>::chunks","value":"pub fn chunks(&Self, usize) -> Chunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463513,"byte_end":463583,"line_start":749,"line_end":749,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463585,"byte_end":463628,"line_start":750,"line_end":750,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463630,"byte_end":463633,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463635,"byte_end":463705,"line_start":752,"line_end":752,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463707,"byte_end":463783,"line_start":753,"line_end":753,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463785,"byte_end":463802,"line_start":754,"line_end":754,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463804,"byte_end":463807,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_exact()`] for a variant of this iterator that returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463809,"byte_end":463880,"line_start":756,"line_end":756,"column_start":2,"column_end":73}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.rchunks()`] for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463882,"byte_end":463956,"line_start":757,"line_end":757,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":463958,"byte_end":464013,"line_start":758,"line_end":758,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464015,"byte_end":464018,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464020,"byte_end":464034,"line_start":760,"line_end":760,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464036,"byte_end":464039,"line_start":761,"line_end":761,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464041,"byte_end":464135,"line_start":762,"line_end":762,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464137,"byte_end":464140,"line_start":763,"line_end":763,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464142,"byte_end":464154,"line_start":764,"line_end":764,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464156,"byte_end":464159,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464161,"byte_end":464193,"line_start":766,"line_end":766,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464195,"byte_end":464198,"line_start":767,"line_end":767,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464200,"byte_end":464214,"line_start":768,"line_end":768,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464216,"byte_end":464219,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464221,"byte_end":464232,"line_start":770,"line_end":770,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464234,"byte_end":464261,"line_start":771,"line_end":771,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464263,"byte_end":464266,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464268,"byte_end":464305,"line_start":773,"line_end":773,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.chunks(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464307,"byte_end":464342,"line_start":774,"line_end":774,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464344,"byte_end":464394,"line_start":775,"line_end":775,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464396,"byte_end":464446,"line_start":776,"line_end":776,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464448,"byte_end":464495,"line_start":777,"line_end":777,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464497,"byte_end":464532,"line_start":778,"line_end":778,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464534,"byte_end":464541,"line_start":779,"line_end":779,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464543,"byte_end":464546,"line_start":780,"line_end":780,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464548,"byte_end":464591,"line_start":781,"line_end":781,"column_start":2,"column_end":45}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464593,"byte_end":464626,"line_start":782,"line_end":782,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464628,"byte_end":464637,"line_start":783,"line_end":783,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2592},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466393,"byte_end":466403,"line_start":837,"line_end":837,"column_start":9,"column_end":19},"name":"chunks_mut","qualname":"<BitSlice<O, T>>::chunks_mut","value":"pub fn chunks_mut(&mut Self, usize) -> ChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464790,"byte_end":464860,"line_start":789,"line_end":789,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464862,"byte_end":464905,"line_start":790,"line_end":790,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464907,"byte_end":464910,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464912,"byte_end":464987,"line_start":792,"line_end":792,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":464989,"byte_end":465062,"line_start":793,"line_end":793,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465064,"byte_end":465088,"line_start":794,"line_end":794,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465090,"byte_end":465093,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_exact_mut()`] for a variant of this iterator that returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465095,"byte_end":465170,"line_start":796,"line_end":796,"column_start":2,"column_end":77}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.rchunks_mut()`] for","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465172,"byte_end":465246,"line_start":797,"line_end":797,"column_start":2,"column_end":76}},{"value":"/ the same iterator but starting at the end of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465248,"byte_end":465307,"line_start":798,"line_end":798,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465309,"byte_end":465312,"line_start":799,"line_end":799,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465314,"byte_end":465328,"line_start":800,"line_end":800,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465330,"byte_end":465333,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465335,"byte_end":465437,"line_start":802,"line_end":802,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465439,"byte_end":465442,"line_start":803,"line_end":803,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465444,"byte_end":465465,"line_start":804,"line_end":804,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465467,"byte_end":465470,"line_start":805,"line_end":805,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465472,"byte_end":465545,"line_start":806,"line_end":806,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465547,"byte_end":465617,"line_start":807,"line_end":807,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465619,"byte_end":465688,"line_start":808,"line_end":808,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465690,"byte_end":465766,"line_start":809,"line_end":809,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465768,"byte_end":465823,"line_start":810,"line_end":810,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465825,"byte_end":465828,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465830,"byte_end":465842,"line_start":812,"line_end":812,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465844,"byte_end":465847,"line_start":813,"line_end":813,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465849,"byte_end":465881,"line_start":814,"line_end":814,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465883,"byte_end":465886,"line_start":815,"line_end":815,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465888,"byte_end":465902,"line_start":816,"line_end":816,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465904,"byte_end":465907,"line_start":817,"line_end":817,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465909,"byte_end":465920,"line_start":818,"line_end":818,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465922,"byte_end":465949,"line_start":819,"line_end":819,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465951,"byte_end":465954,"line_start":820,"line_end":820,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465956,"byte_end":465984,"line_start":821,"line_end":821,"column_start":2,"column_end":30}},{"value":"/ let mut count = 1;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":465986,"byte_end":466008,"line_start":822,"line_end":822,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466010,"byte_end":466013,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.chunks_mut(2) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466015,"byte_end":466049,"line_start":824,"line_end":824,"column_start":2,"column_end":36}},{"value":"/   for mut bit in chunk.iter_mut() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466051,"byte_end":466090,"line_start":825,"line_end":825,"column_start":2,"column_end":41}},{"value":"/     *bit = count % 2 == 0;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466092,"byte_end":466122,"line_start":826,"line_end":826,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466124,"byte_end":466131,"line_start":827,"line_end":827,"column_start":2,"column_end":9}},{"value":"/   count += 1;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466133,"byte_end":466150,"line_start":828,"line_end":828,"column_start":2,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466152,"byte_end":466157,"line_start":829,"line_end":829,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 0, 1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466159,"byte_end":466199,"line_start":830,"line_end":830,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466201,"byte_end":466208,"line_start":831,"line_end":831,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466210,"byte_end":466213,"line_start":832,"line_end":832,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466215,"byte_end":466266,"line_start":833,"line_end":833,"column_start":2,"column_end":53}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466268,"byte_end":466309,"line_start":834,"line_end":834,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksMut::remove_alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466311,"byte_end":466373,"line_start":835,"line_end":835,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466375,"byte_end":466384,"line_start":836,"line_end":836,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2593},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468000,"byte_end":468012,"line_start":883,"line_end":883,"column_start":9,"column_end":21},"name":"chunks_exact","qualname":"<BitSlice<O, T>>::chunks_exact","value":"pub fn chunks_exact(&Self, usize) -> ChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466551,"byte_end":466621,"line_start":842,"line_end":842,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466623,"byte_end":466666,"line_start":843,"line_end":843,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466668,"byte_end":466671,"line_start":844,"line_end":844,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466673,"byte_end":466743,"line_start":845,"line_end":845,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466745,"byte_end":466820,"line_start":846,"line_end":846,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the [`.remainder()`] method of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466822,"byte_end":466898,"line_start":847,"line_end":847,"column_start":2,"column_end":78}},{"value":"/ the iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466900,"byte_end":466917,"line_start":848,"line_end":848,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466919,"byte_end":466922,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":466924,"byte_end":466999,"line_start":850,"line_end":850,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467001,"byte_end":467067,"line_start":851,"line_end":851,"column_start":2,"column_end":68}},{"value":"/ [`.chunks()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467069,"byte_end":467087,"line_start":852,"line_end":852,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467089,"byte_end":467092,"line_start":853,"line_end":853,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks()`] for a variant of this iterator that also returns the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467094,"byte_end":467168,"line_start":854,"line_end":854,"column_start":2,"column_end":76}},{"value":"/ remainder as a smaller chunk, and [`.rchunks_exact()`] for the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467170,"byte_end":467241,"line_start":855,"line_end":855,"column_start":2,"column_end":73}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467243,"byte_end":467293,"line_start":856,"line_end":856,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467295,"byte_end":467298,"line_start":857,"line_end":857,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467300,"byte_end":467314,"line_start":858,"line_end":858,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467316,"byte_end":467319,"line_start":859,"line_end":859,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_exact)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467321,"byte_end":467427,"line_start":860,"line_end":860,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467429,"byte_end":467432,"line_start":861,"line_end":861,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467434,"byte_end":467446,"line_start":862,"line_end":862,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467448,"byte_end":467451,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467453,"byte_end":467485,"line_start":864,"line_end":864,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467487,"byte_end":467490,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467492,"byte_end":467506,"line_start":866,"line_end":866,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467508,"byte_end":467511,"line_start":867,"line_end":867,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467513,"byte_end":467524,"line_start":868,"line_end":868,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467526,"byte_end":467553,"line_start":869,"line_end":869,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467555,"byte_end":467558,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467560,"byte_end":467597,"line_start":871,"line_end":871,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.chunks_exact(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467599,"byte_end":467640,"line_start":872,"line_end":872,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467642,"byte_end":467692,"line_start":873,"line_end":873,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467694,"byte_end":467744,"line_start":874,"line_end":874,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467746,"byte_end":467781,"line_start":875,"line_end":875,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467783,"byte_end":467826,"line_start":876,"line_end":876,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467828,"byte_end":467835,"line_start":877,"line_end":877,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467837,"byte_end":467840,"line_start":878,"line_end":878,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467842,"byte_end":467873,"line_start":879,"line_end":879,"column_start":2,"column_end":33}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467875,"byte_end":467920,"line_start":880,"line_end":880,"column_start":2,"column_end":47}},{"value":"/ [`.remainder()`]: crate::slice::ChunksExact::remainder","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467922,"byte_end":467980,"line_start":881,"line_end":881,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":467982,"byte_end":467991,"line_start":882,"line_end":882,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2594},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470013,"byte_end":470029,"line_start":938,"line_end":938,"column_start":9,"column_end":25},"name":"chunks_exact_mut","qualname":"<BitSlice<O, T>>::chunks_exact_mut","value":"pub fn chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468160,"byte_end":468230,"line_start":888,"line_end":888,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468232,"byte_end":468275,"line_start":889,"line_end":889,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468277,"byte_end":468280,"line_start":890,"line_end":890,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468282,"byte_end":468357,"line_start":891,"line_end":891,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468359,"byte_end":468433,"line_start":892,"line_end":892,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the [`.into_remainder()`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468435,"byte_end":468511,"line_start":893,"line_end":893,"column_start":2,"column_end":78}},{"value":"/ method of the iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468513,"byte_end":468540,"line_start":894,"line_end":894,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468542,"byte_end":468545,"line_start":895,"line_end":895,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468547,"byte_end":468622,"line_start":896,"line_end":896,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468624,"byte_end":468690,"line_start":897,"line_end":897,"column_start":2,"column_end":68}},{"value":"/ [`.chunks_mut()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468692,"byte_end":468714,"line_start":898,"line_end":898,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468716,"byte_end":468719,"line_start":899,"line_end":899,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_mut()`] for a variant of this iterator that also returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468721,"byte_end":468795,"line_start":900,"line_end":900,"column_start":2,"column_end":76}},{"value":"/ the remainder as a smaller chunk, and [`.rchunks_exact_mut()`] for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468797,"byte_end":468871,"line_start":901,"line_end":901,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468873,"byte_end":468928,"line_start":902,"line_end":902,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468930,"byte_end":468933,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468935,"byte_end":468949,"line_start":904,"line_end":904,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468951,"byte_end":468954,"line_start":905,"line_end":905,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_exact_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":468956,"byte_end":469070,"line_start":906,"line_end":906,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469072,"byte_end":469075,"line_start":907,"line_end":907,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469077,"byte_end":469098,"line_start":908,"line_end":908,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469100,"byte_end":469103,"line_start":909,"line_end":909,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469105,"byte_end":469178,"line_start":910,"line_end":910,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469180,"byte_end":469250,"line_start":911,"line_end":911,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469252,"byte_end":469321,"line_start":912,"line_end":912,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469323,"byte_end":469399,"line_start":913,"line_end":913,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469401,"byte_end":469456,"line_start":914,"line_end":914,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469458,"byte_end":469461,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469463,"byte_end":469475,"line_start":916,"line_end":916,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469477,"byte_end":469480,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469482,"byte_end":469514,"line_start":918,"line_end":918,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469516,"byte_end":469519,"line_start":919,"line_end":919,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469521,"byte_end":469535,"line_start":920,"line_end":920,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469537,"byte_end":469540,"line_start":921,"line_end":921,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469542,"byte_end":469553,"line_start":922,"line_end":922,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469555,"byte_end":469582,"line_start":923,"line_end":923,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469584,"byte_end":469587,"line_start":924,"line_end":924,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469589,"byte_end":469617,"line_start":925,"line_end":925,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469619,"byte_end":469622,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.chunks_exact_mut(2) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469624,"byte_end":469664,"line_start":927,"line_end":927,"column_start":2,"column_end":42}},{"value":"/   chunk.set_all(true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469666,"byte_end":469692,"line_start":928,"line_end":928,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469694,"byte_end":469699,"line_start":929,"line_end":929,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 1, 1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469701,"byte_end":469741,"line_start":930,"line_end":930,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469743,"byte_end":469750,"line_start":931,"line_end":931,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469752,"byte_end":469755,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469757,"byte_end":469796,"line_start":933,"line_end":933,"column_start":2,"column_end":41}},{"value":"/ [`.into_remainder()`]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469798,"byte_end":469869,"line_start":934,"line_end":934,"column_start":2,"column_end":73}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469871,"byte_end":469924,"line_start":935,"line_end":935,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksExactMut::remove_alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469926,"byte_end":469993,"line_start":936,"line_end":936,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":469995,"byte_end":470004,"line_start":937,"line_end":937,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2595},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471331,"byte_end":471338,"line_start":981,"line_end":981,"column_start":9,"column_end":16},"name":"rchunks","qualname":"<BitSlice<O, T>>::rchunks","value":"pub fn rchunks(&Self, usize) -> RChunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470195,"byte_end":470265,"line_start":946,"line_end":946,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470267,"byte_end":470304,"line_start":947,"line_end":947,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470306,"byte_end":470309,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470311,"byte_end":470381,"line_start":949,"line_end":949,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470383,"byte_end":470459,"line_start":950,"line_end":950,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470461,"byte_end":470478,"line_start":951,"line_end":951,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470480,"byte_end":470483,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_exact()`] for a variant of this iterator that returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470485,"byte_end":470557,"line_start":953,"line_end":953,"column_start":2,"column_end":74}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.chunks()`] for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470559,"byte_end":470632,"line_start":954,"line_end":954,"column_start":2,"column_end":75}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470634,"byte_end":470695,"line_start":955,"line_end":955,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470697,"byte_end":470700,"line_start":956,"line_end":956,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470702,"byte_end":470716,"line_start":957,"line_end":957,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470718,"byte_end":470721,"line_start":958,"line_end":958,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470723,"byte_end":470819,"line_start":959,"line_end":959,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470821,"byte_end":470824,"line_start":960,"line_end":960,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470826,"byte_end":470838,"line_start":961,"line_end":961,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470840,"byte_end":470843,"line_start":962,"line_end":962,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470845,"byte_end":470877,"line_start":963,"line_end":963,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470879,"byte_end":470882,"line_start":964,"line_end":964,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470884,"byte_end":470898,"line_start":965,"line_end":965,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470900,"byte_end":470903,"line_start":966,"line_end":966,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470905,"byte_end":470916,"line_start":967,"line_end":967,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470918,"byte_end":470945,"line_start":968,"line_end":968,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470947,"byte_end":470950,"line_start":969,"line_end":969,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470952,"byte_end":470989,"line_start":970,"line_end":970,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.rchunks(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":470991,"byte_end":471027,"line_start":971,"line_end":971,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471029,"byte_end":471079,"line_start":972,"line_end":972,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471081,"byte_end":471131,"line_start":973,"line_end":973,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471133,"byte_end":471180,"line_start":974,"line_end":974,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471182,"byte_end":471217,"line_start":975,"line_end":975,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471219,"byte_end":471226,"line_start":976,"line_end":976,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471228,"byte_end":471231,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471233,"byte_end":471264,"line_start":978,"line_end":978,"column_start":2,"column_end":33}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471266,"byte_end":471311,"line_start":979,"line_end":979,"column_start":2,"column_end":47}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471313,"byte_end":471322,"line_start":980,"line_end":980,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2596},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473085,"byte_end":473096,"line_start":1034,"line_end":1034,"column_start":9,"column_end":20},"name":"rchunks_mut","qualname":"<BitSlice<O, T>>::rchunks_mut","value":"pub fn rchunks_mut(&mut Self, usize) -> RChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471478,"byte_end":471548,"line_start":986,"line_end":986,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471550,"byte_end":471587,"line_start":987,"line_end":987,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471589,"byte_end":471592,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471594,"byte_end":471669,"line_start":989,"line_end":989,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471671,"byte_end":471744,"line_start":990,"line_end":990,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471746,"byte_end":471770,"line_start":991,"line_end":991,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471772,"byte_end":471775,"line_start":992,"line_end":992,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_exact_mut()`] for a variant of this iterator that returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471777,"byte_end":471853,"line_start":993,"line_end":993,"column_start":2,"column_end":78}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.chunks_mut()`] for","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471855,"byte_end":471928,"line_start":994,"line_end":994,"column_start":2,"column_end":75}},{"value":"/ the same iterator but starting at the beginning of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471930,"byte_end":471995,"line_start":995,"line_end":995,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":471997,"byte_end":472000,"line_start":996,"line_end":996,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472002,"byte_end":472016,"line_start":997,"line_end":997,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472018,"byte_end":472021,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472023,"byte_end":472127,"line_start":999,"line_end":999,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472129,"byte_end":472132,"line_start":1000,"line_end":1000,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472134,"byte_end":472155,"line_start":1001,"line_end":1001,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472157,"byte_end":472160,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472162,"byte_end":472235,"line_start":1003,"line_end":1003,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472237,"byte_end":472307,"line_start":1004,"line_end":1004,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472309,"byte_end":472378,"line_start":1005,"line_end":1005,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472380,"byte_end":472456,"line_start":1006,"line_end":1006,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472458,"byte_end":472513,"line_start":1007,"line_end":1007,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472515,"byte_end":472518,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472520,"byte_end":472532,"line_start":1009,"line_end":1009,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472534,"byte_end":472537,"line_start":1010,"line_end":1010,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472539,"byte_end":472571,"line_start":1011,"line_end":1011,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472573,"byte_end":472576,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472578,"byte_end":472592,"line_start":1013,"line_end":1013,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472594,"byte_end":472597,"line_start":1014,"line_end":1014,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472599,"byte_end":472610,"line_start":1015,"line_end":1015,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472612,"byte_end":472639,"line_start":1016,"line_end":1016,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472641,"byte_end":472644,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472646,"byte_end":472674,"line_start":1018,"line_end":1018,"column_start":2,"column_end":30}},{"value":"/ let mut count = 1;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472676,"byte_end":472698,"line_start":1019,"line_end":1019,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472700,"byte_end":472703,"line_start":1020,"line_end":1020,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.rchunks_mut(2) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472705,"byte_end":472740,"line_start":1021,"line_end":1021,"column_start":2,"column_end":37}},{"value":"/   for mut bit in chunk.iter_mut() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472742,"byte_end":472781,"line_start":1022,"line_end":1022,"column_start":2,"column_end":41}},{"value":"/     *bit = count % 2 == 0;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472783,"byte_end":472813,"line_start":1023,"line_end":1023,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472815,"byte_end":472822,"line_start":1024,"line_end":1024,"column_start":2,"column_end":9}},{"value":"/   count += 1;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472824,"byte_end":472841,"line_start":1025,"line_end":1025,"column_start":2,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472843,"byte_end":472848,"line_start":1026,"line_end":1026,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 1, 0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472850,"byte_end":472890,"line_start":1027,"line_end":1027,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472892,"byte_end":472899,"line_start":1028,"line_end":1028,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472901,"byte_end":472904,"line_start":1029,"line_end":1029,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472906,"byte_end":472945,"line_start":1030,"line_end":1030,"column_start":2,"column_end":41}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":472947,"byte_end":473000,"line_start":1031,"line_end":1031,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::RChunksMut::remove_alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473002,"byte_end":473065,"line_start":1032,"line_end":1032,"column_start":2,"column_end":65}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473067,"byte_end":473076,"line_start":1033,"line_end":1033,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2597},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474699,"byte_end":474712,"line_start":1080,"line_end":1080,"column_start":9,"column_end":22},"name":"rchunks_exact","qualname":"<BitSlice<O, T>>::rchunks_exact","value":"pub fn rchunks_exact(&Self, usize) -> RChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473246,"byte_end":473316,"line_start":1039,"line_end":1039,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473318,"byte_end":473355,"line_start":1040,"line_end":1040,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473357,"byte_end":473360,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473362,"byte_end":473432,"line_start":1042,"line_end":1042,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473434,"byte_end":473509,"line_start":1043,"line_end":1043,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the [`.remainder()`] method of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473511,"byte_end":473587,"line_start":1044,"line_end":1044,"column_start":2,"column_end":78}},{"value":"/ the iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473589,"byte_end":473606,"line_start":1045,"line_end":1045,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473608,"byte_end":473611,"line_start":1046,"line_end":1046,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473613,"byte_end":473688,"line_start":1047,"line_end":1047,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473690,"byte_end":473756,"line_start":1048,"line_end":1048,"column_start":2,"column_end":68}},{"value":"/ [`.rchunks()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473758,"byte_end":473777,"line_start":1049,"line_end":1049,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473779,"byte_end":473782,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks()`] for a variant of this iterator that also returns the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473784,"byte_end":473859,"line_start":1051,"line_end":1051,"column_start":2,"column_end":77}},{"value":"/ remainder as a smaller chunk, and [`.chunks_exact()`] for the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473861,"byte_end":473931,"line_start":1052,"line_end":1052,"column_start":2,"column_end":72}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473933,"byte_end":473989,"line_start":1053,"line_end":1053,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473991,"byte_end":473994,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":473996,"byte_end":474010,"line_start":1055,"line_end":1055,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474012,"byte_end":474015,"line_start":1056,"line_end":1056,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_exact)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474017,"byte_end":474125,"line_start":1057,"line_end":1057,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474127,"byte_end":474130,"line_start":1058,"line_end":1058,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474132,"byte_end":474144,"line_start":1059,"line_end":1059,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474146,"byte_end":474149,"line_start":1060,"line_end":1060,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474151,"byte_end":474183,"line_start":1061,"line_end":1061,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474185,"byte_end":474188,"line_start":1062,"line_end":1062,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474190,"byte_end":474204,"line_start":1063,"line_end":1063,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474206,"byte_end":474209,"line_start":1064,"line_end":1064,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474211,"byte_end":474222,"line_start":1065,"line_end":1065,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474224,"byte_end":474251,"line_start":1066,"line_end":1066,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474253,"byte_end":474256,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474258,"byte_end":474295,"line_start":1068,"line_end":1068,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.rchunks_exact(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474297,"byte_end":474339,"line_start":1069,"line_end":1069,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474341,"byte_end":474391,"line_start":1070,"line_end":1070,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474393,"byte_end":474443,"line_start":1071,"line_end":1071,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474445,"byte_end":474480,"line_start":1072,"line_end":1072,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474482,"byte_end":474525,"line_start":1073,"line_end":1073,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474527,"byte_end":474534,"line_start":1074,"line_end":1074,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474536,"byte_end":474539,"line_start":1075,"line_end":1075,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474541,"byte_end":474584,"line_start":1076,"line_end":1076,"column_start":2,"column_end":45}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474586,"byte_end":474619,"line_start":1077,"line_end":1077,"column_start":2,"column_end":35}},{"value":"/ [`.remainder()`]: crate::slice::ChunksExact::remainder","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474621,"byte_end":474679,"line_start":1078,"line_end":1078,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474681,"byte_end":474690,"line_start":1079,"line_end":1079,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2598},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476719,"byte_end":476736,"line_start":1135,"line_end":1135,"column_start":9,"column_end":26},"name":"rchunks_exact_mut","qualname":"<BitSlice<O, T>>::rchunks_exact_mut","value":"pub fn rchunks_exact_mut(&mut Self, usize) -> RChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474862,"byte_end":474932,"line_start":1085,"line_end":1085,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474934,"byte_end":474971,"line_start":1086,"line_end":1086,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474973,"byte_end":474976,"line_start":1087,"line_end":1087,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":474978,"byte_end":475053,"line_start":1088,"line_end":1088,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475055,"byte_end":475129,"line_start":1089,"line_end":1089,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the [`.into_remainder()`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475131,"byte_end":475207,"line_start":1090,"line_end":1090,"column_start":2,"column_end":78}},{"value":"/ method of the iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475209,"byte_end":475236,"line_start":1091,"line_end":1091,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475238,"byte_end":475241,"line_start":1092,"line_end":1092,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475243,"byte_end":475318,"line_start":1093,"line_end":1093,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475320,"byte_end":475386,"line_start":1094,"line_end":1094,"column_start":2,"column_end":68}},{"value":"/ [`.rchunks_mut()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475388,"byte_end":475411,"line_start":1095,"line_end":1095,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475413,"byte_end":475416,"line_start":1096,"line_end":1096,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_mut()`] for a variant of this iterator that also returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475418,"byte_end":475493,"line_start":1097,"line_end":1097,"column_start":2,"column_end":77}},{"value":"/ the remainder as a smaller chunk, and [`.chunks_exact_mut()`] for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475495,"byte_end":475568,"line_start":1098,"line_end":1098,"column_start":2,"column_end":75}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475570,"byte_end":475631,"line_start":1099,"line_end":1099,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475633,"byte_end":475636,"line_start":1100,"line_end":1100,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475638,"byte_end":475652,"line_start":1101,"line_end":1101,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475654,"byte_end":475657,"line_start":1102,"line_end":1102,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_exact_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475659,"byte_end":475775,"line_start":1103,"line_end":1103,"column_start":2,"column_end":118}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475777,"byte_end":475780,"line_start":1104,"line_end":1104,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475782,"byte_end":475803,"line_start":1105,"line_end":1105,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475805,"byte_end":475808,"line_start":1106,"line_end":1106,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475810,"byte_end":475883,"line_start":1107,"line_end":1107,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475885,"byte_end":475955,"line_start":1108,"line_end":1108,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":475957,"byte_end":476026,"line_start":1109,"line_end":1109,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476028,"byte_end":476104,"line_start":1110,"line_end":1110,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476106,"byte_end":476161,"line_start":1111,"line_end":1111,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476163,"byte_end":476166,"line_start":1112,"line_end":1112,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476168,"byte_end":476180,"line_start":1113,"line_end":1113,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476182,"byte_end":476185,"line_start":1114,"line_end":1114,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476187,"byte_end":476219,"line_start":1115,"line_end":1115,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476221,"byte_end":476224,"line_start":1116,"line_end":1116,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476226,"byte_end":476240,"line_start":1117,"line_end":1117,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476242,"byte_end":476245,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476247,"byte_end":476258,"line_start":1119,"line_end":1119,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476260,"byte_end":476287,"line_start":1120,"line_end":1120,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476289,"byte_end":476292,"line_start":1121,"line_end":1121,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476294,"byte_end":476322,"line_start":1122,"line_end":1122,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476324,"byte_end":476327,"line_start":1123,"line_end":1123,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.rchunks_exact_mut(2) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476329,"byte_end":476370,"line_start":1124,"line_end":1124,"column_start":2,"column_end":43}},{"value":"/   chunk.set_all(true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476372,"byte_end":476398,"line_start":1125,"line_end":1125,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476400,"byte_end":476405,"line_start":1126,"line_end":1126,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 1, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476407,"byte_end":476447,"line_start":1127,"line_end":1127,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476449,"byte_end":476456,"line_start":1128,"line_end":1128,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476458,"byte_end":476461,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476463,"byte_end":476514,"line_start":1130,"line_end":1130,"column_start":2,"column_end":53}},{"value":"/ [`.into_remainder()`]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476516,"byte_end":476587,"line_start":1131,"line_end":1131,"column_start":2,"column_end":73}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476589,"byte_end":476630,"line_start":1132,"line_end":1132,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksExactMut::remove_alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476632,"byte_end":476699,"line_start":1133,"line_end":1133,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476701,"byte_end":476710,"line_start":1134,"line_end":1134,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2599},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478264,"byte_end":478272,"line_start":1191,"line_end":1191,"column_start":9,"column_end":17},"name":"split_at","qualname":"<BitSlice<O, T>>::split_at","value":"pub fn split_at(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476904,"byte_end":476947,"line_start":1143,"line_end":1143,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476949,"byte_end":476952,"line_start":1144,"line_end":1144,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":476954,"byte_end":477029,"line_start":1145,"line_end":1145,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477031,"byte_end":477106,"line_start":1146,"line_end":1146,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477108,"byte_end":477147,"line_start":1147,"line_end":1147,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477149,"byte_end":477152,"line_start":1148,"line_end":1148,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477154,"byte_end":477168,"line_start":1149,"line_end":1149,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477170,"byte_end":477173,"line_start":1150,"line_end":1150,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477175,"byte_end":477273,"line_start":1151,"line_end":1151,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477275,"byte_end":477278,"line_start":1152,"line_end":1152,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477280,"byte_end":477292,"line_start":1153,"line_end":1153,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477294,"byte_end":477297,"line_start":1154,"line_end":1154,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477299,"byte_end":477325,"line_start":1155,"line_end":1155,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477327,"byte_end":477330,"line_start":1156,"line_end":1156,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477332,"byte_end":477346,"line_start":1157,"line_end":1157,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477348,"byte_end":477351,"line_start":1158,"line_end":1158,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477353,"byte_end":477429,"line_start":1159,"line_end":1159,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477431,"byte_end":477506,"line_start":1160,"line_end":1160,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477508,"byte_end":477582,"line_start":1161,"line_end":1161,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477584,"byte_end":477657,"line_start":1162,"line_end":1162,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477659,"byte_end":477732,"line_start":1163,"line_end":1163,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477734,"byte_end":477737,"line_start":1164,"line_end":1164,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477739,"byte_end":477753,"line_start":1165,"line_end":1165,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477755,"byte_end":477758,"line_start":1166,"line_end":1166,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477760,"byte_end":477771,"line_start":1167,"line_end":1167,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477773,"byte_end":477800,"line_start":1168,"line_end":1168,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477802,"byte_end":477805,"line_start":1169,"line_end":1169,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 0, 1, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477807,"byte_end":477843,"line_start":1170,"line_end":1170,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477845,"byte_end":477848,"line_start":1171,"line_end":1171,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477850,"byte_end":477855,"line_start":1172,"line_end":1172,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477857,"byte_end":477897,"line_start":1173,"line_end":1173,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, bits![]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477899,"byte_end":477931,"line_start":1174,"line_end":1174,"column_start":2,"column_end":34}},{"value":"/   assert_eq!(right, v);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477933,"byte_end":477960,"line_start":1175,"line_end":1175,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477962,"byte_end":477967,"line_start":1176,"line_end":1176,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477969,"byte_end":477972,"line_start":1177,"line_end":1177,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477974,"byte_end":477979,"line_start":1178,"line_end":1178,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":477981,"byte_end":478021,"line_start":1179,"line_end":1179,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, bits![0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478023,"byte_end":478059,"line_start":1180,"line_end":1180,"column_start":2,"column_end":38}},{"value":"/   assert_eq!(right, bits![0, 1, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478061,"byte_end":478104,"line_start":1181,"line_end":1181,"column_start":2,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478106,"byte_end":478111,"line_start":1182,"line_end":1182,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478113,"byte_end":478116,"line_start":1183,"line_end":1183,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478118,"byte_end":478123,"line_start":1184,"line_end":1184,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(6);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478125,"byte_end":478165,"line_start":1185,"line_end":1185,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, v);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478167,"byte_end":478193,"line_start":1186,"line_end":1186,"column_start":2,"column_end":28}},{"value":"/   assert_eq!(right, bits![]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478195,"byte_end":478228,"line_start":1187,"line_end":1187,"column_start":2,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478230,"byte_end":478235,"line_start":1188,"line_end":1188,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478237,"byte_end":478244,"line_start":1189,"line_end":1189,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478246,"byte_end":478255,"line_start":1190,"line_end":1190,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2600},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480864,"byte_end":480876,"line_start":1264,"line_end":1264,"column_start":9,"column_end":21},"name":"split_at_mut","qualname":"<BitSlice<O, T>>::split_at_mut","value":"pub fn split_at_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478446,"byte_end":478497,"line_start":1197,"line_end":1197,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478499,"byte_end":478502,"line_start":1198,"line_end":1198,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478504,"byte_end":478579,"line_start":1199,"line_end":1199,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478581,"byte_end":478656,"line_start":1200,"line_end":1200,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478658,"byte_end":478697,"line_start":1201,"line_end":1201,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478699,"byte_end":478702,"line_start":1202,"line_end":1202,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478704,"byte_end":478718,"line_start":1203,"line_end":1203,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478720,"byte_end":478723,"line_start":1204,"line_end":1204,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478725,"byte_end":478831,"line_start":1205,"line_end":1205,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478833,"byte_end":478836,"line_start":1206,"line_end":1206,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478838,"byte_end":478859,"line_start":1207,"line_end":1207,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478861,"byte_end":478864,"line_start":1208,"line_end":1208,"column_start":2,"column_end":5}},{"value":"/ The partition index `mid` may occur anywhere in the slice, and as a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478866,"byte_end":478937,"line_start":1209,"line_end":1209,"column_start":2,"column_end":73}},{"value":"/ result the two returned slices may both have write access to the memory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":478939,"byte_end":479014,"line_start":1210,"line_end":1210,"column_start":2,"column_end":77}},{"value":"/ address containing `mid`. As such, the returned slices must be marked","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479016,"byte_end":479089,"line_start":1211,"line_end":1211,"column_start":2,"column_end":75}},{"value":"/ with [`T::Alias`] in order to correctly manage memory access going","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479091,"byte_end":479161,"line_start":1212,"line_end":1212,"column_start":2,"column_end":72}},{"value":"/ forward.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479163,"byte_end":479175,"line_start":1213,"line_end":1213,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479177,"byte_end":479180,"line_start":1214,"line_end":1214,"column_start":2,"column_end":5}},{"value":"/ This marking is applied to all memory accesses in both slices,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479182,"byte_end":479248,"line_start":1215,"line_end":1215,"column_start":2,"column_end":68}},{"value":"/ regardless of whether any future accesses actually require it. To limit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479250,"byte_end":479325,"line_start":1216,"line_end":1216,"column_start":2,"column_end":77}},{"value":"/ the alias marking to only the addresses that need it, use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479327,"byte_end":479388,"line_start":1217,"line_end":1217,"column_start":2,"column_end":63}},{"value":"/ [`.bit_domain()`] or [`.bit_domain_mut()`] to split either slice into","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479390,"byte_end":479463,"line_start":1218,"line_end":1218,"column_start":2,"column_end":75}},{"value":"/ its aliased and unaliased subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479465,"byte_end":479505,"line_start":1219,"line_end":1219,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479507,"byte_end":479510,"line_start":1220,"line_end":1220,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479512,"byte_end":479524,"line_start":1221,"line_end":1221,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479526,"byte_end":479529,"line_start":1222,"line_end":1222,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479531,"byte_end":479557,"line_start":1223,"line_end":1223,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479559,"byte_end":479562,"line_start":1224,"line_end":1224,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479564,"byte_end":479578,"line_start":1225,"line_end":1225,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479580,"byte_end":479583,"line_start":1226,"line_end":1226,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479585,"byte_end":479661,"line_start":1227,"line_end":1227,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479663,"byte_end":479738,"line_start":1228,"line_end":1228,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479740,"byte_end":479814,"line_start":1229,"line_end":1229,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479816,"byte_end":479889,"line_start":1230,"line_end":1230,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479891,"byte_end":479964,"line_start":1231,"line_end":1231,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479966,"byte_end":479969,"line_start":1232,"line_end":1232,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479971,"byte_end":479985,"line_start":1233,"line_end":1233,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479987,"byte_end":479990,"line_start":1234,"line_end":1234,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":479992,"byte_end":480003,"line_start":1235,"line_end":1235,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480005,"byte_end":480032,"line_start":1236,"line_end":1236,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480034,"byte_end":480037,"line_start":1237,"line_end":1237,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 0, 1, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480039,"byte_end":480079,"line_start":1238,"line_end":1238,"column_start":2,"column_end":42}},{"value":"/ // scoped to restrict the lifetime of the borrows","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480081,"byte_end":480134,"line_start":1239,"line_end":1239,"column_start":2,"column_end":55}},{"value":"/ {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480136,"byte_end":480141,"line_start":1240,"line_end":1240,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at_mut(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480143,"byte_end":480187,"line_start":1241,"line_end":1241,"column_start":2,"column_end":46}},{"value":"/   assert_eq!(left, bits![0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480189,"byte_end":480225,"line_start":1242,"line_end":1242,"column_start":2,"column_end":38}},{"value":"/   assert_eq!(right, bits![0, 1, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480227,"byte_end":480270,"line_start":1243,"line_end":1243,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480272,"byte_end":480275,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/   left.set(1, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480277,"byte_end":480301,"line_start":1245,"line_end":1245,"column_start":2,"column_end":26}},{"value":"/   right.set(1, false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480303,"byte_end":480329,"line_start":1246,"line_end":1246,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480331,"byte_end":480336,"line_start":1247,"line_end":1247,"column_start":2,"column_end":7}},{"value":"/ {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480338,"byte_end":480343,"line_start":1248,"line_end":1248,"column_start":2,"column_end":7}},{"value":"/   let mut v = bits![mut 0; 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480345,"byte_end":480379,"line_start":1249,"line_end":1249,"column_start":2,"column_end":36}},{"value":"/   let (left, right) = v.split_at_mut(0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480381,"byte_end":480425,"line_start":1250,"line_end":1250,"column_start":2,"column_end":46}},{"value":"/   assert!(left.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480427,"byte_end":480458,"line_start":1251,"line_end":1251,"column_start":2,"column_end":33}},{"value":"/   assert!(right.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480460,"byte_end":480492,"line_start":1252,"line_end":1252,"column_start":2,"column_end":34}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480494,"byte_end":480499,"line_start":1253,"line_end":1253,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 0, 0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480501,"byte_end":480544,"line_start":1254,"line_end":1254,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480546,"byte_end":480553,"line_start":1255,"line_end":1255,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480555,"byte_end":480558,"line_start":1256,"line_end":1256,"column_start":2,"column_end":5}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480560,"byte_end":480607,"line_start":1257,"line_end":1257,"column_start":2,"column_end":49}},{"value":"/ [`.bit_domain`()]: Self::bit_domain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480609,"byte_end":480648,"line_start":1258,"line_end":1258,"column_start":2,"column_end":41}},{"value":"/ [`.bit_domain_mut`()]: Self::bit_domain_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480650,"byte_end":480697,"line_start":1259,"line_end":1259,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480811,"byte_end":480820,"line_start":1262,"line_end":1262,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":480822,"byte_end":480855,"line_start":1263,"line_end":1263,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2601},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482846,"byte_end":482851,"line_start":1329,"line_end":1329,"column_start":9,"column_end":14},"name":"split","qualname":"<BitSlice<O, T>>::split","value":"pub fn split<F>(&Self, F) -> Split<, O, T, F> where F: FnMut(usize, &bool) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`.\n The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481069,"byte_end":481144,"line_start":1272,"line_end":1272,"column_start":2,"column_end":77}},{"value":"/ The matched bit is not contained in the subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481146,"byte_end":481200,"line_start":1273,"line_end":1273,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481202,"byte_end":481205,"line_start":1274,"line_end":1274,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481207,"byte_end":481221,"line_start":1275,"line_end":1275,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481223,"byte_end":481226,"line_start":1276,"line_end":1276,"column_start":2,"column_end":5}},{"value":"/ [`slice::split`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481228,"byte_end":481320,"line_start":1277,"line_end":1277,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481322,"byte_end":481325,"line_start":1278,"line_end":1278,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481327,"byte_end":481348,"line_start":1279,"line_end":1279,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481350,"byte_end":481353,"line_start":1280,"line_end":1280,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481355,"byte_end":481423,"line_start":1281,"line_end":1281,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481425,"byte_end":481499,"line_start":1282,"line_end":1282,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481501,"byte_end":481511,"line_start":1283,"line_end":1283,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481513,"byte_end":481516,"line_start":1284,"line_end":1284,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481518,"byte_end":481532,"line_start":1285,"line_end":1285,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481534,"byte_end":481537,"line_start":1286,"line_end":1286,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481539,"byte_end":481550,"line_start":1287,"line_end":1287,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481552,"byte_end":481579,"line_start":1288,"line_end":1288,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481581,"byte_end":481584,"line_start":1289,"line_end":1289,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481586,"byte_end":481620,"line_start":1290,"line_end":1290,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.split(|pos, _bit| pos % 3 == 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481622,"byte_end":481679,"line_start":1291,"line_end":1291,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481681,"byte_end":481684,"line_start":1292,"line_end":1292,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481686,"byte_end":481736,"line_start":1293,"line_end":1293,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481738,"byte_end":481785,"line_start":1294,"line_end":1294,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481787,"byte_end":481822,"line_start":1295,"line_end":1295,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481824,"byte_end":481831,"line_start":1296,"line_end":1296,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481833,"byte_end":481836,"line_start":1297,"line_end":1297,"column_start":2,"column_end":5}},{"value":"/ If the first bit is matched, an empty slice will be the first item","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481838,"byte_end":481908,"line_start":1298,"line_end":1298,"column_start":2,"column_end":72}},{"value":"/ returned by the iterator. Similarly, if the last bit in the slice is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481910,"byte_end":481982,"line_start":1299,"line_end":1299,"column_start":2,"column_end":74}},{"value":"/ matched, an empty slice will be the last item returned by the iterator:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":481984,"byte_end":482059,"line_start":1300,"line_end":1300,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482061,"byte_end":482064,"line_start":1301,"line_end":1301,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482066,"byte_end":482077,"line_start":1302,"line_end":1302,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482079,"byte_end":482106,"line_start":1303,"line_end":1303,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482108,"byte_end":482111,"line_start":1304,"line_end":1304,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482113,"byte_end":482144,"line_start":1305,"line_end":1305,"column_start":2,"column_end":33}},{"value":"/ let mut iter = slice.split(|_pos, bit| *bit);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482146,"byte_end":482195,"line_start":1306,"line_end":1306,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482197,"byte_end":482200,"line_start":1307,"line_end":1307,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482202,"byte_end":482252,"line_start":1308,"line_end":1308,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482254,"byte_end":482300,"line_start":1309,"line_end":1309,"column_start":2,"column_end":48}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482302,"byte_end":482337,"line_start":1310,"line_end":1310,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482339,"byte_end":482346,"line_start":1311,"line_end":1311,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482348,"byte_end":482351,"line_start":1312,"line_end":1312,"column_start":2,"column_end":5}},{"value":"/ If two matched bits are directly adjacent, an empty slice will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482353,"byte_end":482422,"line_start":1313,"line_end":1313,"column_start":2,"column_end":71}},{"value":"/ present between them:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482424,"byte_end":482449,"line_start":1314,"line_end":1314,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482451,"byte_end":482454,"line_start":1315,"line_end":1315,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482456,"byte_end":482467,"line_start":1316,"line_end":1316,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482469,"byte_end":482496,"line_start":1317,"line_end":1317,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482498,"byte_end":482501,"line_start":1318,"line_end":1318,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482503,"byte_end":482537,"line_start":1319,"line_end":1319,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.split(|_pos, bit| !*bit);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482539,"byte_end":482589,"line_start":1320,"line_end":1320,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482591,"byte_end":482594,"line_start":1321,"line_end":1321,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482596,"byte_end":482643,"line_start":1322,"line_end":1322,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482645,"byte_end":482691,"line_start":1323,"line_end":1323,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482693,"byte_end":482740,"line_start":1324,"line_end":1324,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482742,"byte_end":482777,"line_start":1325,"line_end":1325,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482779,"byte_end":482786,"line_start":1326,"line_end":1326,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482788,"byte_end":482805,"line_start":1327,"line_end":1327,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482807,"byte_end":482837,"line_start":1328,"line_end":1328,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2603},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484156,"byte_end":484165,"line_start":1368,"line_end":1368,"column_start":9,"column_end":18},"name":"split_mut","qualname":"<BitSlice<O, T>>::split_mut","value":"pub fn split_mut<F>(&mut Self, F) -> SplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`. The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":482959,"byte_end":483034,"line_start":1334,"line_end":1334,"column_start":2,"column_end":77}},{"value":"/ `pred`. The matched bit is not contained in the subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483036,"byte_end":483098,"line_start":1335,"line_end":1335,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483100,"byte_end":483103,"line_start":1336,"line_end":1336,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483105,"byte_end":483119,"line_start":1337,"line_end":1337,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483121,"byte_end":483124,"line_start":1338,"line_end":1338,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483126,"byte_end":483226,"line_start":1339,"line_end":1339,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483228,"byte_end":483231,"line_start":1340,"line_end":1340,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483233,"byte_end":483254,"line_start":1341,"line_end":1341,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483256,"byte_end":483259,"line_start":1342,"line_end":1342,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483261,"byte_end":483329,"line_start":1343,"line_end":1343,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483331,"byte_end":483405,"line_start":1344,"line_end":1344,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483407,"byte_end":483417,"line_start":1345,"line_end":1345,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483419,"byte_end":483422,"line_start":1346,"line_end":1346,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483424,"byte_end":483497,"line_start":1347,"line_end":1347,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483499,"byte_end":483569,"line_start":1348,"line_end":1348,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483571,"byte_end":483640,"line_start":1349,"line_end":1349,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483642,"byte_end":483718,"line_start":1350,"line_end":1350,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483720,"byte_end":483775,"line_start":1351,"line_end":1351,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483777,"byte_end":483780,"line_start":1352,"line_end":1352,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483782,"byte_end":483796,"line_start":1353,"line_end":1353,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483798,"byte_end":483801,"line_start":1354,"line_end":1354,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483803,"byte_end":483814,"line_start":1355,"line_end":1355,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483816,"byte_end":483843,"line_start":1356,"line_end":1356,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483845,"byte_end":483848,"line_start":1357,"line_end":1357,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483850,"byte_end":483890,"line_start":1358,"line_end":1358,"column_start":2,"column_end":42}},{"value":"/ for group in v.split_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483892,"byte_end":483940,"line_start":1359,"line_end":1359,"column_start":2,"column_end":50}},{"value":"/   group.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483942,"byte_end":483967,"line_start":1360,"line_end":1360,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483969,"byte_end":483974,"line_start":1361,"line_end":1361,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":483976,"byte_end":484019,"line_start":1362,"line_end":1362,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484021,"byte_end":484028,"line_start":1363,"line_end":1363,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484030,"byte_end":484033,"line_start":1364,"line_end":1364,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitMut::remove_alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484035,"byte_end":484096,"line_start":1365,"line_end":1365,"column_start":2,"column_end":63}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484098,"byte_end":484115,"line_start":1366,"line_end":1366,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484117,"byte_end":484147,"line_start":1367,"line_end":1367,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2605},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485742,"byte_end":485748,"line_start":1418,"line_end":1418,"column_start":9,"column_end":15},"name":"rsplit","qualname":"<BitSlice<O, T>>::rsplit","value":"pub fn rsplit<F>(&Self, F) -> RSplit<, O, T, F> where F: FnMut(usize, &bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n starting at the end of the slice and working backwards. The matched bit\n is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484295,"byte_end":484370,"line_start":1373,"line_end":1373,"column_start":2,"column_end":77}},{"value":"/ starting at the end of the slice and working backwards. The matched bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484372,"byte_end":484447,"line_start":1374,"line_end":1374,"column_start":2,"column_end":77}},{"value":"/ is not contained in the subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484449,"byte_end":484487,"line_start":1375,"line_end":1375,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484489,"byte_end":484492,"line_start":1376,"line_end":1376,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484494,"byte_end":484508,"line_start":1377,"line_end":1377,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484510,"byte_end":484513,"line_start":1378,"line_end":1378,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplit)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484515,"byte_end":484609,"line_start":1379,"line_end":1379,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484611,"byte_end":484614,"line_start":1380,"line_end":1380,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484616,"byte_end":484637,"line_start":1381,"line_end":1381,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484639,"byte_end":484642,"line_start":1382,"line_end":1382,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484644,"byte_end":484712,"line_start":1383,"line_end":1383,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484714,"byte_end":484788,"line_start":1384,"line_end":1384,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484790,"byte_end":484800,"line_start":1385,"line_end":1385,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484802,"byte_end":484805,"line_start":1386,"line_end":1386,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484807,"byte_end":484821,"line_start":1387,"line_end":1387,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484823,"byte_end":484826,"line_start":1388,"line_end":1388,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484828,"byte_end":484839,"line_start":1389,"line_end":1389,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484841,"byte_end":484868,"line_start":1390,"line_end":1390,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484870,"byte_end":484873,"line_start":1391,"line_end":1391,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![1, 1, 1, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484875,"byte_end":484915,"line_start":1392,"line_end":1392,"column_start":2,"column_end":42}},{"value":"/ let mut iter = slice.rsplit(|_pos, bit| !*bit);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484917,"byte_end":484968,"line_start":1393,"line_end":1393,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484970,"byte_end":484973,"line_start":1394,"line_end":1394,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":484975,"byte_end":485025,"line_start":1395,"line_end":1395,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 3]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485027,"byte_end":485077,"line_start":1396,"line_end":1396,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485079,"byte_end":485114,"line_start":1397,"line_end":1397,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485116,"byte_end":485123,"line_start":1398,"line_end":1398,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485125,"byte_end":485128,"line_start":1399,"line_end":1399,"column_start":2,"column_end":5}},{"value":"/ As with [`.split()`], if the first or last bit is matched, an empty","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485130,"byte_end":485201,"line_start":1400,"line_end":1400,"column_start":2,"column_end":73}},{"value":"/ slice will be the first (or last) item returned by the iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485203,"byte_end":485271,"line_start":1401,"line_end":1401,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485273,"byte_end":485276,"line_start":1402,"line_end":1402,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485278,"byte_end":485289,"line_start":1403,"line_end":1403,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485291,"byte_end":485318,"line_start":1404,"line_end":1404,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485320,"byte_end":485323,"line_start":1405,"line_end":1405,"column_start":2,"column_end":5}},{"value":"/ let v = bits![1, 0, 0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485325,"byte_end":485364,"line_start":1406,"line_end":1406,"column_start":2,"column_end":41}},{"value":"/ let mut it = v.rsplit(|_pos, bit| *bit);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485366,"byte_end":485410,"line_start":1407,"line_end":1407,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(it.next().unwrap(), bits![]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485412,"byte_end":485456,"line_start":1408,"line_end":1408,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(it.next().unwrap(), bits![0; 2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485458,"byte_end":485506,"line_start":1409,"line_end":1409,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(it.next().unwrap(), bits![0; 2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485508,"byte_end":485556,"line_start":1410,"line_end":1410,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(it.next().unwrap(), bits![]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485558,"byte_end":485602,"line_start":1411,"line_end":1411,"column_start":2,"column_end":46}},{"value":"/ assert!(it.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485604,"byte_end":485637,"line_start":1412,"line_end":1412,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485639,"byte_end":485646,"line_start":1413,"line_end":1413,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485648,"byte_end":485651,"line_start":1414,"line_end":1414,"column_start":2,"column_end":5}},{"value":"/ [`.split()`]: Self::split","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485653,"byte_end":485682,"line_start":1415,"line_end":1415,"column_start":2,"column_end":31}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485684,"byte_end":485701,"line_start":1416,"line_end":1416,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485703,"byte_end":485733,"line_start":1417,"line_end":1417,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2607},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487120,"byte_end":487130,"line_start":1458,"line_end":1458,"column_start":9,"column_end":19},"name":"rsplit_mut","qualname":"<BitSlice<O, T>>::rsplit_mut","value":"pub fn rsplit_mut<F>(&mut Self, F) -> RSplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`, starting at the end of the slice and working backwards. The\n matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485858,"byte_end":485933,"line_start":1423,"line_end":1423,"column_start":2,"column_end":77}},{"value":"/ `pred`, starting at the end of the slice and working backwards. The","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":485935,"byte_end":486006,"line_start":1424,"line_end":1424,"column_start":2,"column_end":73}},{"value":"/ matched bit is not contained in the subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486008,"byte_end":486058,"line_start":1425,"line_end":1425,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486060,"byte_end":486063,"line_start":1426,"line_end":1426,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486065,"byte_end":486079,"line_start":1427,"line_end":1427,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486081,"byte_end":486084,"line_start":1428,"line_end":1428,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplit_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486086,"byte_end":486188,"line_start":1429,"line_end":1429,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486190,"byte_end":486193,"line_start":1430,"line_end":1430,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486195,"byte_end":486216,"line_start":1431,"line_end":1431,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486218,"byte_end":486221,"line_start":1432,"line_end":1432,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486223,"byte_end":486291,"line_start":1433,"line_end":1433,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486293,"byte_end":486367,"line_start":1434,"line_end":1434,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486369,"byte_end":486379,"line_start":1435,"line_end":1435,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486381,"byte_end":486384,"line_start":1436,"line_end":1436,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486386,"byte_end":486459,"line_start":1437,"line_end":1437,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486461,"byte_end":486531,"line_start":1438,"line_end":1438,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486533,"byte_end":486602,"line_start":1439,"line_end":1439,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486604,"byte_end":486680,"line_start":1440,"line_end":1440,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486682,"byte_end":486737,"line_start":1441,"line_end":1441,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486739,"byte_end":486742,"line_start":1442,"line_end":1442,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486744,"byte_end":486758,"line_start":1443,"line_end":1443,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486760,"byte_end":486763,"line_start":1444,"line_end":1444,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486765,"byte_end":486776,"line_start":1445,"line_end":1445,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486778,"byte_end":486805,"line_start":1446,"line_end":1446,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486807,"byte_end":486810,"line_start":1447,"line_end":1447,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486812,"byte_end":486852,"line_start":1448,"line_end":1448,"column_start":2,"column_end":42}},{"value":"/ for group in v.rsplit_mut(|_pos, bit| *bit) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486854,"byte_end":486903,"line_start":1449,"line_end":1449,"column_start":2,"column_end":51}},{"value":"/   group.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486905,"byte_end":486930,"line_start":1450,"line_end":1450,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486932,"byte_end":486937,"line_start":1451,"line_end":1451,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486939,"byte_end":486982,"line_start":1452,"line_end":1452,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486984,"byte_end":486991,"line_start":1453,"line_end":1453,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486993,"byte_end":486996,"line_start":1454,"line_end":1454,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitMut::remove_alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":486998,"byte_end":487060,"line_start":1455,"line_end":1455,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487062,"byte_end":487079,"line_start":1456,"line_end":1456,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487081,"byte_end":487111,"line_start":1457,"line_end":1457,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2609},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488235,"byte_end":488241,"line_start":1496,"line_end":1496,"column_start":9,"column_end":15},"name":"splitn","qualname":"<BitSlice<O, T>>::splitn","value":"pub fn splitn<F>(&Self, usize, F) -> SplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487262,"byte_end":487337,"line_start":1463,"line_end":1463,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487339,"byte_end":487415,"line_start":1464,"line_end":1464,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487417,"byte_end":487438,"line_start":1465,"line_end":1465,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487440,"byte_end":487443,"line_start":1466,"line_end":1466,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487445,"byte_end":487521,"line_start":1467,"line_end":1467,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487523,"byte_end":487526,"line_start":1468,"line_end":1468,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487528,"byte_end":487542,"line_start":1469,"line_end":1469,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487544,"byte_end":487547,"line_start":1470,"line_end":1470,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.splitn)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487549,"byte_end":487643,"line_start":1471,"line_end":1471,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487645,"byte_end":487648,"line_start":1472,"line_end":1472,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487650,"byte_end":487671,"line_start":1473,"line_end":1473,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487673,"byte_end":487676,"line_start":1474,"line_end":1474,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487678,"byte_end":487746,"line_start":1475,"line_end":1475,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487748,"byte_end":487822,"line_start":1476,"line_end":1476,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487824,"byte_end":487834,"line_start":1477,"line_end":1477,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487836,"byte_end":487839,"line_start":1478,"line_end":1478,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487841,"byte_end":487855,"line_start":1479,"line_end":1479,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487857,"byte_end":487860,"line_start":1480,"line_end":1480,"column_start":2,"column_end":5}},{"value":"/ Print the slice split once by set bits (i.e., `[0, 0,]`, `[0, 1, 0]`):","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487862,"byte_end":487936,"line_start":1481,"line_end":1481,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487938,"byte_end":487941,"line_start":1482,"line_end":1482,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487943,"byte_end":487954,"line_start":1483,"line_end":1483,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487956,"byte_end":487983,"line_start":1484,"line_end":1484,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487985,"byte_end":487988,"line_start":1485,"line_end":1485,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":487990,"byte_end":488026,"line_start":1486,"line_end":1486,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488028,"byte_end":488031,"line_start":1487,"line_end":1487,"column_start":2,"column_end":5}},{"value":"/ for group in v.splitn(2, |_pos, bit| *bit) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488033,"byte_end":488081,"line_start":1488,"line_end":1488,"column_start":2,"column_end":50}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488083,"byte_end":488116,"line_start":1489,"line_end":1489,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:b}\", group);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488118,"byte_end":488148,"line_start":1490,"line_end":1490,"column_start":2,"column_end":32}},{"value":"/   # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488150,"byte_end":488159,"line_start":1491,"line_end":1491,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488161,"byte_end":488166,"line_start":1492,"line_end":1492,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488168,"byte_end":488175,"line_start":1493,"line_end":1493,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488177,"byte_end":488194,"line_start":1494,"line_end":1494,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488196,"byte_end":488226,"line_start":1495,"line_end":1495,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2611},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489693,"byte_end":489703,"line_start":1539,"line_end":1539,"column_start":9,"column_end":19},"name":"splitn_mut","qualname":"<BitSlice<O, T>>::splitn_mut","value":"pub fn splitn_mut<F>(&mut Self, usize, F) -> SplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488364,"byte_end":488439,"line_start":1501,"line_end":1501,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488441,"byte_end":488517,"line_start":1502,"line_end":1502,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488519,"byte_end":488540,"line_start":1503,"line_end":1503,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488542,"byte_end":488545,"line_start":1504,"line_end":1504,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488547,"byte_end":488623,"line_start":1505,"line_end":1505,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488625,"byte_end":488628,"line_start":1506,"line_end":1506,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488630,"byte_end":488644,"line_start":1507,"line_end":1507,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488646,"byte_end":488649,"line_start":1508,"line_end":1508,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.splitn_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488651,"byte_end":488753,"line_start":1509,"line_end":1509,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488755,"byte_end":488758,"line_start":1510,"line_end":1510,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488760,"byte_end":488781,"line_start":1511,"line_end":1511,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488783,"byte_end":488786,"line_start":1512,"line_end":1512,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488788,"byte_end":488856,"line_start":1513,"line_end":1513,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488858,"byte_end":488932,"line_start":1514,"line_end":1514,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488934,"byte_end":488944,"line_start":1515,"line_end":1515,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488946,"byte_end":488949,"line_start":1516,"line_end":1516,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":488951,"byte_end":489024,"line_start":1517,"line_end":1517,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489026,"byte_end":489096,"line_start":1518,"line_end":1518,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489098,"byte_end":489167,"line_start":1519,"line_end":1519,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489169,"byte_end":489245,"line_start":1520,"line_end":1520,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489247,"byte_end":489302,"line_start":1521,"line_end":1521,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489304,"byte_end":489307,"line_start":1522,"line_end":1522,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489309,"byte_end":489323,"line_start":1523,"line_end":1523,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489325,"byte_end":489328,"line_start":1524,"line_end":1524,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489330,"byte_end":489341,"line_start":1525,"line_end":1525,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489343,"byte_end":489370,"line_start":1526,"line_end":1526,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489372,"byte_end":489375,"line_start":1527,"line_end":1527,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489377,"byte_end":489417,"line_start":1528,"line_end":1528,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489419,"byte_end":489422,"line_start":1529,"line_end":1529,"column_start":2,"column_end":5}},{"value":"/ for group in v.splitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489424,"byte_end":489476,"line_start":1530,"line_end":1530,"column_start":2,"column_end":54}},{"value":"/   group.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489478,"byte_end":489503,"line_start":1531,"line_end":1531,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489505,"byte_end":489510,"line_start":1532,"line_end":1532,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489512,"byte_end":489555,"line_start":1533,"line_end":1533,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489557,"byte_end":489564,"line_start":1534,"line_end":1534,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489566,"byte_end":489569,"line_start":1535,"line_end":1535,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitNMut::remove_alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489571,"byte_end":489633,"line_start":1536,"line_end":1536,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489635,"byte_end":489652,"line_start":1537,"line_end":1537,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489654,"byte_end":489684,"line_start":1538,"line_end":1538,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2613},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490914,"byte_end":490921,"line_start":1579,"line_end":1579,"column_start":9,"column_end":16},"name":"rsplitn","qualname":"<BitSlice<O, T>>::rsplitn","value":"pub fn rsplitn<F>(&Self, usize, F) -> RSplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489848,"byte_end":489923,"line_start":1544,"line_end":1544,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":489925,"byte_end":489998,"line_start":1545,"line_end":1545,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490000,"byte_end":490070,"line_start":1546,"line_end":1546,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490072,"byte_end":490086,"line_start":1547,"line_end":1547,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490088,"byte_end":490091,"line_start":1548,"line_end":1548,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490093,"byte_end":490169,"line_start":1549,"line_end":1549,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490171,"byte_end":490174,"line_start":1550,"line_end":1550,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490176,"byte_end":490190,"line_start":1551,"line_end":1551,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490192,"byte_end":490195,"line_start":1552,"line_end":1552,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplitn)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490197,"byte_end":490293,"line_start":1553,"line_end":1553,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490295,"byte_end":490298,"line_start":1554,"line_end":1554,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490300,"byte_end":490321,"line_start":1555,"line_end":1555,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490323,"byte_end":490326,"line_start":1556,"line_end":1556,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490328,"byte_end":490396,"line_start":1557,"line_end":1557,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490398,"byte_end":490472,"line_start":1558,"line_end":1558,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490474,"byte_end":490484,"line_start":1559,"line_end":1559,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490486,"byte_end":490489,"line_start":1560,"line_end":1560,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490491,"byte_end":490505,"line_start":1561,"line_end":1561,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490507,"byte_end":490510,"line_start":1562,"line_end":1562,"column_start":2,"column_end":5}},{"value":"/ Print the slice split once, starting from the end, by set bits (i.e.,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490512,"byte_end":490585,"line_start":1563,"line_end":1563,"column_start":2,"column_end":75}},{"value":"/ `[0]`, `[0, 0, 1, 0]`):","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490587,"byte_end":490614,"line_start":1564,"line_end":1564,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490616,"byte_end":490619,"line_start":1565,"line_end":1565,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490621,"byte_end":490632,"line_start":1566,"line_end":1566,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490634,"byte_end":490661,"line_start":1567,"line_end":1567,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490663,"byte_end":490666,"line_start":1568,"line_end":1568,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490668,"byte_end":490704,"line_start":1569,"line_end":1569,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490706,"byte_end":490709,"line_start":1570,"line_end":1570,"column_start":2,"column_end":5}},{"value":"/ for group in v.rsplitn(2, |_pos, bit| *bit) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490711,"byte_end":490760,"line_start":1571,"line_end":1571,"column_start":2,"column_end":51}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490762,"byte_end":490795,"line_start":1572,"line_end":1572,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:b}\", group);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490797,"byte_end":490827,"line_start":1573,"line_end":1573,"column_start":2,"column_end":32}},{"value":"/   # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490829,"byte_end":490838,"line_start":1574,"line_end":1574,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490840,"byte_end":490845,"line_start":1575,"line_end":1575,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490847,"byte_end":490854,"line_start":1576,"line_end":1576,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490856,"byte_end":490873,"line_start":1577,"line_end":1577,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":490875,"byte_end":490905,"line_start":1578,"line_end":1578,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2615},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492441,"byte_end":492452,"line_start":1623,"line_end":1623,"column_start":9,"column_end":20},"name":"rsplitn_mut","qualname":"<BitSlice<O, T>>::rsplitn_mut","value":"pub fn rsplitn_mut<F>(&mut Self, usize, F) -> RSplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491046,"byte_end":491121,"line_start":1584,"line_end":1584,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491123,"byte_end":491196,"line_start":1585,"line_end":1585,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491198,"byte_end":491268,"line_start":1586,"line_end":1586,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491270,"byte_end":491284,"line_start":1587,"line_end":1587,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491286,"byte_end":491289,"line_start":1588,"line_end":1588,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491291,"byte_end":491367,"line_start":1589,"line_end":1589,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491369,"byte_end":491372,"line_start":1590,"line_end":1590,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491374,"byte_end":491388,"line_start":1591,"line_end":1591,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491390,"byte_end":491393,"line_start":1592,"line_end":1592,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplitn_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491395,"byte_end":491499,"line_start":1593,"line_end":1593,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491501,"byte_end":491504,"line_start":1594,"line_end":1594,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491506,"byte_end":491527,"line_start":1595,"line_end":1595,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491529,"byte_end":491532,"line_start":1596,"line_end":1596,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491534,"byte_end":491602,"line_start":1597,"line_end":1597,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491604,"byte_end":491678,"line_start":1598,"line_end":1598,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491680,"byte_end":491690,"line_start":1599,"line_end":1599,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491692,"byte_end":491695,"line_start":1600,"line_end":1600,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491697,"byte_end":491770,"line_start":1601,"line_end":1601,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491772,"byte_end":491842,"line_start":1602,"line_end":1602,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491844,"byte_end":491913,"line_start":1603,"line_end":1603,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491915,"byte_end":491991,"line_start":1604,"line_end":1604,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":491993,"byte_end":492048,"line_start":1605,"line_end":1605,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492050,"byte_end":492053,"line_start":1606,"line_end":1606,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492055,"byte_end":492069,"line_start":1607,"line_end":1607,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492071,"byte_end":492074,"line_start":1608,"line_end":1608,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492076,"byte_end":492087,"line_start":1609,"line_end":1609,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492089,"byte_end":492116,"line_start":1610,"line_end":1610,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492118,"byte_end":492121,"line_start":1611,"line_end":1611,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492123,"byte_end":492163,"line_start":1612,"line_end":1612,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492165,"byte_end":492168,"line_start":1613,"line_end":1613,"column_start":2,"column_end":5}},{"value":"/ for group in v.rsplitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492170,"byte_end":492223,"line_start":1614,"line_end":1614,"column_start":2,"column_end":55}},{"value":"/   group.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492225,"byte_end":492250,"line_start":1615,"line_end":1615,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492252,"byte_end":492257,"line_start":1616,"line_end":1616,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492259,"byte_end":492302,"line_start":1617,"line_end":1617,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492304,"byte_end":492311,"line_start":1618,"line_end":1618,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492313,"byte_end":492316,"line_start":1619,"line_end":1619,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitNMut::remove_alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492318,"byte_end":492381,"line_start":1620,"line_end":1620,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492383,"byte_end":492400,"line_start":1621,"line_end":1621,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492402,"byte_end":492432,"line_start":1622,"line_end":1622,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2617},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493751,"byte_end":493759,"line_start":1663,"line_end":1663,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitSlice<O, T>>::contains","value":"pub fn contains<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice contains a subslice that matches the given\n span.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice contains a subslice that matches the given","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492599,"byte_end":492673,"line_start":1628,"line_end":1628,"column_start":2,"column_end":76}},{"value":"/ span.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492675,"byte_end":492684,"line_start":1629,"line_end":1629,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492686,"byte_end":492689,"line_start":1630,"line_end":1630,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492691,"byte_end":492705,"line_start":1631,"line_end":1631,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492707,"byte_end":492710,"line_start":1632,"line_end":1632,"column_start":2,"column_end":5}},{"value":"/ [`slice::contains`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.contains)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492712,"byte_end":492810,"line_start":1633,"line_end":1633,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492812,"byte_end":492815,"line_start":1634,"line_end":1634,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492817,"byte_end":492838,"line_start":1635,"line_end":1635,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492840,"byte_end":492843,"line_start":1636,"line_end":1636,"column_start":2,"column_end":5}},{"value":"/ This searches for a matching subslice (allowing different type","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492845,"byte_end":492911,"line_start":1637,"line_end":1637,"column_start":2,"column_end":68}},{"value":"/ parameters) rather than for a specific bit. Searching for a contained","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492913,"byte_end":492986,"line_start":1638,"line_end":1638,"column_start":2,"column_end":75}},{"value":"/ element with a given value is not as useful on a collection of `bool`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":492988,"byte_end":493062,"line_start":1639,"line_end":1639,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493064,"byte_end":493067,"line_start":1640,"line_end":1640,"column_start":2,"column_end":5}},{"value":"/ Furthermore, `BitSlice` defines [`any`] and [`not_all`], which are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493069,"byte_end":493139,"line_start":1641,"line_end":1641,"column_start":2,"column_end":72}},{"value":"/ optimized searchers for any `true` or `false` bit, respectively, in a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493141,"byte_end":493214,"line_start":1642,"line_end":1642,"column_start":2,"column_end":75}},{"value":"/ sequence.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493216,"byte_end":493229,"line_start":1643,"line_end":1643,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493231,"byte_end":493234,"line_start":1644,"line_end":1644,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493236,"byte_end":493250,"line_start":1645,"line_end":1645,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493252,"byte_end":493255,"line_start":1646,"line_end":1646,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493257,"byte_end":493268,"line_start":1647,"line_end":1647,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493270,"byte_end":493297,"line_start":1648,"line_end":1648,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493299,"byte_end":493302,"line_start":1649,"line_end":1649,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0101_1010u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493304,"byte_end":493333,"line_start":1650,"line_end":1650,"column_start":2,"column_end":31}},{"value":"/ let bits_msb = data.view_bits::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493335,"byte_end":493379,"line_start":1651,"line_end":1651,"column_start":2,"column_end":46}},{"value":"/ let bits_lsb = data.view_bits::<Lsb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493381,"byte_end":493425,"line_start":1652,"line_end":1652,"column_start":2,"column_end":46}},{"value":"/ assert!(bits_msb.contains(&bits_lsb[1 .. 5]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493427,"byte_end":493477,"line_start":1653,"line_end":1653,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493479,"byte_end":493486,"line_start":1654,"line_end":1654,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493488,"byte_end":493491,"line_start":1655,"line_end":1655,"column_start":2,"column_end":5}},{"value":"/ This example uses a palindrome pattern to demonstrate that the slice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493493,"byte_end":493565,"line_start":1656,"line_end":1656,"column_start":2,"column_end":74}},{"value":"/ being searched for does not need to have the same type parameters as the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493567,"byte_end":493643,"line_start":1657,"line_end":1657,"column_start":2,"column_end":78}},{"value":"/ slice being searched.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493645,"byte_end":493670,"line_start":1658,"line_end":1658,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493672,"byte_end":493675,"line_start":1659,"line_end":1659,"column_start":2,"column_end":5}},{"value":"/ [`any`]: Self::any","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493677,"byte_end":493699,"line_start":1660,"line_end":1660,"column_start":2,"column_end":24}},{"value":"/ [`not_all`]: Self::not_all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493701,"byte_end":493731,"line_start":1661,"line_end":1661,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493733,"byte_end":493742,"line_start":1662,"line_end":1662,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2621},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494692,"byte_end":494703,"line_start":1704,"line_end":1704,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<BitSlice<O, T>>::starts_with","value":"pub fn starts_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":493955,"byte_end":494011,"line_start":1675,"line_end":1675,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494013,"byte_end":494016,"line_start":1676,"line_end":1676,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494018,"byte_end":494032,"line_start":1677,"line_end":1677,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494034,"byte_end":494037,"line_start":1678,"line_end":1678,"column_start":2,"column_end":5}},{"value":"/ [`slice::starts_with`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.starts_with)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494039,"byte_end":494143,"line_start":1679,"line_end":1679,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494145,"byte_end":494148,"line_start":1680,"line_end":1680,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494150,"byte_end":494164,"line_start":1681,"line_end":1681,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494166,"byte_end":494169,"line_start":1682,"line_end":1682,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494171,"byte_end":494182,"line_start":1683,"line_end":1683,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494184,"byte_end":494211,"line_start":1684,"line_end":1684,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494213,"byte_end":494216,"line_start":1685,"line_end":1685,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494218,"byte_end":494248,"line_start":1686,"line_end":1686,"column_start":2,"column_end":32}},{"value":"/ assert!(v.starts_with(bits![0]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494250,"byte_end":494287,"line_start":1687,"line_end":1687,"column_start":2,"column_end":39}},{"value":"/ assert!(v.starts_with(bits![0, 1]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494289,"byte_end":494329,"line_start":1688,"line_end":1688,"column_start":2,"column_end":42}},{"value":"/ assert!(!v.starts_with(bits![1]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494331,"byte_end":494369,"line_start":1689,"line_end":1689,"column_start":2,"column_end":40}},{"value":"/ assert!(!v.starts_with(bits![1, 0]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494371,"byte_end":494412,"line_start":1690,"line_end":1690,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494414,"byte_end":494421,"line_start":1691,"line_end":1691,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494423,"byte_end":494426,"line_start":1692,"line_end":1692,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494428,"byte_end":494484,"line_start":1693,"line_end":1693,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494486,"byte_end":494489,"line_start":1694,"line_end":1694,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494491,"byte_end":494502,"line_start":1695,"line_end":1695,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494504,"byte_end":494531,"line_start":1696,"line_end":1696,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494533,"byte_end":494536,"line_start":1697,"line_end":1697,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494538,"byte_end":494565,"line_start":1698,"line_end":1698,"column_start":2,"column_end":29}},{"value":"/ assert!(v.starts_with(bits![]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494567,"byte_end":494603,"line_start":1699,"line_end":1699,"column_start":2,"column_end":38}},{"value":"/ let v = bits![];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494605,"byte_end":494625,"line_start":1700,"line_end":1700,"column_start":2,"column_end":22}},{"value":"/ assert!(v.starts_with(bits![]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494627,"byte_end":494663,"line_start":1701,"line_end":1701,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494665,"byte_end":494672,"line_start":1702,"line_end":1702,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494674,"byte_end":494683,"line_start":1703,"line_end":1703,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2624},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495619,"byte_end":495628,"line_start":1742,"line_end":1742,"column_start":9,"column_end":18},"name":"ends_with","qualname":"<BitSlice<O, T>>::ends_with","value":"pub fn ends_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494898,"byte_end":494954,"line_start":1713,"line_end":1713,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494956,"byte_end":494959,"line_start":1714,"line_end":1714,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494961,"byte_end":494975,"line_start":1715,"line_end":1715,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494977,"byte_end":494980,"line_start":1716,"line_end":1716,"column_start":2,"column_end":5}},{"value":"/ [`slice::ends_with`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.ends_with)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":494982,"byte_end":495082,"line_start":1717,"line_end":1717,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495084,"byte_end":495087,"line_start":1718,"line_end":1718,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495089,"byte_end":495103,"line_start":1719,"line_end":1719,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495105,"byte_end":495108,"line_start":1720,"line_end":1720,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495110,"byte_end":495121,"line_start":1721,"line_end":1721,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495123,"byte_end":495150,"line_start":1722,"line_end":1722,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495152,"byte_end":495155,"line_start":1723,"line_end":1723,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495157,"byte_end":495187,"line_start":1724,"line_end":1724,"column_start":2,"column_end":32}},{"value":"/ assert!(v.ends_with(bits![0]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495189,"byte_end":495224,"line_start":1725,"line_end":1725,"column_start":2,"column_end":37}},{"value":"/ assert!(v.ends_with(bits![0; 2]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495226,"byte_end":495264,"line_start":1726,"line_end":1726,"column_start":2,"column_end":40}},{"value":"/ assert!(!v.ends_with(bits![1]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495266,"byte_end":495302,"line_start":1727,"line_end":1727,"column_start":2,"column_end":38}},{"value":"/ assert!(!v.ends_with(bits![1, 0]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495304,"byte_end":495343,"line_start":1728,"line_end":1728,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495345,"byte_end":495352,"line_start":1729,"line_end":1729,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495354,"byte_end":495357,"line_start":1730,"line_end":1730,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495359,"byte_end":495415,"line_start":1731,"line_end":1731,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495417,"byte_end":495420,"line_start":1732,"line_end":1732,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495422,"byte_end":495433,"line_start":1733,"line_end":1733,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495435,"byte_end":495462,"line_start":1734,"line_end":1734,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495464,"byte_end":495467,"line_start":1735,"line_end":1735,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495469,"byte_end":495496,"line_start":1736,"line_end":1736,"column_start":2,"column_end":29}},{"value":"/ assert!(v.ends_with(bits![]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495498,"byte_end":495532,"line_start":1737,"line_end":1737,"column_start":2,"column_end":36}},{"value":"/ let v = bits![];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495534,"byte_end":495554,"line_start":1738,"line_end":1738,"column_start":2,"column_end":22}},{"value":"/ assert!(v.ends_with(bits![]));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495556,"byte_end":495590,"line_start":1739,"line_end":1739,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495592,"byte_end":495599,"line_start":1740,"line_end":1740,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495601,"byte_end":495610,"line_start":1741,"line_end":1741,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2627},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496940,"byte_end":496951,"line_start":1792,"line_end":1792,"column_start":9,"column_end":20},"name":"rotate_left","qualname":"<BitSlice<O, T>>::rotate_left","value":"pub fn rotate_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `by` bits of the slice\n move to the end while the last `self.len() - by` bits move to the\n front. After calling `.rotate_left()`, the bit previously at index `by`\n will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `by` bits of the slice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495849,"byte_end":495922,"line_start":1752,"line_end":1752,"column_start":2,"column_end":75}},{"value":"/ move to the end while the last `self.len() - by` bits move to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495924,"byte_end":495993,"line_start":1753,"line_end":1753,"column_start":2,"column_end":71}},{"value":"/ front. After calling `.rotate_left()`, the bit previously at index `by`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":495995,"byte_end":496070,"line_start":1754,"line_end":1754,"column_start":2,"column_end":77}},{"value":"/ will become the first bit in the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496072,"byte_end":496115,"line_start":1755,"line_end":1755,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496117,"byte_end":496120,"line_start":1756,"line_end":1756,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496122,"byte_end":496136,"line_start":1757,"line_end":1757,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496138,"byte_end":496141,"line_start":1758,"line_end":1758,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_left`](https://doc.rust-lang.org/stable/std/primitive.slice.html#rotate_left)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496143,"byte_end":496240,"line_start":1759,"line_end":1759,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496242,"byte_end":496245,"line_start":1760,"line_end":1760,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496247,"byte_end":496259,"line_start":1761,"line_end":1761,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496261,"byte_end":496264,"line_start":1762,"line_end":1762,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496266,"byte_end":496336,"line_start":1763,"line_end":1763,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a noöp.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496338,"byte_end":496410,"line_start":1764,"line_end":1764,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496412,"byte_end":496415,"line_start":1765,"line_end":1765,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496417,"byte_end":496433,"line_start":1766,"line_end":1766,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496435,"byte_end":496438,"line_start":1767,"line_end":1767,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in [`self.len()`]) time.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496440,"byte_end":496482,"line_start":1768,"line_end":1768,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496484,"byte_end":496487,"line_start":1769,"line_end":1769,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496489,"byte_end":496503,"line_start":1770,"line_end":1770,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496505,"byte_end":496508,"line_start":1771,"line_end":1771,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496510,"byte_end":496521,"line_start":1772,"line_end":1772,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496523,"byte_end":496550,"line_start":1773,"line_end":1773,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496552,"byte_end":496555,"line_start":1774,"line_end":1774,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496557,"byte_end":496597,"line_start":1775,"line_end":1775,"column_start":2,"column_end":42}},{"value":"/ a.rotate_left(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496599,"byte_end":496620,"line_start":1776,"line_end":1776,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(a, bits![1, 0, 1, 0, 0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496622,"byte_end":496665,"line_start":1777,"line_end":1777,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496667,"byte_end":496674,"line_start":1778,"line_end":1778,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496676,"byte_end":496679,"line_start":1779,"line_end":1779,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496681,"byte_end":496705,"line_start":1780,"line_end":1780,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496707,"byte_end":496710,"line_start":1781,"line_end":1781,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496712,"byte_end":496723,"line_start":1782,"line_end":1782,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496725,"byte_end":496752,"line_start":1783,"line_end":1783,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496754,"byte_end":496757,"line_start":1784,"line_end":1784,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496759,"byte_end":496799,"line_start":1785,"line_end":1785,"column_start":2,"column_end":42}},{"value":"/ a[1 .. 5].rotate_left(1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496801,"byte_end":496830,"line_start":1786,"line_end":1786,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(a, bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496832,"byte_end":496875,"line_start":1787,"line_end":1787,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496877,"byte_end":496884,"line_start":1788,"line_end":1788,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496886,"byte_end":496889,"line_start":1789,"line_end":1789,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496891,"byte_end":496920,"line_start":1790,"line_end":1790,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":496922,"byte_end":496931,"line_start":1791,"line_end":1791,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2628},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499281,"byte_end":499293,"line_start":1867,"line_end":1867,"column_start":9,"column_end":21},"name":"rotate_right","qualname":"<BitSlice<O, T>>::rotate_right","value":"pub fn rotate_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `self.len() - by` bits of\n the slice move to the end while the last `by` bits move to the front.\n After calling `.rotate_right()`, the bit previously at index `self.len()\n - by` will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `self.len() - by` bits of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498172,"byte_end":498248,"line_start":1827,"line_end":1827,"column_start":2,"column_end":78}},{"value":"/ the slice move to the end while the last `by` bits move to the front.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498250,"byte_end":498323,"line_start":1828,"line_end":1828,"column_start":2,"column_end":75}},{"value":"/ After calling `.rotate_right()`, the bit previously at index `self.len()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498325,"byte_end":498401,"line_start":1829,"line_end":1829,"column_start":2,"column_end":78}},{"value":"/ - by` will become the first bit in the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498403,"byte_end":498452,"line_start":1830,"line_end":1830,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498454,"byte_end":498457,"line_start":1831,"line_end":1831,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498459,"byte_end":498473,"line_start":1832,"line_end":1832,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498475,"byte_end":498478,"line_start":1833,"line_end":1833,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_right`](https://doc.rust-lang.org/stable/std/primitive.slice.html#rotate_right)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498480,"byte_end":498579,"line_start":1834,"line_end":1834,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498581,"byte_end":498584,"line_start":1835,"line_end":1835,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498586,"byte_end":498598,"line_start":1836,"line_end":1836,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498600,"byte_end":498603,"line_start":1837,"line_end":1837,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498605,"byte_end":498675,"line_start":1838,"line_end":1838,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a noöp.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498677,"byte_end":498749,"line_start":1839,"line_end":1839,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498751,"byte_end":498754,"line_start":1840,"line_end":1840,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498756,"byte_end":498772,"line_start":1841,"line_end":1841,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498774,"byte_end":498777,"line_start":1842,"line_end":1842,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in [`self.len()`]) time.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498779,"byte_end":498821,"line_start":1843,"line_end":1843,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498823,"byte_end":498826,"line_start":1844,"line_end":1844,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498828,"byte_end":498842,"line_start":1845,"line_end":1845,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498844,"byte_end":498847,"line_start":1846,"line_end":1846,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498849,"byte_end":498860,"line_start":1847,"line_end":1847,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498862,"byte_end":498889,"line_start":1848,"line_end":1848,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498891,"byte_end":498894,"line_start":1849,"line_end":1849,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 1, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498896,"byte_end":498936,"line_start":1850,"line_end":1850,"column_start":2,"column_end":42}},{"value":"/ a.rotate_right(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498938,"byte_end":498960,"line_start":1851,"line_end":1851,"column_start":2,"column_end":24}},{"value":"/ assert_eq!(a, bits![1, 0, 0, 0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":498962,"byte_end":499005,"line_start":1852,"line_end":1852,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499007,"byte_end":499014,"line_start":1853,"line_end":1853,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499016,"byte_end":499019,"line_start":1854,"line_end":1854,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499021,"byte_end":499045,"line_start":1855,"line_end":1855,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499047,"byte_end":499050,"line_start":1856,"line_end":1856,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499052,"byte_end":499063,"line_start":1857,"line_end":1857,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499065,"byte_end":499092,"line_start":1858,"line_end":1858,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499094,"byte_end":499097,"line_start":1859,"line_end":1859,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499099,"byte_end":499139,"line_start":1860,"line_end":1860,"column_start":2,"column_end":42}},{"value":"/ a[1 .. 5].rotate_right(1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499141,"byte_end":499171,"line_start":1861,"line_end":1861,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(a, bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499173,"byte_end":499216,"line_start":1862,"line_end":1862,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499218,"byte_end":499225,"line_start":1863,"line_end":1863,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499227,"byte_end":499230,"line_start":1864,"line_end":1864,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499232,"byte_end":499261,"line_start":1865,"line_end":1865,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499263,"byte_end":499272,"line_start":1866,"line_end":1866,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2629},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500053,"byte_end":500069,"line_start":1895,"line_end":1895,"column_start":9,"column_end":25},"name":"clone_from_slice","qualname":"<BitSlice<O, T>>::clone_from_slice","value":"pub fn clone_from_slice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499924,"byte_end":499941,"line_start":1892,"line_end":1892,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499943,"byte_end":499973,"line_start":1893,"line_end":1893,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `clone_from_bitslice` to copy between bitslices\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":499975,"byte_end":500044,"line_start":1894,"line_end":1894,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2632},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500336,"byte_end":500351,"line_start":1907,"line_end":1907,"column_start":9,"column_end":24},"name":"copy_from_slice","qualname":"<BitSlice<O, T>>::copy_from_slice","value":"pub fn copy_from_slice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500208,"byte_end":500225,"line_start":1904,"line_end":1904,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500227,"byte_end":500257,"line_start":1905,"line_end":1905,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `copy_from_bitslice` to copy between bitslices\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500259,"byte_end":500327,"line_start":1906,"line_end":1906,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2633},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501401,"byte_end":501412,"line_start":1943,"line_end":1943,"column_start":9,"column_end":20},"name":"copy_within","qualname":"<BitSlice<O, T>>::copy_within","value":"pub fn copy_within<R>(&mut Self, R, usize) where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500413,"byte_end":500482,"line_start":1911,"line_end":1911,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500484,"byte_end":500487,"line_start":1912,"line_end":1912,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500489,"byte_end":500562,"line_start":1913,"line_end":1913,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500564,"byte_end":500637,"line_start":1914,"line_end":1914,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500639,"byte_end":500714,"line_start":1915,"line_end":1915,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to [`self.len()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500716,"byte_end":500765,"line_start":1916,"line_end":1916,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500767,"byte_end":500770,"line_start":1917,"line_end":1917,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500772,"byte_end":500786,"line_start":1918,"line_end":1918,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500788,"byte_end":500791,"line_start":1919,"line_end":1919,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_within`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.copy_within)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500793,"byte_end":500897,"line_start":1920,"line_end":1920,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500899,"byte_end":500902,"line_start":1921,"line_end":1921,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500904,"byte_end":500916,"line_start":1922,"line_end":1922,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500918,"byte_end":500921,"line_start":1923,"line_end":1923,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500923,"byte_end":500997,"line_start":1924,"line_end":1924,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":500999,"byte_end":501046,"line_start":1925,"line_end":1925,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501048,"byte_end":501051,"line_start":1926,"line_end":1926,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501053,"byte_end":501067,"line_start":1927,"line_end":1927,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501069,"byte_end":501072,"line_start":1928,"line_end":1928,"column_start":2,"column_end":5}},{"value":"/ Copying four bits within a slice:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501074,"byte_end":501111,"line_start":1929,"line_end":1929,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501113,"byte_end":501116,"line_start":1930,"line_end":1930,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501118,"byte_end":501129,"line_start":1931,"line_end":1931,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501131,"byte_end":501158,"line_start":1932,"line_end":1932,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501160,"byte_end":501163,"line_start":1933,"line_end":1933,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501165,"byte_end":501226,"line_start":1934,"line_end":1934,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501228,"byte_end":501231,"line_start":1935,"line_end":1935,"column_start":2,"column_end":5}},{"value":"/ bits.copy_within(1 .. 5, 8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501233,"byte_end":501265,"line_start":1936,"line_end":1936,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501267,"byte_end":501270,"line_start":1937,"line_end":1937,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501272,"byte_end":501336,"line_start":1938,"line_end":1938,"column_start":2,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501338,"byte_end":501345,"line_start":1939,"line_end":1939,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501347,"byte_end":501350,"line_start":1940,"line_end":1940,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501352,"byte_end":501381,"line_start":1941,"line_end":1941,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501383,"byte_end":501392,"line_start":1942,"line_end":1942,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2635},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501963,"byte_end":501978,"line_start":1960,"line_end":1960,"column_start":9,"column_end":24},"name":"swap_with_slice","qualname":"<BitSlice<O, T>>::swap_with_slice","value":"pub fn swap_with_slice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501835,"byte_end":501852,"line_start":1957,"line_end":1957,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501854,"byte_end":501884,"line_start":1958,"line_end":1958,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `swap_with_bitslice` to swap between bitslices\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":501886,"byte_end":501954,"line_start":1959,"line_end":1959,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2638},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504755,"byte_end":504763,"line_start":2037,"line_end":2037,"column_start":16,"column_end":24},"name":"align_to","qualname":"<BitSlice<O, T>>::align_to","value":"pub unsafe fn align_to<U>(&Self) -> (&Self, &BitSlice<O, U>, &Self) where\nU: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bit-slice to a bit-slice of another type, ensuring\n alignment of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bit-slice to a bit-slice of another type, ensuring","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502109,"byte_end":502177,"line_start":1968,"line_end":1968,"column_start":2,"column_end":70}},{"value":"/ alignment of the types is maintained.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502179,"byte_end":502220,"line_start":1969,"line_end":1969,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502222,"byte_end":502225,"line_start":1970,"line_end":1970,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502227,"byte_end":502241,"line_start":1971,"line_end":1971,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502243,"byte_end":502246,"line_start":1972,"line_end":1972,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502248,"byte_end":502271,"line_start":1973,"line_end":1973,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502273,"byte_end":502276,"line_start":1974,"line_end":1974,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502278,"byte_end":502299,"line_start":1975,"line_end":1975,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502301,"byte_end":502304,"line_start":1976,"line_end":1976,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same [`BitStore`] type family as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502306,"byte_end":502379,"line_start":1977,"line_end":1977,"column_start":2,"column_end":75}},{"value":"/ type `T`. If `T` is a fundamental integer, so must `U` be; if `T` is an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502381,"byte_end":502456,"line_start":1978,"line_end":1978,"column_start":2,"column_end":77}},{"value":"/ [`::Alias`] type, then so must `U`. Changing the type family with this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502458,"byte_end":502532,"line_start":1979,"line_end":1979,"column_start":2,"column_end":76}},{"value":"/ method is **unsound** and strictly forbidden. Unfortunately, this cannot","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502534,"byte_end":502610,"line_start":1980,"line_end":1980,"column_start":2,"column_end":78}},{"value":"/ be encoded in the type system, so you are required to abide by this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502612,"byte_end":502683,"line_start":1981,"line_end":1981,"column_start":2,"column_end":73}},{"value":"/ limitation yourself.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502685,"byte_end":502709,"line_start":1982,"line_end":1982,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502711,"byte_end":502714,"line_start":1983,"line_end":1983,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502716,"byte_end":502736,"line_start":1984,"line_end":1984,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502738,"byte_end":502741,"line_start":1985,"line_end":1985,"column_start":2,"column_end":5}},{"value":"/ The algorithm used to implement this function attempts to create the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502743,"byte_end":502815,"line_start":1986,"line_end":1986,"column_start":2,"column_end":74}},{"value":"/ widest possible span for the middle slice. However, the slice divisions","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502817,"byte_end":502892,"line_start":1987,"line_end":1987,"column_start":2,"column_end":77}},{"value":"/ must abide by the [`Domain`] restrictions: the left and right slices","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502894,"byte_end":502966,"line_start":1988,"line_end":1988,"column_start":2,"column_end":74}},{"value":"/ produced by this function will include the head and tail elements of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":502968,"byte_end":503044,"line_start":1989,"line_end":1989,"column_start":2,"column_end":78}},{"value":"/ domain (if present), as well as the left and right subslices (if any)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503046,"byte_end":503119,"line_start":1990,"line_end":1990,"column_start":2,"column_end":75}},{"value":"/ produced by calling [`slice::align_to`] on the domain body (if present).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503121,"byte_end":503197,"line_start":1991,"line_end":1991,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503199,"byte_end":503202,"line_start":1992,"line_end":1992,"column_start":2,"column_end":5}},{"value":"/ The standard library implementation currently maximizes the width of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503204,"byte_end":503280,"line_start":1993,"line_end":1993,"column_start":2,"column_end":78}},{"value":"/ center slice, but its API does not guarantee this property, and retains","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503282,"byte_end":503357,"line_start":1994,"line_end":1994,"column_start":2,"column_end":77}},{"value":"/ the right to produce pessimal slices. As such, this function cannot","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503359,"byte_end":503430,"line_start":1995,"line_end":1995,"column_start":2,"column_end":73}},{"value":"/ guarantee maximal center slice width either, and you cannot rely on this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503432,"byte_end":503508,"line_start":1996,"line_end":1996,"column_start":2,"column_end":78}},{"value":"/ behavior for *correctness* of your work; it is only a possible","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503510,"byte_end":503576,"line_start":1997,"line_end":1997,"column_start":2,"column_end":68}},{"value":"/ performance improvement.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503578,"byte_end":503606,"line_start":1998,"line_end":1998,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503608,"byte_end":503611,"line_start":1999,"line_end":1999,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503613,"byte_end":503625,"line_start":2000,"line_end":2000,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503627,"byte_end":503630,"line_start":2001,"line_end":2001,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a [`mem::transmute`][mt] with respect to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503632,"byte_end":503707,"line_start":2002,"line_end":2002,"column_start":2,"column_end":77}},{"value":"/ memory region in the returned middle slice, so all of the usual caveats","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503709,"byte_end":503784,"line_start":2003,"line_end":2003,"column_start":2,"column_end":77}},{"value":"/ pertaining to [`mem::transmute::<T, U>`][mt] also apply here.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503786,"byte_end":503851,"line_start":2004,"line_end":2004,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503853,"byte_end":503856,"line_start":2005,"line_end":2005,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503858,"byte_end":503872,"line_start":2006,"line_end":2006,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503874,"byte_end":503877,"line_start":2007,"line_end":2007,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503879,"byte_end":503895,"line_start":2008,"line_end":2008,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503897,"byte_end":503900,"line_start":2009,"line_end":2009,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503902,"byte_end":503913,"line_start":2010,"line_end":2010,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503915,"byte_end":503942,"line_start":2011,"line_end":2011,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503944,"byte_end":503947,"line_start":2012,"line_end":2012,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503949,"byte_end":503961,"line_start":2013,"line_end":2013,"column_start":2,"column_end":14}},{"value":"/   let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":503963,"byte_end":504012,"line_start":2014,"line_end":2014,"column_start":2,"column_end":51}},{"value":"/   let bits = bytes.view_bits::<LocalBits>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504014,"byte_end":504062,"line_start":2015,"line_end":2015,"column_start":2,"column_end":50}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to::<u16>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504064,"byte_end":504124,"line_start":2016,"line_end":2016,"column_start":2,"column_end":62}},{"value":"/   match prefix.len() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504126,"byte_end":504152,"line_start":2017,"line_end":2017,"column_start":2,"column_end":28}},{"value":"/     0 => {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504154,"byte_end":504168,"line_start":2018,"line_end":2018,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(shorts, bits[.. 48]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504170,"byte_end":504212,"line_start":2019,"line_end":2019,"column_start":2,"column_end":44}},{"value":"/       assert_eq!(suffix, bits[48 ..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504214,"byte_end":504256,"line_start":2020,"line_end":2020,"column_start":2,"column_end":44}},{"value":"/     },","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504258,"byte_end":504268,"line_start":2021,"line_end":2021,"column_start":2,"column_end":12}},{"value":"/     8 => {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504270,"byte_end":504284,"line_start":2022,"line_end":2022,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(prefix, bits[.. 8]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504286,"byte_end":504327,"line_start":2023,"line_end":2023,"column_start":2,"column_end":43}},{"value":"/       assert_eq!(shorts, bits[8 ..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504329,"byte_end":504370,"line_start":2024,"line_end":2024,"column_start":2,"column_end":43}},{"value":"/     },","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504372,"byte_end":504382,"line_start":2025,"line_end":2025,"column_start":2,"column_end":12}},{"value":"/     _ => unreachable!(\"This case will not occur\")","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504384,"byte_end":504437,"line_start":2026,"line_end":2026,"column_start":2,"column_end":55}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504439,"byte_end":504446,"line_start":2027,"line_end":2027,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504448,"byte_end":504453,"line_start":2028,"line_end":2028,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504455,"byte_end":504462,"line_start":2029,"line_end":2029,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504464,"byte_end":504467,"line_start":2030,"line_end":2030,"column_start":2,"column_end":5}},{"value":"/ [mt]: core::mem::transmute","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504469,"byte_end":504499,"line_start":2031,"line_end":2031,"column_start":2,"column_end":32}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504501,"byte_end":504541,"line_start":2032,"line_end":2032,"column_start":2,"column_end":42}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504543,"byte_end":504580,"line_start":2033,"line_end":2033,"column_start":2,"column_end":39}},{"value":"/ [`slice::align_to`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.align_to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504582,"byte_end":504680,"line_start":2034,"line_end":2034,"column_start":2,"column_end":100}},{"value":"/ [`::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504682,"byte_end":504728,"line_start":2035,"line_end":2035,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504730,"byte_end":504739,"line_start":2036,"line_end":2036,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507387,"byte_end":507399,"line_start":2107,"line_end":2107,"column_start":16,"column_end":28},"name":"align_to_mut","qualname":"<BitSlice<O, T>>::align_to_mut","value":"pub unsafe fn align_to_mut<U>(&mut Self)\n-> (&mut Self, &mut BitSlice<O, U>, &mut Self) where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bit-slice to a bit-slice of another type, ensuring\n alignment of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bit-slice to a bit-slice of another type, ensuring","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":504968,"byte_end":505036,"line_start":2047,"line_end":2047,"column_start":2,"column_end":70}},{"value":"/ alignment of the types is maintained.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505038,"byte_end":505079,"line_start":2048,"line_end":2048,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505081,"byte_end":505084,"line_start":2049,"line_end":2049,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505086,"byte_end":505100,"line_start":2050,"line_end":2050,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505102,"byte_end":505105,"line_start":2051,"line_end":2051,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to_mut`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505107,"byte_end":505134,"line_start":2052,"line_end":2052,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505136,"byte_end":505139,"line_start":2053,"line_end":2053,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505141,"byte_end":505162,"line_start":2054,"line_end":2054,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505164,"byte_end":505167,"line_start":2055,"line_end":2055,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same [`BitStore`] type family as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505169,"byte_end":505242,"line_start":2056,"line_end":2056,"column_start":2,"column_end":75}},{"value":"/ type `T`. If `T` is a fundamental integer, so must `U` be; if `T` is an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505244,"byte_end":505319,"line_start":2057,"line_end":2057,"column_start":2,"column_end":77}},{"value":"/ [`::Alias`] type, then so must `U`. Changing the type family with this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505321,"byte_end":505395,"line_start":2058,"line_end":2058,"column_start":2,"column_end":76}},{"value":"/ method is **unsound** and strictly forbidden. Unfortunately, this cannot","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505397,"byte_end":505473,"line_start":2059,"line_end":2059,"column_start":2,"column_end":78}},{"value":"/ be encoded in the type system, so you are required to abide by this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505475,"byte_end":505546,"line_start":2060,"line_end":2060,"column_start":2,"column_end":73}},{"value":"/ limitation yourself.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505548,"byte_end":505572,"line_start":2061,"line_end":2061,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505574,"byte_end":505577,"line_start":2062,"line_end":2062,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505579,"byte_end":505599,"line_start":2063,"line_end":2063,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505601,"byte_end":505604,"line_start":2064,"line_end":2064,"column_start":2,"column_end":5}},{"value":"/ The algorithm used to implement this function attempts to create the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505606,"byte_end":505678,"line_start":2065,"line_end":2065,"column_start":2,"column_end":74}},{"value":"/ widest possible span for the middle slice. However, the slice divisions","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505680,"byte_end":505755,"line_start":2066,"line_end":2066,"column_start":2,"column_end":77}},{"value":"/ must abide by the [`DomainMut`] restrictions: the left and right slices","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505757,"byte_end":505832,"line_start":2067,"line_end":2067,"column_start":2,"column_end":77}},{"value":"/ produced by this function will include the head and tail elements of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505834,"byte_end":505910,"line_start":2068,"line_end":2068,"column_start":2,"column_end":78}},{"value":"/ domain (if present), as well as the left and right subslices (if any)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505912,"byte_end":505985,"line_start":2069,"line_end":2069,"column_start":2,"column_end":75}},{"value":"/ produced by calling [`slice::align_to_mut`] on the domain body (if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":505987,"byte_end":506057,"line_start":2070,"line_end":2070,"column_start":2,"column_end":72}},{"value":"/ present).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506059,"byte_end":506072,"line_start":2071,"line_end":2071,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506074,"byte_end":506077,"line_start":2072,"line_end":2072,"column_start":2,"column_end":5}},{"value":"/ The standard library implementation currently maximizes the width of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506079,"byte_end":506155,"line_start":2073,"line_end":2073,"column_start":2,"column_end":78}},{"value":"/ center slice, but its API does not guarantee this property, and retains","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506157,"byte_end":506232,"line_start":2074,"line_end":2074,"column_start":2,"column_end":77}},{"value":"/ the right to produce pessimal slices. As such, this function cannot","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506234,"byte_end":506305,"line_start":2075,"line_end":2075,"column_start":2,"column_end":73}},{"value":"/ guarantee maximal center slice width either, and you cannot rely on this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506307,"byte_end":506383,"line_start":2076,"line_end":2076,"column_start":2,"column_end":78}},{"value":"/ behavior for *correctness* of your work; it is only a possible","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506385,"byte_end":506451,"line_start":2077,"line_end":2077,"column_start":2,"column_end":68}},{"value":"/ performance improvement.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506453,"byte_end":506481,"line_start":2078,"line_end":2078,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506483,"byte_end":506486,"line_start":2079,"line_end":2079,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506488,"byte_end":506500,"line_start":2080,"line_end":2080,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506502,"byte_end":506505,"line_start":2081,"line_end":2081,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a [`mem::transmute`][mt] with respect to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506507,"byte_end":506582,"line_start":2082,"line_end":2082,"column_start":2,"column_end":77}},{"value":"/ memory region in the returned middle slice, so all of the usual caveats","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506584,"byte_end":506659,"line_start":2083,"line_end":2083,"column_start":2,"column_end":77}},{"value":"/ pertaining to [`mem::transmute::<T, U>`][mt] also apply here.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506661,"byte_end":506726,"line_start":2084,"line_end":2084,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506728,"byte_end":506731,"line_start":2085,"line_end":2085,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506733,"byte_end":506747,"line_start":2086,"line_end":2086,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506749,"byte_end":506752,"line_start":2087,"line_end":2087,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506754,"byte_end":506770,"line_start":2088,"line_end":2088,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506772,"byte_end":506775,"line_start":2089,"line_end":2089,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506777,"byte_end":506788,"line_start":2090,"line_end":2090,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506790,"byte_end":506817,"line_start":2091,"line_end":2091,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506819,"byte_end":506822,"line_start":2092,"line_end":2092,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506824,"byte_end":506836,"line_start":2093,"line_end":2093,"column_start":2,"column_end":14}},{"value":"/   let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506838,"byte_end":506891,"line_start":2094,"line_end":2094,"column_start":2,"column_end":55}},{"value":"/   let bits = bytes.view_bits_mut::<LocalBits>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506893,"byte_end":506945,"line_start":2095,"line_end":2095,"column_start":2,"column_end":54}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to_mut::<u16>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":506947,"byte_end":507011,"line_start":2096,"line_end":2096,"column_start":2,"column_end":66}},{"value":"/   //  same access and behavior as in `align_to`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507013,"byte_end":507064,"line_start":2097,"line_end":2097,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507066,"byte_end":507071,"line_start":2098,"line_end":2098,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507073,"byte_end":507080,"line_start":2099,"line_end":2099,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507082,"byte_end":507085,"line_start":2100,"line_end":2100,"column_start":2,"column_end":5}},{"value":"/ [mt]: core::mem::transmute","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507087,"byte_end":507117,"line_start":2101,"line_end":2101,"column_start":2,"column_end":32}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507119,"byte_end":507159,"line_start":2102,"line_end":2102,"column_start":2,"column_end":42}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507161,"byte_end":507204,"line_start":2103,"line_end":2103,"column_start":2,"column_end":45}},{"value":"/ [`slice::align_to_mut`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.align_to_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507206,"byte_end":507312,"line_start":2104,"line_end":2104,"column_start":2,"column_end":108}},{"value":"/ [`::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507314,"byte_end":507360,"line_start":2105,"line_end":2105,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507362,"byte_end":507371,"line_start":2106,"line_end":2106,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507921,"byte_end":507927,"line_start":2134,"line_end":2134,"column_start":9,"column_end":15},"name":"to_vec","qualname":"<BitSlice<O, T>>::to_vec","value":"pub fn to_vec(&Self) -> BitVec<O, T::Unalias>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507825,"byte_end":507842,"line_start":2131,"line_end":2131,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507844,"byte_end":507874,"line_start":2132,"line_end":2132,"column_start":2,"column_end":32}},{"value":"deprecated = \"Prefer `to_bitvec`\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507876,"byte_end":507912,"line_start":2133,"line_end":2133,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508643,"byte_end":508649,"line_start":2167,"line_end":2167,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitSlice<O, T>>::repeat","value":"pub fn repeat(&Self, usize) -> BitVec<O, T::Unalias>","parent":null,"children":[],"decl_id":null,"docs":" Creates a vector by repeating a slice `n` times.","sig":null,"attributes":[{"value":"/ Creates a vector by repeating a slice `n` times.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507986,"byte_end":508038,"line_start":2138,"line_end":2138,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508040,"byte_end":508043,"line_start":2139,"line_end":2139,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508045,"byte_end":508059,"line_start":2140,"line_end":2140,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508061,"byte_end":508064,"line_start":2141,"line_end":2141,"column_start":2,"column_end":5}},{"value":"/ [`slice::repeat`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.repeat)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508066,"byte_end":508160,"line_start":2142,"line_end":2142,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508162,"byte_end":508165,"line_start":2143,"line_end":2143,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508167,"byte_end":508179,"line_start":2144,"line_end":2144,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508181,"byte_end":508184,"line_start":2145,"line_end":2145,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the capacity would overflow.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508186,"byte_end":508246,"line_start":2146,"line_end":2146,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508248,"byte_end":508251,"line_start":2147,"line_end":2147,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508253,"byte_end":508267,"line_start":2148,"line_end":2148,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508269,"byte_end":508272,"line_start":2149,"line_end":2149,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508274,"byte_end":508290,"line_start":2150,"line_end":2150,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508292,"byte_end":508295,"line_start":2151,"line_end":2151,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508297,"byte_end":508308,"line_start":2152,"line_end":2152,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508310,"byte_end":508337,"line_start":2153,"line_end":2153,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508339,"byte_end":508342,"line_start":2154,"line_end":2154,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![0, 1].repeat(3), bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508344,"byte_end":508407,"line_start":2155,"line_end":2155,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508409,"byte_end":508416,"line_start":2156,"line_end":2156,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508418,"byte_end":508421,"line_start":2157,"line_end":2157,"column_start":2,"column_end":5}},{"value":"/ A panic upon overflow:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508423,"byte_end":508449,"line_start":2158,"line_end":2158,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508451,"byte_end":508454,"line_start":2159,"line_end":2159,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508456,"byte_end":508480,"line_start":2160,"line_end":2160,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508482,"byte_end":508509,"line_start":2161,"line_end":2161,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508511,"byte_end":508514,"line_start":2162,"line_end":2162,"column_start":2,"column_end":5}},{"value":"/ // this will panic at runtime","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508516,"byte_end":508549,"line_start":2163,"line_end":2163,"column_start":2,"column_end":35}},{"value":"/ bits![0, 1].repeat(BitSlice::<LocalBits, usize>::MAX_BITS);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508551,"byte_end":508614,"line_start":2164,"line_end":2164,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508616,"byte_end":508623,"line_start":2165,"line_end":2165,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":508625,"byte_end":508634,"line_start":2166,"line_end":2166,"column_start":2,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":2647},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509593,"byte_end":509601,"line_start":2200,"line_end":2200,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::api::from_ref","value":"pub fn from_ref<O, T>(&T) -> &BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a [`BitSlice`] over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a [`BitSlice`] over one element.\n\n# Original\n\n[`slice::from_ref`](core::slice::from_ref)\n\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509369,"byte_end":509536,"line_start":2190,"line_end":2197,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509537,"byte_end":509554,"line_start":2198,"line_end":2198,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509555,"byte_end":509585,"line_start":2199,"line_end":2199,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2650},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509930,"byte_end":509938,"line_start":2218,"line_end":2218,"column_start":8,"column_end":16},"name":"from_mut","qualname":"::slice::api::from_mut","value":"pub fn from_mut<O, T>(&mut T) -> &mut BitSlice<O, T> where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a [`BitSlice`] over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a [`BitSlice`] over one element.\n\n# Original\n\n[`slice::from_mut`](core::slice::from_mut)\n\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509706,"byte_end":509873,"line_start":2208,"line_end":2215,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509874,"byte_end":509891,"line_start":2216,"line_end":2216,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":509892,"byte_end":509922,"line_start":2217,"line_end":2217,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2653},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513767,"byte_end":513781,"line_start":2332,"line_end":2332,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::api::from_raw_parts","value":"pub unsafe fn from_raw_parts<'a, O, T>(BitPtr<Const, O, T>, usize)\n-> Result<&'a BitSlice<O, T>, BitSpanError<T>> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Forms a bit-slice from a bit-pointer and a length.","sig":null,"attributes":[{"value":"/ Forms a bit-slice from a bit-pointer and a length.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510288,"byte_end":510342,"line_start":2231,"line_end":2231,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510343,"byte_end":510346,"line_start":2232,"line_end":2232,"column_start":1,"column_end":4}},{"value":"/ The `len` argument is the number of **bits**, not the number of bytes or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510347,"byte_end":510423,"line_start":2233,"line_end":2233,"column_start":1,"column_end":77}},{"value":"/ elements.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510424,"byte_end":510437,"line_start":2234,"line_end":2234,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510438,"byte_end":510441,"line_start":2235,"line_end":2235,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510442,"byte_end":510456,"line_start":2236,"line_end":2236,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510457,"byte_end":510460,"line_start":2237,"line_end":2237,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts`](core::slice::from_raw_parts)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510461,"byte_end":510519,"line_start":2238,"line_end":2238,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510520,"byte_end":510523,"line_start":2239,"line_end":2239,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510524,"byte_end":510545,"line_start":2240,"line_end":2240,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510546,"byte_end":510549,"line_start":2241,"line_end":2241,"column_start":1,"column_end":4}},{"value":"/ This takes a [`BitPtr`] as its base address, rather than a raw `*Bit`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510550,"byte_end":510623,"line_start":2242,"line_end":2242,"column_start":1,"column_end":74}},{"value":"/ pointer, as `bitvec` does not provide raw pointers to individual bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510624,"byte_end":510698,"line_start":2243,"line_end":2243,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510699,"byte_end":510702,"line_start":2244,"line_end":2244,"column_start":1,"column_end":4}},{"value":"/ It returns a `Result`, because the `len` argument may be invalid to encode","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510703,"byte_end":510781,"line_start":2245,"line_end":2245,"column_start":1,"column_end":79}},{"value":"/ into a `&BitSlice` reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510782,"byte_end":510815,"line_start":2246,"line_end":2246,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510816,"byte_end":510819,"line_start":2247,"line_end":2247,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510820,"byte_end":510832,"line_start":2248,"line_end":2248,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510833,"byte_end":510836,"line_start":2249,"line_end":2249,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510837,"byte_end":510911,"line_start":2250,"line_end":2250,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510912,"byte_end":510915,"line_start":2251,"line_end":2251,"column_start":1,"column_end":4}},{"value":"/ - `data` must be valid for reads for `len` many bits, and it must be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510916,"byte_end":510988,"line_start":2252,"line_end":2252,"column_start":1,"column_end":73}},{"value":"/   properly aligned. This means in particular:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":510989,"byte_end":511038,"line_start":2253,"line_end":2253,"column_start":1,"column_end":50}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511039,"byte_end":511118,"line_start":2254,"line_end":2254,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511119,"byte_end":511192,"line_start":2255,"line_end":2255,"column_start":1,"column_end":74}},{"value":"/     objects. See [below] for an example incorrectly not taking this into","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511193,"byte_end":511269,"line_start":2256,"line_end":2256,"column_start":1,"column_end":77}},{"value":"/     account.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511270,"byte_end":511286,"line_start":2257,"line_end":2257,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null, and its `T` portion must be aligned. Both of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511287,"byte_end":511364,"line_start":2258,"line_end":2258,"column_start":1,"column_end":78}},{"value":"/     these conditions are checked during safe construction of the [`BitPtr`],","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511365,"byte_end":511445,"line_start":2259,"line_end":2259,"column_start":1,"column_end":81}},{"value":"/     and `unsafe` construction of it **must not** violate them. Doing so will","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511446,"byte_end":511526,"line_start":2260,"line_end":2260,"column_start":1,"column_end":81}},{"value":"/     cause incorrect behavior in the crate.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511527,"byte_end":511573,"line_start":2261,"line_end":2261,"column_start":1,"column_end":47}},{"value":"/ - `data` must point to `len` consecutive bits within properly initialized","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511574,"byte_end":511651,"line_start":2262,"line_end":2262,"column_start":1,"column_end":78}},{"value":"/   memory elements `T`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511652,"byte_end":511678,"line_start":2263,"line_end":2263,"column_start":1,"column_end":27}},{"value":"/ - The memory referenced by the returned slice must not be mutated for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511679,"byte_end":511756,"line_start":2264,"line_end":2264,"column_start":1,"column_end":78}},{"value":"/   duration of the lifetime `'a`, except if `T` is an atomic or a `Cell`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511757,"byte_end":511832,"line_start":2265,"line_end":2265,"column_start":1,"column_end":76}},{"value":"/   type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511833,"byte_end":511844,"line_start":2266,"line_end":2266,"column_start":1,"column_end":12}},{"value":"/ - `len` cannot exceed [`BitSlice::MAX_BITS`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511845,"byte_end":511894,"line_start":2267,"line_end":2267,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511895,"byte_end":511898,"line_start":2268,"line_end":2268,"column_start":1,"column_end":4}},{"value":"/ # Caveat","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511899,"byte_end":511911,"line_start":2269,"line_end":2269,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511912,"byte_end":511915,"line_start":2270,"line_end":2270,"column_start":1,"column_end":4}},{"value":"/ The lifetime for the returned slice is inferred from its usage. To prevent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511916,"byte_end":511994,"line_start":2271,"line_end":2271,"column_start":1,"column_end":79}},{"value":"/ accidental misuse, it’s suggested to tie the lifetime to whichever source","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":511995,"byte_end":512074,"line_start":2272,"line_end":2272,"column_start":1,"column_end":78}},{"value":"/ lifetime is safe in the context, such as by providing a helper function","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512075,"byte_end":512150,"line_start":2273,"line_end":2273,"column_start":1,"column_end":76}},{"value":"/ taking the lifetime of a host value for the slice, or by explicit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512151,"byte_end":512220,"line_start":2274,"line_end":2274,"column_start":1,"column_end":70}},{"value":"/ annotation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512221,"byte_end":512236,"line_start":2275,"line_end":2275,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512237,"byte_end":512240,"line_start":2276,"line_end":2276,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512241,"byte_end":512255,"line_start":2277,"line_end":2277,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512256,"byte_end":512259,"line_start":2278,"line_end":2278,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512260,"byte_end":512271,"line_start":2279,"line_end":2279,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512272,"byte_end":512299,"line_start":2280,"line_end":2280,"column_start":1,"column_end":28}},{"value":"/ use bitvec::slice as bv_slice;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512300,"byte_end":512334,"line_start":2281,"line_end":2281,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512335,"byte_end":512338,"line_start":2282,"line_end":2282,"column_start":1,"column_end":4}},{"value":"/ let x = 42u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512339,"byte_end":512356,"line_start":2283,"line_end":2283,"column_start":1,"column_end":18}},{"value":"/ let bitptr = BitPtr::from(&x);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512357,"byte_end":512391,"line_start":2284,"line_end":2284,"column_start":1,"column_end":35}},{"value":"/ let bits: &BitSlice<LocalBits, _> = unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512392,"byte_end":512440,"line_start":2285,"line_end":2285,"column_start":1,"column_end":49}},{"value":"/   bv_slice::from_raw_parts(bitptr, 8)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512441,"byte_end":512482,"line_start":2286,"line_end":2286,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512483,"byte_end":512488,"line_start":2287,"line_end":2287,"column_start":1,"column_end":6}},{"value":"/ .unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512489,"byte_end":512503,"line_start":2288,"line_end":2288,"column_start":1,"column_end":15}},{"value":"/ assert_eq!(bits, x.view_bits::<LocalBits>());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512504,"byte_end":512553,"line_start":2289,"line_end":2289,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512554,"byte_end":512561,"line_start":2290,"line_end":2290,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512562,"byte_end":512565,"line_start":2291,"line_end":2291,"column_start":1,"column_end":4}},{"value":"/ ### Incorrect Usage","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512566,"byte_end":512589,"line_start":2292,"line_end":2292,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512590,"byte_end":512593,"line_start":2293,"line_end":2293,"column_start":1,"column_end":4}},{"value":"/ The following `join_slices` function is **unsound** ⚠️","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512594,"byte_end":512656,"line_start":2294,"line_end":2294,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512657,"byte_end":512660,"line_start":2295,"line_end":2295,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512661,"byte_end":512679,"line_start":2296,"line_end":2296,"column_start":1,"column_end":19}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512680,"byte_end":512707,"line_start":2297,"line_end":2297,"column_start":1,"column_end":28}},{"value":"/ use bitvec::slice as bv_slice;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512708,"byte_end":512742,"line_start":2298,"line_end":2298,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512743,"byte_end":512746,"line_start":2299,"line_end":2299,"column_start":1,"column_end":4}},{"value":"/ fn join_bitslices<'a, O, T>(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512747,"byte_end":512779,"line_start":2300,"line_end":2300,"column_start":1,"column_end":33}},{"value":"/   fst: &'a BitSlice<O, T>,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512780,"byte_end":512810,"line_start":2301,"line_end":2301,"column_start":1,"column_end":31}},{"value":"/   snd: &'a BitSlice<O, T>,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512811,"byte_end":512841,"line_start":2302,"line_end":2302,"column_start":1,"column_end":31}},{"value":"/ ) -> &'a BitSlice<O, T>","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512842,"byte_end":512869,"line_start":2303,"line_end":2303,"column_start":1,"column_end":28}},{"value":"/ where O: BitOrder, T: BitStore {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512870,"byte_end":512906,"line_start":2304,"line_end":2304,"column_start":1,"column_end":37}},{"value":"/   let fst_end = unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512907,"byte_end":512935,"line_start":2305,"line_end":2305,"column_start":1,"column_end":29}},{"value":"/     fst.as_bitptr().wrapping_add(fst.len())","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512936,"byte_end":512983,"line_start":2306,"line_end":2306,"column_start":1,"column_end":48}},{"value":"/   };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512984,"byte_end":512992,"line_start":2307,"line_end":2307,"column_start":1,"column_end":9}},{"value":"/   let snd_start = snd.as_bitptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":512993,"byte_end":513031,"line_start":2308,"line_end":2308,"column_start":1,"column_end":39}},{"value":"/   assert_eq!(snd_start, fst_end, \"Slices must be adjacent\");","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513032,"byte_end":513096,"line_start":2309,"line_end":2309,"column_start":1,"column_end":65}},{"value":"/   unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513097,"byte_end":513111,"line_start":2310,"line_end":2310,"column_start":1,"column_end":15}},{"value":"/     bv_slice::from_raw_parts(fst.as_bitptr(), fst.len() + snd.len())","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513112,"byte_end":513184,"line_start":2311,"line_end":2311,"column_start":1,"column_end":73}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513185,"byte_end":513192,"line_start":2312,"line_end":2312,"column_start":1,"column_end":8}},{"value":"/   .unwrap()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513193,"byte_end":513208,"line_start":2313,"line_end":2313,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513209,"byte_end":513214,"line_start":2314,"line_end":2314,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513215,"byte_end":513218,"line_start":2315,"line_end":2315,"column_start":1,"column_end":4}},{"value":"/ let a = [0u8; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513219,"byte_end":513240,"line_start":2316,"line_end":2316,"column_start":1,"column_end":22}},{"value":"/ let b = [!0u8; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513241,"byte_end":513263,"line_start":2317,"line_end":2317,"column_start":1,"column_end":23}},{"value":"/ let c = join_bitslices(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513264,"byte_end":513291,"line_start":2318,"line_end":2318,"column_start":1,"column_end":28}},{"value":"/   a.view_bits::<LocalBits>(),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513292,"byte_end":513325,"line_start":2319,"line_end":2319,"column_start":1,"column_end":34}},{"value":"/   b.view_bits::<LocalBits>(),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513326,"byte_end":513359,"line_start":2320,"line_end":2320,"column_start":1,"column_end":34}},{"value":"/ );","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513360,"byte_end":513366,"line_start":2321,"line_end":2321,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513367,"byte_end":513374,"line_start":2322,"line_end":2322,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513375,"byte_end":513378,"line_start":2323,"line_end":2323,"column_start":1,"column_end":4}},{"value":"/ In this example, the compiler may elect to place `a` and `b` in adjacent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513379,"byte_end":513455,"line_start":2324,"line_end":2324,"column_start":1,"column_end":77}},{"value":"/ stack slots, but because they are still *separate allocation* regions, it is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513456,"byte_end":513536,"line_start":2325,"line_end":2325,"column_start":1,"column_end":81}},{"value":"/ illegal for a single region descriptor to be created over both of them.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513537,"byte_end":513612,"line_start":2326,"line_end":2326,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513613,"byte_end":513616,"line_start":2327,"line_end":2327,"column_start":1,"column_end":4}},{"value":"/ [below]: #incorrect-usage","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513617,"byte_end":513646,"line_start":2328,"line_end":2328,"column_start":1,"column_end":30}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513647,"byte_end":513681,"line_start":2329,"line_end":2329,"column_start":1,"column_end":35}},{"value":"/ [`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513682,"byte_end":513742,"line_start":2330,"line_end":2330,"column_start":1,"column_end":61}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513743,"byte_end":513752,"line_start":2331,"line_end":2331,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2657},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515857,"byte_end":515875,"line_start":2384,"line_end":2384,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::api::from_raw_parts_mut","value":"pub unsafe fn from_raw_parts_mut<'a, O, T>(BitPtr<Mut, O, T>, usize)\n-> Result<&'a mut BitSlice<O, T>, BitSpanError<T>> where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts`], except that a mutable\n slice is returned.","sig":null,"attributes":[{"value":"/ Performs the same functionality as [`from_raw_parts`], except that a mutable","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":513968,"byte_end":514048,"line_start":2343,"line_end":2343,"column_start":1,"column_end":81}},{"value":"/ slice is returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514049,"byte_end":514071,"line_start":2344,"line_end":2344,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514072,"byte_end":514075,"line_start":2345,"line_end":2345,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514076,"byte_end":514090,"line_start":2346,"line_end":2346,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514091,"byte_end":514094,"line_start":2347,"line_end":2347,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts_mut`](core::slice::from_raw_parts_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514095,"byte_end":514161,"line_start":2348,"line_end":2348,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514162,"byte_end":514165,"line_start":2349,"line_end":2349,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514166,"byte_end":514187,"line_start":2350,"line_end":2350,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514188,"byte_end":514191,"line_start":2351,"line_end":2351,"column_start":1,"column_end":4}},{"value":"/ This takes a [`BitPtr`] as its base address, rather than a raw `*Bit`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514192,"byte_end":514265,"line_start":2352,"line_end":2352,"column_start":1,"column_end":74}},{"value":"/ pointer, as `bitvec` does not provide raw pointers to individual bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514266,"byte_end":514340,"line_start":2353,"line_end":2353,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514341,"byte_end":514344,"line_start":2354,"line_end":2354,"column_start":1,"column_end":4}},{"value":"/ It returns a `Result`, because the `len` argument may be invalid to encode","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514345,"byte_end":514423,"line_start":2355,"line_end":2355,"column_start":1,"column_end":79}},{"value":"/ into a `&BitSlice` reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514424,"byte_end":514457,"line_start":2356,"line_end":2356,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514458,"byte_end":514461,"line_start":2357,"line_end":2357,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514462,"byte_end":514474,"line_start":2358,"line_end":2358,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514475,"byte_end":514478,"line_start":2359,"line_end":2359,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514479,"byte_end":514553,"line_start":2360,"line_end":2360,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514554,"byte_end":514557,"line_start":2361,"line_end":2361,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for both reads and writes for `len` many bits, and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514558,"byte_end":514637,"line_start":2362,"line_end":2362,"column_start":1,"column_end":80}},{"value":"/   it must be properly aligned. This means in particular:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514638,"byte_end":514698,"line_start":2363,"line_end":2363,"column_start":1,"column_end":61}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514699,"byte_end":514778,"line_start":2364,"line_end":2364,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514779,"byte_end":514852,"line_start":2365,"line_end":2365,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514853,"byte_end":514869,"line_start":2366,"line_end":2366,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null, and its `T` portion must be aligned. Both of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514870,"byte_end":514947,"line_start":2367,"line_end":2367,"column_start":1,"column_end":78}},{"value":"/     these conditions are checked during safe construction of the [`BitPtr`],","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":514948,"byte_end":515028,"line_start":2368,"line_end":2368,"column_start":1,"column_end":81}},{"value":"/     and `unsafe` construction of it **must not** violate them. Doing so will","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515029,"byte_end":515109,"line_start":2369,"line_end":2369,"column_start":1,"column_end":81}},{"value":"/     cause incorrect behavior in the crate.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515110,"byte_end":515156,"line_start":2370,"line_end":2370,"column_start":1,"column_end":47}},{"value":"/ - `data` must point to `len` consecutive bits within properly initialized","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515157,"byte_end":515234,"line_start":2371,"line_end":2371,"column_start":1,"column_end":78}},{"value":"/   memory elements `T`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515235,"byte_end":515261,"line_start":2372,"line_end":2372,"column_start":1,"column_end":27}},{"value":"/ - The memory referenced by the returned slice must not be accessed through","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515262,"byte_end":515340,"line_start":2373,"line_end":2373,"column_start":1,"column_end":79}},{"value":"/   any other pointer (not derived from the return value) for the duration of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515341,"byte_end":515420,"line_start":2374,"line_end":2374,"column_start":1,"column_end":80}},{"value":"/   lifetime `'a`. Both read and write accesses are forbidden. This is true","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515421,"byte_end":515498,"line_start":2375,"line_end":2375,"column_start":1,"column_end":78}},{"value":"/   even if `T` supports aliased mutation! An `&mut` reference requires","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515499,"byte_end":515572,"line_start":2376,"line_end":2376,"column_start":1,"column_end":74}},{"value":"/   **exclusive** access for its lifetime.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515573,"byte_end":515617,"line_start":2377,"line_end":2377,"column_start":1,"column_end":45}},{"value":"/ - `len` cannot exceed [`BitSlice::MAX_BITS`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515618,"byte_end":515667,"line_start":2378,"line_end":2378,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515668,"byte_end":515671,"line_start":2379,"line_end":2379,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/stable/core/ptr/index.html#safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515672,"byte_end":515744,"line_start":2380,"line_end":2380,"column_start":1,"column_end":73}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515745,"byte_end":515779,"line_start":2381,"line_end":2381,"column_start":1,"column_end":35}},{"value":"/ [`from_raw_parts`]: crate::slice::from_raw_parts","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515780,"byte_end":515832,"line_start":2382,"line_end":2382,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":515833,"byte_end":515842,"line_start":2383,"line_end":2383,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":2661},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":516992,"byte_end":517005,"line_start":2420,"line_end":2420,"column_start":11,"column_end":24},"name":"BitSliceIndex","qualname":"::slice::api::BitSliceIndex","value":"BitSliceIndex<'a, O, T>","parent":null,"children":[{"krate":0,"index":2665},{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":2669},{"krate":0,"index":2670},{"krate":0,"index":2671},{"krate":0,"index":2672}],"decl_id":null,"docs":" A helper trait used for indexing operations.","sig":null,"attributes":[{"value":"* A helper trait used for indexing operations.\n\nThis trait has its definition stabilized, but has not stabilized its associated\nmethods. This means it cannot be implemented outside of the distribution\nlibraries. *Furthermore*, since [`bitvec`] cannot create `&mut bool` references,\nit is insufficient for `bitvec`’s uses.\n\nThere is no tracking issue for `feature(slice_index_methods)`.\n\n# Original\n\n[`slice::SliceIndex`](core::slice::SliceIndex)\n\n# API Differences\n\n[`SliceIndex::Output`] is not usable here, because the `usize` implementation\ncannot produce `&mut bool`. Instead, two output types `Immut` and `Mut` are\ndefined. The range implementations define these to be the appropriately mutable\n[`BitSlice`] reference; the `usize` implementation defines them to be `&bool`\nand the proxy type.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`SliceIndex::Output`]: core::slice::SliceIndex::Output\n[`bitvec`]: crate\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":516064,"byte_end":516981,"line_start":2395,"line_end":2419,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":2665},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517104,"byte_end":517109,"line_start":2426,"line_end":2426,"column_start":7,"column_end":12},"name":"Immut","qualname":"::slice::api::BitSliceIndex::Immut","value":"type Immut;","parent":{"krate":0,"index":2661},"children":[],"decl_id":null,"docs":" The output type for immutable accessors.\n","sig":null,"attributes":[{"value":"/ The output type for immutable accessors.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517053,"byte_end":517097,"line_start":2425,"line_end":2425,"column_start":2,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":2666},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517162,"byte_end":517165,"line_start":2429,"line_end":2429,"column_start":7,"column_end":10},"name":"Mut","qualname":"::slice::api::BitSliceIndex::Mut","value":"type Mut;","parent":{"krate":0,"index":2661},"children":[],"decl_id":null,"docs":" The output type for mutable accessors.\n","sig":null,"attributes":[{"value":"/ The output type for mutable accessors.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517113,"byte_end":517155,"line_start":2428,"line_end":2428,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2667},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517331,"byte_end":517334,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8},"name":"get","qualname":"::slice::api::BitSliceIndex::get","value":"pub fn get(Self, &'a BitSlice<O, T>) -> Option<Self::Immut>","parent":{"krate":0,"index":2661},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, if in bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, if in bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517169,"byte_end":517245,"line_start":2431,"line_end":2431,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517247,"byte_end":517250,"line_start":2432,"line_end":2432,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517252,"byte_end":517266,"line_start":2433,"line_end":2433,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517268,"byte_end":517271,"line_start":2434,"line_end":2434,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get`](core::slice::SliceIndex::get)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517273,"byte_end":517326,"line_start":2435,"line_end":2435,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2668},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517570,"byte_end":517577,"line_start":2444,"line_end":2444,"column_start":5,"column_end":12},"name":"get_mut","qualname":"::slice::api::BitSliceIndex::get_mut","value":"pub fn get_mut(Self, &'a mut BitSlice<O, T>) -> Option<Self::Mut>","parent":{"krate":0,"index":2661},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, if in\n bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, if in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517394,"byte_end":517463,"line_start":2438,"line_end":2438,"column_start":2,"column_end":71}},{"value":"/ bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517465,"byte_end":517476,"line_start":2439,"line_end":2439,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517478,"byte_end":517481,"line_start":2440,"line_end":2440,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517483,"byte_end":517497,"line_start":2441,"line_end":2441,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517499,"byte_end":517502,"line_start":2442,"line_end":2442,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_mut`](core::slice::SliceIndex::get_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517504,"byte_end":517565,"line_start":2443,"line_end":2443,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518353,"byte_end":518366,"line_start":2463,"line_end":2463,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"::slice::api::BitSliceIndex::get_unchecked","value":"pub unsafe fn get_unchecked(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":2661},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, without","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517639,"byte_end":517709,"line_start":2446,"line_end":2446,"column_start":2,"column_end":72}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517711,"byte_end":517774,"line_start":2447,"line_end":2447,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517776,"byte_end":517845,"line_start":2448,"line_end":2448,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517847,"byte_end":517873,"line_start":2449,"line_end":2449,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517875,"byte_end":517878,"line_start":2450,"line_end":2450,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517880,"byte_end":517894,"line_start":2451,"line_end":2451,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517896,"byte_end":517899,"line_start":2452,"line_end":2452,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked`](core::slice::SliceIndex::get_unchecked)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517901,"byte_end":517974,"line_start":2453,"line_end":2453,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517976,"byte_end":517979,"line_start":2454,"line_end":2454,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517981,"byte_end":517993,"line_start":2455,"line_end":2455,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":517995,"byte_end":517998,"line_start":2456,"line_end":2456,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518000,"byte_end":518072,"line_start":2457,"line_end":2457,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518074,"byte_end":518148,"line_start":2458,"line_end":2458,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518150,"byte_end":518221,"line_start":2459,"line_end":2459,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518223,"byte_end":518238,"line_start":2460,"line_end":2460,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518240,"byte_end":518243,"line_start":2461,"line_end":2461,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518245,"byte_end":518341,"line_start":2462,"line_end":2462,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2670},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519159,"byte_end":519176,"line_start":2483,"line_end":2483,"column_start":12,"column_end":29},"name":"get_unchecked_mut","qualname":"::slice::api::BitSliceIndex::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":2661},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518418,"byte_end":518489,"line_start":2465,"line_end":2465,"column_start":2,"column_end":73}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518491,"byte_end":518554,"line_start":2466,"line_end":2466,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518556,"byte_end":518625,"line_start":2467,"line_end":2467,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518627,"byte_end":518653,"line_start":2468,"line_end":2468,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518655,"byte_end":518658,"line_start":2469,"line_end":2469,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518660,"byte_end":518674,"line_start":2470,"line_end":2470,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518676,"byte_end":518679,"line_start":2471,"line_end":2471,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked_mut`][orig]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518681,"byte_end":518724,"line_start":2472,"line_end":2472,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518726,"byte_end":518729,"line_start":2473,"line_end":2473,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518731,"byte_end":518743,"line_start":2474,"line_end":2474,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518745,"byte_end":518748,"line_start":2475,"line_end":2475,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518750,"byte_end":518822,"line_start":2476,"line_end":2476,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518824,"byte_end":518898,"line_start":2477,"line_end":2477,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518900,"byte_end":518971,"line_start":2478,"line_end":2478,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518973,"byte_end":518988,"line_start":2479,"line_end":2479,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518990,"byte_end":518993,"line_start":2480,"line_end":2480,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::SliceIndex::get_unchecked_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":518995,"byte_end":519049,"line_start":2481,"line_end":2481,"column_start":2,"column_end":56}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519051,"byte_end":519147,"line_start":2482,"line_end":2482,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2671},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519423,"byte_end":519428,"line_start":2494,"line_end":2494,"column_start":5,"column_end":10},"name":"index","qualname":"::slice::api::BitSliceIndex::index","value":"pub fn index(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":2661},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, panicking if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519238,"byte_end":519313,"line_start":2488,"line_end":2488,"column_start":2,"column_end":77}},{"value":"/ out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519315,"byte_end":519333,"line_start":2489,"line_end":2489,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519335,"byte_end":519338,"line_start":2490,"line_end":2490,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519340,"byte_end":519354,"line_start":2491,"line_end":2491,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519356,"byte_end":519359,"line_start":2492,"line_end":2492,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index`](core::slice::SliceIndex::index)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519361,"byte_end":519418,"line_start":2493,"line_end":2493,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2672},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519674,"byte_end":519683,"line_start":2502,"line_end":2502,"column_start":5,"column_end":14},"name":"index_mut","qualname":"::slice::api::BitSliceIndex::index_mut","value":"pub fn index_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":2661},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, panicking if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519480,"byte_end":519556,"line_start":2496,"line_end":2496,"column_start":2,"column_end":78}},{"value":"/ out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519558,"byte_end":519576,"line_start":2497,"line_end":2497,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519578,"byte_end":519581,"line_start":2498,"line_end":2498,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519583,"byte_end":519597,"line_start":2499,"line_end":2499,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519599,"byte_end":519602,"line_start":2500,"line_end":2500,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index_mut`](core::slice::SliceIndex::index_mut)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":519604,"byte_end":519669,"line_start":2501,"line_end":2501,"column_start":2,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2775},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526196,"byte_end":526200,"line_start":91,"line_end":91,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2779},{"krate":0,"index":2780}],"decl_id":null,"docs":" Immutable [`BitSlice`] iterator.","sig":null,"attributes":[{"value":"* Immutable [`BitSlice`] iterator.\n\nThis struct is created by the [`.iter()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Iter`](core::slice::Iter)\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![0, 1];\nfor bit in bits.iter() {\n  # #[cfg(feature = \"std\")]\n  println!(\"{}\", bit);\n}\n```\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter()`]: crate::slice::BitSlice::iter\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":525761,"byte_end":526163,"line_start":65,"line_end":89,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526164,"byte_end":526184,"line_start":90,"line_end":90,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2786},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527948,"byte_end":527959,"line_start":160,"line_end":160,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Iter>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526931,"byte_end":526996,"line_start":121,"line_end":121,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526998,"byte_end":527001,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ This has the same lifetime as the original [`BitSlice`], and so the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527003,"byte_end":527074,"line_start":123,"line_end":123,"column_start":2,"column_end":73}},{"value":"/ iterator can continue to be used while this exists.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527076,"byte_end":527131,"line_start":124,"line_end":124,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527133,"byte_end":527136,"line_start":125,"line_end":125,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527138,"byte_end":527152,"line_start":126,"line_end":126,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527154,"byte_end":527157,"line_start":127,"line_end":127,"column_start":2,"column_end":5}},{"value":"/ [`Iter::as_slice`](core::slice::Iter::as_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527159,"byte_end":527210,"line_start":128,"line_end":128,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527212,"byte_end":527215,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527217,"byte_end":527238,"line_start":130,"line_end":130,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527240,"byte_end":527243,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ As this views a [`BitSlice`], rather than a `[T]` or `[bool]` slice, it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527245,"byte_end":527320,"line_start":132,"line_end":132,"column_start":2,"column_end":77}},{"value":"/ has been renamed.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527322,"byte_end":527343,"line_start":133,"line_end":133,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527345,"byte_end":527348,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527350,"byte_end":527364,"line_start":135,"line_end":135,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527366,"byte_end":527369,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527371,"byte_end":527387,"line_start":137,"line_end":137,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527389,"byte_end":527392,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527394,"byte_end":527405,"line_start":139,"line_end":139,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527407,"byte_end":527438,"line_start":140,"line_end":140,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527440,"byte_end":527467,"line_start":141,"line_end":141,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527469,"byte_end":527472,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527474,"byte_end":527507,"line_start":143,"line_end":143,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527509,"byte_end":527512,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ // Get the iterator:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527514,"byte_end":527538,"line_start":145,"line_end":145,"column_start":2,"column_end":26}},{"value":"/ let mut iter = bits.iter();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527540,"byte_end":527571,"line_start":146,"line_end":146,"column_start":2,"column_end":33}},{"value":"/ // So if we print what `as_bitslice` returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527573,"byte_end":527621,"line_start":147,"line_end":147,"column_start":2,"column_end":50}},{"value":"/ // here, we have \"[0011]\":","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527623,"byte_end":527653,"line_start":148,"line_end":148,"column_start":2,"column_end":32}},{"value":"/ println!(\"{:b}\", iter.as_bitslice());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527655,"byte_end":527696,"line_start":149,"line_end":149,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527698,"byte_end":527701,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ // Next, we move to the second element of the slice:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527703,"byte_end":527759,"line_start":151,"line_end":151,"column_start":2,"column_end":58}},{"value":"/ iter.next();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527761,"byte_end":527777,"line_start":152,"line_end":152,"column_start":2,"column_end":18}},{"value":"/ // Now `as_bitslice` returns \"[011]\":","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527779,"byte_end":527820,"line_start":153,"line_end":153,"column_start":2,"column_end":43}},{"value":"/ println!(\"{:b}\", iter.as_bitslice());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527822,"byte_end":527863,"line_start":154,"line_end":154,"column_start":2,"column_end":43}},{"value":"/ # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527865,"byte_end":527872,"line_start":155,"line_end":155,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527874,"byte_end":527881,"line_start":156,"line_end":156,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527883,"byte_end":527886,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527888,"byte_end":527928,"line_start":158,"line_end":158,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":527930,"byte_end":527939,"line_start":159,"line_end":159,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2787},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528190,"byte_end":528198,"line_start":168,"line_end":168,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Iter>::as_slice","value":"pub fn as_slice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528066,"byte_end":528083,"line_start":165,"line_end":165,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528085,"byte_end":528115,"line_start":166,"line_end":166,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528117,"byte_end":528181,"line_start":167,"line_end":167,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2788},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529160,"byte_end":529166,"line_start":203,"line_end":203,"column_start":9,"column_end":15},"name":"by_ref","qualname":"<Iter>::by_ref","value":"pub fn by_ref(Self) -> BitRefIter","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield `&bool` references rather than `BitRef`\n proxies.","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield `&bool` references rather than `BitRef`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528256,"byte_end":528328,"line_start":172,"line_end":172,"column_start":2,"column_end":74}},{"value":"/ proxies.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528330,"byte_end":528342,"line_start":173,"line_end":173,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528344,"byte_end":528347,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect ordinary","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528349,"byte_end":528417,"line_start":175,"line_end":175,"column_start":2,"column_end":70}},{"value":"/ references and are not easily modified to receive the proxy structure.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528419,"byte_end":528493,"line_start":176,"line_end":176,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528495,"byte_end":528498,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ It works by yielding `&'static` references to hidden statics; these","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528500,"byte_end":528571,"line_start":178,"line_end":178,"column_start":2,"column_end":73}},{"value":"/ references will **not** have an address value that fits in the context","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528573,"byte_end":528647,"line_start":179,"line_end":179,"column_start":2,"column_end":76}},{"value":"/ of the iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528649,"byte_end":528669,"line_start":180,"line_end":180,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528671,"byte_end":528674,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528676,"byte_end":528692,"line_start":182,"line_end":182,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528694,"byte_end":528697,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528699,"byte_end":528711,"line_start":184,"line_end":184,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528713,"byte_end":528716,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528718,"byte_end":528731,"line_start":186,"line_end":186,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528733,"byte_end":528736,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ An iterator equivalent to `self`, that yields `&bool` instead of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528738,"byte_end":528806,"line_start":188,"line_end":188,"column_start":2,"column_end":70}},{"value":"/ `BitRef`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528808,"byte_end":528821,"line_start":189,"line_end":189,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528823,"byte_end":528826,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528828,"byte_end":528842,"line_start":191,"line_end":191,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528844,"byte_end":528847,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528849,"byte_end":528860,"line_start":193,"line_end":193,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528862,"byte_end":528889,"line_start":194,"line_end":194,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528891,"byte_end":528894,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528896,"byte_end":528923,"line_start":196,"line_end":196,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_ref();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528925,"byte_end":528965,"line_start":197,"line_end":197,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(iter.next(), Some(&false));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":528967,"byte_end":529009,"line_start":198,"line_end":198,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(&true));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529011,"byte_end":529052,"line_start":199,"line_end":199,"column_start":2,"column_end":43}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529054,"byte_end":529089,"line_start":200,"line_end":200,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529091,"byte_end":529098,"line_start":201,"line_end":201,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529135,"byte_end":529149,"line_start":202,"line_end":202,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2789},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530165,"byte_end":530171,"line_start":241,"line_end":241,"column_start":9,"column_end":15},"name":"by_val","qualname":"<Iter>::by_val","value":"pub fn by_val(Self) -> BitValIter","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield `bool` values rather than `BitRef` proxy\n references.","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield `bool` values rather than `BitRef` proxy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529248,"byte_end":529321,"line_start":209,"line_end":209,"column_start":2,"column_end":75}},{"value":"/ references.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529323,"byte_end":529338,"line_start":210,"line_end":210,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529340,"byte_end":529343,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect ordinary values.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529345,"byte_end":529421,"line_start":212,"line_end":212,"column_start":2,"column_end":78}},{"value":"/ It dereferences the proxy and produces the proxied `bool` directly.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529423,"byte_end":529494,"line_start":213,"line_end":213,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529496,"byte_end":529499,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `[bool].iter().copied()`, as [`Iterator::copied`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529501,"byte_end":529576,"line_start":215,"line_end":215,"column_start":2,"column_end":77}},{"value":"/ is not available on this iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529578,"byte_end":529616,"line_start":216,"line_end":216,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529618,"byte_end":529621,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529623,"byte_end":529639,"line_start":218,"line_end":218,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529641,"byte_end":529644,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529646,"byte_end":529658,"line_start":220,"line_end":220,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529660,"byte_end":529663,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529665,"byte_end":529678,"line_start":222,"line_end":222,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529680,"byte_end":529683,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ An iterator equivalent to `self`, that yields `bool` instead of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529685,"byte_end":529752,"line_start":224,"line_end":224,"column_start":2,"column_end":69}},{"value":"/ `BitRef`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529754,"byte_end":529767,"line_start":225,"line_end":225,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529769,"byte_end":529772,"line_start":226,"line_end":226,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529774,"byte_end":529788,"line_start":227,"line_end":227,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529790,"byte_end":529793,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529795,"byte_end":529806,"line_start":229,"line_end":229,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529808,"byte_end":529835,"line_start":230,"line_end":230,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529837,"byte_end":529840,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529842,"byte_end":529869,"line_start":232,"line_end":232,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_val();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529871,"byte_end":529911,"line_start":233,"line_end":233,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(iter.next(), Some(false));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529913,"byte_end":529954,"line_start":234,"line_end":234,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(true));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529956,"byte_end":529996,"line_start":235,"line_end":235,"column_start":2,"column_end":42}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":529998,"byte_end":530033,"line_start":236,"line_end":236,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530035,"byte_end":530042,"line_start":237,"line_end":237,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530044,"byte_end":530047,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ [`Iterator::copied`]: core::iter::Iterator::copied","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530049,"byte_end":530103,"line_start":239,"line_end":239,"column_start":2,"column_end":56}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530140,"byte_end":530154,"line_start":240,"line_end":240,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2790},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530875,"byte_end":530881,"line_start":259,"line_end":259,"column_start":9,"column_end":15},"name":"copied","qualname":"<Iter>::copied","value":"pub fn copied(Self) -> BitValIter","parent":null,"children":[],"decl_id":null,"docs":" Forwards to [`by_val`].","sig":null,"attributes":[{"value":"/ Forwards to [`by_val`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530238,"byte_end":530265,"line_start":245,"line_end":245,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530267,"byte_end":530270,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ This exists to allow ported code to continue to compile when","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530272,"byte_end":530336,"line_start":247,"line_end":247,"column_start":2,"column_end":66}},{"value":"/ `[bool].iter().copied()` is replaced with `BitSlice.iter().copied()`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530338,"byte_end":530411,"line_start":248,"line_end":248,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530413,"byte_end":530416,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ However, because [`Iterator::copied`] is not available on this iterator,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530418,"byte_end":530494,"line_start":250,"line_end":250,"column_start":2,"column_end":78}},{"value":"/ this name raises a deprecation warning and encourages the user to use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530496,"byte_end":530569,"line_start":251,"line_end":251,"column_start":2,"column_end":75}},{"value":"/ the correct inherent method instead of the overloaded method name.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530571,"byte_end":530641,"line_start":252,"line_end":252,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530643,"byte_end":530646,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ [`by_val`]: Self::by_val","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530648,"byte_end":530676,"line_start":254,"line_end":254,"column_start":2,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530678,"byte_end":530695,"line_start":255,"line_end":255,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530697,"byte_end":530727,"line_start":256,"line_end":256,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"`Iterator::copied` does not exist on this iterator. Use \\\n\t                `by_val` instead to achieve the same effect.\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530729,"byte_end":530866,"line_start":257,"line_end":258,"column_start":2,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5656},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531767,"byte_end":531777,"line_start":307,"line_end":307,"column_start":12,"column_end":22},"name":"BitRefIter","qualname":"::slice::iter::BitRefIter","value":"BitRefIter {  }","parent":null,"children":[{"krate":0,"index":5660}],"decl_id":null,"docs":" An iterator over `BitSlice` that produces ordinary `&bool`. May be faster in\n some cases. Produced by [`Iter::by_ref`].\n","sig":null,"attributes":[{"value":"/ An iterator over `BitSlice` that produces ordinary `&bool`. May be faster in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531584,"byte_end":531664,"line_start":303,"line_end":303,"column_start":1,"column_end":81}},{"value":"/ some cases. Produced by [`Iter::by_ref`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531665,"byte_end":531710,"line_start":304,"line_end":304,"column_start":1,"column_end":46}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531711,"byte_end":531731,"line_start":305,"line_end":305,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":5671},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":533381,"byte_end":533391,"line_start":396,"line_end":396,"column_start":12,"column_end":22},"name":"BitValIter","qualname":"::slice::iter::BitValIter","value":"BitValIter {  }","parent":null,"children":[{"krate":0,"index":5675}],"decl_id":null,"docs":" An iterator over `BitSlice` that produces ordinary `bool`. May be faster in\n some cases. Produced by [`Iter::by_val`].\n","sig":null,"attributes":[{"value":"/ An iterator over `BitSlice` that produces ordinary `bool`. May be faster in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":533199,"byte_end":533278,"line_start":392,"line_end":392,"column_start":1,"column_end":80}},{"value":"/ some cases. Produced by [`Iter::by_val`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":533279,"byte_end":533324,"line_start":393,"line_end":393,"column_start":1,"column_end":46}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":533325,"byte_end":533345,"line_start":394,"line_end":394,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":2855},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":535157,"byte_end":535164,"line_start":497,"line_end":497,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::iter::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2859},{"krate":0,"index":2860}],"decl_id":null,"docs":" Mutable [`BitSlice`] iterator.","sig":null,"attributes":[{"value":"* Mutable [`BitSlice`] iterator.\n\nThis struct is created by the [`.iter_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::IterMut`](crate::slice::IterMut)\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\nfor mut bit in bits.iter_mut() {\n  *bit = true;\n}\nassert_eq!(bits, bits![1; 2]);\n```\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_mut()`]: crate::slice::BitSlice::iter_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":534698,"byte_end":535124,"line_start":471,"line_end":495,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":535125,"byte_end":535145,"line_start":496,"line_end":496,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537240,"byte_end":537253,"line_start":577,"line_end":577,"column_start":9,"column_end":22},"name":"into_bitslice","qualname":"<IterMut>::into_bitslice","value":"pub fn into_bitslice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":535980,"byte_end":536045,"line_start":528,"line_end":528,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536047,"byte_end":536050,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ To avoid creating `&mut` references that alias, this is forced to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536052,"byte_end":536121,"line_start":530,"line_end":530,"column_start":2,"column_end":71}},{"value":"/ consume the iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536123,"byte_end":536148,"line_start":531,"line_end":531,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536150,"byte_end":536153,"line_start":532,"line_end":532,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536155,"byte_end":536169,"line_start":533,"line_end":533,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536171,"byte_end":536174,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ [`IterMut::into_slice`](core::slice::IterMut::into_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536176,"byte_end":536237,"line_start":535,"line_end":535,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536239,"byte_end":536242,"line_start":536,"line_end":536,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536244,"byte_end":536265,"line_start":537,"line_end":537,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536267,"byte_end":536270,"line_start":538,"line_end":538,"column_start":2,"column_end":5}},{"value":"/ As this views a [`BitSlice`], rather than a `[T]` or `[bool]` slice, it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536272,"byte_end":536347,"line_start":539,"line_end":539,"column_start":2,"column_end":77}},{"value":"/ has been renamed.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536349,"byte_end":536370,"line_start":540,"line_end":540,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536372,"byte_end":536375,"line_start":541,"line_end":541,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536377,"byte_end":536391,"line_start":542,"line_end":542,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536393,"byte_end":536396,"line_start":543,"line_end":543,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536398,"byte_end":536414,"line_start":544,"line_end":544,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536416,"byte_end":536419,"line_start":545,"line_end":545,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536421,"byte_end":536432,"line_start":546,"line_end":546,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536434,"byte_end":536465,"line_start":547,"line_end":547,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536467,"byte_end":536494,"line_start":548,"line_end":548,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536496,"byte_end":536499,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536501,"byte_end":536535,"line_start":550,"line_end":550,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536537,"byte_end":536540,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536542,"byte_end":536547,"line_start":552,"line_end":552,"column_start":2,"column_end":7}},{"value":"/   // Get the iterator:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536549,"byte_end":536575,"line_start":553,"line_end":553,"column_start":2,"column_end":28}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536577,"byte_end":536614,"line_start":554,"line_end":554,"column_start":2,"column_end":39}},{"value":"/   // We move to the next element:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536616,"byte_end":536653,"line_start":555,"line_end":555,"column_start":2,"column_end":39}},{"value":"/   iter.next();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536655,"byte_end":536673,"line_start":556,"line_end":556,"column_start":2,"column_end":20}},{"value":"/   // So if we print what `into_bitslice`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536675,"byte_end":536719,"line_start":557,"line_end":557,"column_start":2,"column_end":46}},{"value":"/   // returns here, we have \"[10]\":","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536721,"byte_end":536759,"line_start":558,"line_end":558,"column_start":2,"column_end":40}},{"value":"/   println!(\"{:b}\", iter.into_slice());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536761,"byte_end":536803,"line_start":559,"line_end":559,"column_start":2,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536805,"byte_end":536810,"line_start":560,"line_end":560,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536812,"byte_end":536815,"line_start":561,"line_end":561,"column_start":2,"column_end":5}},{"value":"/ // Now let’s modify a value of the slice:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536817,"byte_end":536864,"line_start":562,"line_end":562,"column_start":2,"column_end":47}},{"value":"/ {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536866,"byte_end":536871,"line_start":563,"line_end":563,"column_start":2,"column_end":7}},{"value":"/   // First we get back the iterator:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536873,"byte_end":536913,"line_start":564,"line_end":564,"column_start":2,"column_end":42}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536915,"byte_end":536952,"line_start":565,"line_end":565,"column_start":2,"column_end":39}},{"value":"/   // We change the value of the first bit of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":536954,"byte_end":537002,"line_start":566,"line_end":566,"column_start":2,"column_end":50}},{"value":"/   // the slice returned by the `next` method:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537004,"byte_end":537053,"line_start":567,"line_end":567,"column_start":2,"column_end":51}},{"value":"/   *iter.next().unwrap() = true;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537055,"byte_end":537090,"line_start":568,"line_end":568,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537092,"byte_end":537097,"line_start":569,"line_end":569,"column_start":2,"column_end":7}},{"value":"/ // Now bits is \"[110]\":","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537099,"byte_end":537126,"line_start":570,"line_end":570,"column_start":2,"column_end":29}},{"value":"/ println!(\"{:b}\", bits);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537128,"byte_end":537155,"line_start":571,"line_end":571,"column_start":2,"column_end":29}},{"value":"/ # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537157,"byte_end":537164,"line_start":572,"line_end":572,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537166,"byte_end":537173,"line_start":573,"line_end":573,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537175,"byte_end":537178,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537180,"byte_end":537220,"line_start":575,"line_end":575,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537222,"byte_end":537231,"line_start":576,"line_end":576,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2867},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537488,"byte_end":537498,"line_start":585,"line_end":585,"column_start":9,"column_end":19},"name":"into_slice","qualname":"<IterMut>::into_slice","value":"pub fn into_slice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537362,"byte_end":537379,"line_start":582,"line_end":582,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537381,"byte_end":537411,"line_start":583,"line_end":583,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `into_bitslice` to view the underlying slice\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537413,"byte_end":537479,"line_start":584,"line_end":584,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":5752},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":541316,"byte_end":541323,"line_start":794,"line_end":794,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::iter::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":5756},{"krate":0,"index":5757}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"* An iterator over overlapping subslices of length `size`.\n\nThis struct is created by the [`.windows()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Windows`](core::slice::Windows)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.windows()`]: crate::slice::BitSlice::windows\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":541005,"byte_end":541280,"line_start":782,"line_end":792,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5791},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":543463,"byte_end":543469,"line_start":884,"line_end":884,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::iter::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":5795},{"krate":0,"index":5796}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.chunks()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Chunks`](core::slice::Chunks)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks()`]: crate::slice::BitSlice::chunks\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":542964,"byte_end":543427,"line_start":868,"line_end":882,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5830},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":546187,"byte_end":546196,"line_start":993,"line_end":993,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::iter::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":5834},{"krate":0,"index":5835}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.chunks_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksMut`](core::slice::ChunksMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_mut()`]: crate::slice::BitSlice::chunks_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":545588,"byte_end":546158,"line_start":973,"line_end":991,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5864},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549085,"byte_end":549096,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::iter::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":5868},{"krate":0,"index":5869},{"krate":0,"index":5870}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be ommitted but can be retrieved from the\n[`.remainder()`] function from the iterator.\n\nThis struct is created by the [`.chunks_exact()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksExact`](core::slice::ChunksExact)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_exact()`]: crate::slice::BitSlice::chunks_exact\n[`.remainder()`]: Self::remainder\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":548452,"byte_end":549049,"line_start":1084,"line_end":1100,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2880},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":550163,"byte_end":550172,"line_start":1146,"line_end":1146,"column_start":9,"column_end":18},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549781,"byte_end":549856,"line_start":1136,"line_end":1136,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549858,"byte_end":549926,"line_start":1137,"line_end":1137,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549928,"byte_end":549952,"line_start":1138,"line_end":1138,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549954,"byte_end":549957,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549959,"byte_end":549973,"line_start":1140,"line_end":1140,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549975,"byte_end":549978,"line_start":1141,"line_end":1141,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExact::remainder`](core::slice::ChunksExact::remainder)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549980,"byte_end":550054,"line_start":1142,"line_end":1142,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":550056,"byte_end":550059,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":550061,"byte_end":550101,"line_start":1144,"line_end":1144,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":550138,"byte_end":550152,"line_start":1145,"line_end":1145,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":5904},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":552242,"byte_end":552256,"line_start":1230,"line_end":1230,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::iter::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":5908},{"krate":0,"index":5909},{"krate":0,"index":5910}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.into_remainder()`] function from the iterator.\n\nThis struct is created by the [`.chunks_exact_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksExactMut`](core::slice::ChunksExactMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_exact_mut()`]: crate::slice::BitSlice::chunks_exact_mut\n[`.into_remainder()`]: Self::into_remainder\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":551495,"byte_end":552213,"line_start":1208,"line_end":1228,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2886},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553523,"byte_end":553537,"line_start":1280,"line_end":1280,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":552974,"byte_end":553049,"line_start":1264,"line_end":1264,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553051,"byte_end":553119,"line_start":1265,"line_end":1265,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553121,"byte_end":553145,"line_start":1266,"line_end":1266,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553147,"byte_end":553150,"line_start":1267,"line_end":1267,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553152,"byte_end":553166,"line_start":1268,"line_end":1268,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553168,"byte_end":553171,"line_start":1269,"line_end":1269,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExactMut::into_remainder`][orig]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553173,"byte_end":553224,"line_start":1270,"line_end":1270,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553226,"byte_end":553229,"line_start":1271,"line_end":1271,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553231,"byte_end":553252,"line_start":1272,"line_end":1272,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553254,"byte_end":553257,"line_start":1273,"line_end":1273,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553259,"byte_end":553333,"line_start":1274,"line_end":1274,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553335,"byte_end":553357,"line_start":1275,"line_end":1275,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553359,"byte_end":553362,"line_start":1276,"line_end":1276,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::ChunksExactMut::into_remainder","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553364,"byte_end":553419,"line_start":1277,"line_end":1277,"column_start":2,"column_end":57}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553421,"byte_end":553461,"line_start":1278,"line_end":1278,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":553498,"byte_end":553512,"line_start":1279,"line_end":1279,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":5939},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":555492,"byte_end":555499,"line_start":1359,"line_end":1359,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::iter::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":5943},{"krate":0,"index":5944}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last\nslice of the iteration will be the remainder.\n\nThis struct is created by the [`.rchunks()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunks`](core::slice::RChunks)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks()`]: crate::slice::BitSlice::rchunks\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":554994,"byte_end":555456,"line_start":1343,"line_end":1357,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5978},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":558900,"byte_end":558910,"line_start":1480,"line_end":1480,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::iter::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":5982},{"krate":0,"index":5983}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.rchunks_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksMut`](core::slice::RChunksMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks_mut()`]: crate::slice::BitSlice::rchunks_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":558302,"byte_end":558871,"line_start":1460,"line_end":1478,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6012},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":561588,"byte_end":561600,"line_start":1582,"line_end":1582,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::iter::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":6016},{"krate":0,"index":6017},{"krate":0,"index":6018}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.remainder()`] function from the iterator.\n\nThis struct is created by the [`.rchunks_exact()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksExact`](core::slice::RChunksExact)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks_exact()`]: crate::slice::BitSlice::rchunks_exact\n[`.remainder()`]: Self::remainder\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":560957,"byte_end":561552,"line_start":1564,"line_end":1580,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2892},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562633,"byte_end":562642,"line_start":1625,"line_end":1625,"column_start":9,"column_end":18},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562249,"byte_end":562324,"line_start":1615,"line_end":1615,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562326,"byte_end":562394,"line_start":1616,"line_end":1616,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562396,"byte_end":562420,"line_start":1617,"line_end":1617,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562422,"byte_end":562425,"line_start":1618,"line_end":1618,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562427,"byte_end":562441,"line_start":1619,"line_end":1619,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562443,"byte_end":562446,"line_start":1620,"line_end":1620,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExact::remainder`](core::slice::RChunksExact::remainder)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562448,"byte_end":562524,"line_start":1621,"line_end":1621,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562526,"byte_end":562529,"line_start":1622,"line_end":1622,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562531,"byte_end":562571,"line_start":1623,"line_end":1623,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":562608,"byte_end":562622,"line_start":1624,"line_end":1624,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6052},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":564835,"byte_end":564850,"line_start":1710,"line_end":1710,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::iter::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":6056},{"krate":0,"index":6057},{"krate":0,"index":6058}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.into_remainder()`] function from the iterator.\n\nThis struct is created by the [`.rchunks_exact_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksExactMut`](core::slice::RChunksExactMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.into_remainder()`]: Self::into_remainder\n[`.rchunks_exact_mut()`]: crate::slice::BitSlice::rchunks_exact_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":564089,"byte_end":564806,"line_start":1688,"line_end":1708,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2898},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":566083,"byte_end":566097,"line_start":1759,"line_end":1759,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565532,"byte_end":565607,"line_start":1743,"line_end":1743,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565609,"byte_end":565677,"line_start":1744,"line_end":1744,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565679,"byte_end":565703,"line_start":1745,"line_end":1745,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565705,"byte_end":565708,"line_start":1746,"line_end":1746,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565710,"byte_end":565724,"line_start":1747,"line_end":1747,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565726,"byte_end":565729,"line_start":1748,"line_end":1748,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExactMut::into_remainder`][orig]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565731,"byte_end":565783,"line_start":1749,"line_end":1749,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565785,"byte_end":565788,"line_start":1750,"line_end":1750,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565790,"byte_end":565811,"line_start":1751,"line_end":1751,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565813,"byte_end":565816,"line_start":1752,"line_end":1752,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565818,"byte_end":565892,"line_start":1753,"line_end":1753,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565894,"byte_end":565916,"line_start":1754,"line_end":1754,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565918,"byte_end":565921,"line_start":1755,"line_end":1755,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::RChunksExactMut::into_remainder","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565923,"byte_end":565979,"line_start":1756,"line_end":1756,"column_start":2,"column_end":58}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565981,"byte_end":566021,"line_start":1757,"line_end":1757,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":566058,"byte_end":566072,"line_start":1758,"line_end":1758,"column_start":37,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":6112},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":570377,"byte_end":570382,"line_start":1966,"line_end":1966,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::iter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":6117},{"krate":0,"index":6118},{"krate":0,"index":6119}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction.\n\nThis struct is created by the [`.split()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Split`](core::slice::Split)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.split()`]: crate::slice::BitSlice::split\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":569899,"byte_end":570348,"line_start":1948,"line_end":1964,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2901},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":571982,"byte_end":571990,"line_start":2039,"line_end":2039,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::iter::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":2906},{"krate":0,"index":2907},{"krate":0,"index":2908}],"decl_id":null,"docs":" An iterator over the mutable subslices which are separated by bits that\nmatch `pred`.","sig":null,"attributes":[{"value":"* An iterator over the mutable subslices which are separated by bits that\nmatch `pred`.\n\nThis struct is created by the [`.split_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitMut`](core::slice::SplitMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.split_mut()`]: crate::slice::BitSlice::split_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":571495,"byte_end":571970,"line_start":2022,"line_end":2038,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6202},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":573707,"byte_end":573713,"line_start":2118,"line_end":2118,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::iter::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":6207},{"krate":0,"index":6208},{"krate":0,"index":6209}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].\n\nThis struct is created by the [`.rsplit()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplit`](core::slice::RSplit)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rsplit()`]: crate::slice::BitSlice::rsplit\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":573181,"byte_end":573678,"line_start":2100,"line_end":2116,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2909},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":575176,"byte_end":575185,"line_start":2177,"line_end":2177,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::iter::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":2914},{"krate":0,"index":2915},{"krate":0,"index":2916}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].\n\nThis struct is created by the [`.rsplit_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitMut`](core::slice::RSplitMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rsplit_mut()`]: crate::slice::BitSlice::rsplit_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":574649,"byte_end":575164,"line_start":2160,"line_end":2176,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2919},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":576981,"byte_end":576987,"line_start":2245,"line_end":2245,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::iter::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":2924},{"krate":0,"index":2925}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`.splitn()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitN`](core::slice::SplitN)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.splitn()`]: crate::slice::BitSlice::splitn\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":576478,"byte_end":576969,"line_start":2228,"line_end":2244,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2926},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":577750,"byte_end":577759,"line_start":2276,"line_end":2276,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::iter::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":2931},{"krate":0,"index":2932}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitNMut`](core::slice::SplitNMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`splitn_mut`]: crate::slice::BitSlice::splitn_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":577235,"byte_end":577738,"line_start":2259,"line_end":2275,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2933},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":578555,"byte_end":578562,"line_start":2308,"line_end":2308,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::iter::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":2938},{"krate":0,"index":2939}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].\n\nThis struct is created by the [`rsplitn`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitN`](core::slice::RSplitN)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`rsplitn`]: crate::slice::BitSlice::rsplitn\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":578010,"byte_end":578543,"line_start":2290,"line_end":2307,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2940},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":579374,"byte_end":579384,"line_start":2340,"line_end":2340,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::iter::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":2945},{"krate":0,"index":2946}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].\n\nThis struct is created by the [`rsplitn_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitNMut`](core::slice::RSplitNMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`rsplitn_mut`]: crate::slice::BitSlice::rsplitn_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":578811,"byte_end":579362,"line_start":2322,"line_end":2339,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6384},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":581820,"byte_end":581828,"line_start":2444,"line_end":2444,"column_start":12,"column_end":20},"name":"IterOnes","qualname":"::slice::iter::IterOnes","value":"IterOnes {  }","parent":null,"children":[{"krate":0,"index":6388},{"krate":0,"index":6389}],"decl_id":null,"docs":" Enumerates bits in a [`BitSlice`] that are set to `1`.","sig":null,"attributes":[{"value":"* Enumerates bits in a [`BitSlice`] that are set to `1`.\n\nThis struct is created by the [`.iter_ones()`] method on [`BitSlice`]s.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_ones()`]: crate::slice::BitSlice::iter_ones\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":581521,"byte_end":581746,"line_start":2436,"line_end":2442,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6433},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":585157,"byte_end":585166,"line_start":2606,"line_end":2606,"column_start":12,"column_end":21},"name":"IterZeros","qualname":"::slice::iter::IterZeros","value":"IterZeros {  }","parent":null,"children":[{"krate":0,"index":6437},{"krate":0,"index":6438}],"decl_id":null,"docs":" Enumerates bits in a [`BitSlice`] that are cleared to `0`.","sig":null,"attributes":[{"value":"* Enumerates bits in a [`BitSlice`] that are cleared to `0`.\n\nThis struct is created by the [`.iter_zeros()`] method on [`BitSlice`]s.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_zeros()`]: crate::slice::BitSlice::iter_zeros\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584851,"byte_end":585083,"line_start":2598,"line_end":2604,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6482},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":593638,"byte_end":593652,"line_start":2946,"line_end":2946,"column_start":5,"column_end":19},"name":"IterMutNoAlias","qualname":"::slice::iter::IterMutNoAlias","value":"IterMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6486}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588681,"byte_end":588753,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588756,"byte_end":588774,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588777,"byte_end":588780,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588783,"byte_end":588853,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588856,"byte_end":588927,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588930,"byte_end":588995,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588998,"byte_end":589069,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589072,"byte_end":589143,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589146,"byte_end":589149,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589152,"byte_end":589223,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589226,"byte_end":589298,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589301,"byte_end":589371,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589374,"byte_end":589442,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589445,"byte_end":589455,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589458,"byte_end":589461,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589464,"byte_end":589511,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589514,"byte_end":589557,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6532},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":593771,"byte_end":593787,"line_start":2950,"line_end":2950,"column_start":5,"column_end":21},"name":"ChunksMutNoAlias","qualname":"::slice::iter::ChunksMutNoAlias","value":"ChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6536}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588681,"byte_end":588753,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588756,"byte_end":588774,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588777,"byte_end":588780,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588783,"byte_end":588853,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588856,"byte_end":588927,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588930,"byte_end":588995,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588998,"byte_end":589069,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589072,"byte_end":589143,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589146,"byte_end":589149,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589152,"byte_end":589223,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589226,"byte_end":589298,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589301,"byte_end":589371,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589374,"byte_end":589442,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589445,"byte_end":589455,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589458,"byte_end":589461,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589464,"byte_end":589511,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589514,"byte_end":589557,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6582},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":593895,"byte_end":593916,"line_start":2954,"line_end":2954,"column_start":5,"column_end":26},"name":"ChunksExactMutNoAlias","qualname":"::slice::iter::ChunksExactMutNoAlias","value":"ChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6586}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588681,"byte_end":588753,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588756,"byte_end":588774,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588777,"byte_end":588780,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588783,"byte_end":588853,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588856,"byte_end":588927,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588930,"byte_end":588995,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588998,"byte_end":589069,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589072,"byte_end":589143,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589146,"byte_end":589149,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589152,"byte_end":589223,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589226,"byte_end":589298,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589301,"byte_end":589371,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589374,"byte_end":589442,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589445,"byte_end":589455,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589458,"byte_end":589461,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589464,"byte_end":589511,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589514,"byte_end":589557,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6632},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":594020,"byte_end":594037,"line_start":2958,"line_end":2958,"column_start":5,"column_end":22},"name":"RChunksMutNoAlias","qualname":"::slice::iter::RChunksMutNoAlias","value":"RChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6636}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588681,"byte_end":588753,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588756,"byte_end":588774,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588777,"byte_end":588780,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588783,"byte_end":588853,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588856,"byte_end":588927,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588930,"byte_end":588995,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588998,"byte_end":589069,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589072,"byte_end":589143,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589146,"byte_end":589149,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589152,"byte_end":589223,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589226,"byte_end":589298,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589301,"byte_end":589371,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589374,"byte_end":589442,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589445,"byte_end":589455,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589458,"byte_end":589461,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589464,"byte_end":589511,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589514,"byte_end":589557,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6682},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":594146,"byte_end":594168,"line_start":2962,"line_end":2962,"column_start":5,"column_end":27},"name":"RChunksExactMutNoAlias","qualname":"::slice::iter::RChunksExactMutNoAlias","value":"RChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6686}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588681,"byte_end":588753,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588756,"byte_end":588774,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588777,"byte_end":588780,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588783,"byte_end":588853,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588856,"byte_end":588927,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588930,"byte_end":588995,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588998,"byte_end":589069,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589072,"byte_end":589143,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589146,"byte_end":589149,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589152,"byte_end":589223,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589226,"byte_end":589298,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589301,"byte_end":589371,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589374,"byte_end":589442,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589445,"byte_end":589455,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589458,"byte_end":589461,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589464,"byte_end":589511,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589514,"byte_end":589557,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6732},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":594274,"byte_end":594289,"line_start":2966,"line_end":2966,"column_start":5,"column_end":20},"name":"SplitMutNoAlias","qualname":"::slice::iter::SplitMutNoAlias","value":"SplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6737}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588681,"byte_end":588753,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588756,"byte_end":588774,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588777,"byte_end":588780,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588783,"byte_end":588853,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588856,"byte_end":588927,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588930,"byte_end":588995,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588998,"byte_end":589069,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589072,"byte_end":589143,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589146,"byte_end":589149,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589152,"byte_end":589223,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589226,"byte_end":589298,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589301,"byte_end":589371,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589374,"byte_end":589442,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589445,"byte_end":589455,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589458,"byte_end":589461,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589464,"byte_end":589511,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589514,"byte_end":589557,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6791},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":594396,"byte_end":594412,"line_start":2970,"line_end":2970,"column_start":5,"column_end":21},"name":"RSplitMutNoAlias","qualname":"::slice::iter::RSplitMutNoAlias","value":"RSplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6796}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588681,"byte_end":588753,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588756,"byte_end":588774,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588777,"byte_end":588780,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588783,"byte_end":588853,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588856,"byte_end":588927,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588930,"byte_end":588995,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588998,"byte_end":589069,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589072,"byte_end":589143,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589146,"byte_end":589149,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589152,"byte_end":589223,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589226,"byte_end":589298,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589301,"byte_end":589371,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589374,"byte_end":589442,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589445,"byte_end":589455,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589458,"byte_end":589461,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589464,"byte_end":589511,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589514,"byte_end":589557,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6850},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":594519,"byte_end":594535,"line_start":2974,"line_end":2974,"column_start":5,"column_end":21},"name":"SplitNMutNoAlias","qualname":"::slice::iter::SplitNMutNoAlias","value":"SplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6855}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588681,"byte_end":588753,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588756,"byte_end":588774,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588777,"byte_end":588780,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588783,"byte_end":588853,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588856,"byte_end":588927,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588930,"byte_end":588995,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588998,"byte_end":589069,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589072,"byte_end":589143,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589146,"byte_end":589149,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589152,"byte_end":589223,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589226,"byte_end":589298,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589301,"byte_end":589371,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589374,"byte_end":589442,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589445,"byte_end":589455,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589458,"byte_end":589461,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589464,"byte_end":589511,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589514,"byte_end":589557,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6909},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":594643,"byte_end":594660,"line_start":2978,"line_end":2978,"column_start":5,"column_end":22},"name":"RSplitNMutNoAlias","qualname":"::slice::iter::RSplitNMutNoAlias","value":"RSplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6914}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588681,"byte_end":588753,"line_start":2774,"line_end":2774,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588756,"byte_end":588774,"line_start":2775,"line_end":2775,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588777,"byte_end":588780,"line_start":2776,"line_end":2776,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588783,"byte_end":588853,"line_start":2777,"line_end":2777,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588856,"byte_end":588927,"line_start":2778,"line_end":2778,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588930,"byte_end":588995,"line_start":2779,"line_end":2779,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":588998,"byte_end":589069,"line_start":2780,"line_end":2780,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589072,"byte_end":589143,"line_start":2781,"line_end":2781,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589146,"byte_end":589149,"line_start":2782,"line_end":2782,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589152,"byte_end":589223,"line_start":2783,"line_end":2783,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589226,"byte_end":589298,"line_start":2784,"line_end":2784,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589301,"byte_end":589371,"line_start":2785,"line_end":2785,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589374,"byte_end":589442,"line_start":2786,"line_end":2786,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589445,"byte_end":589455,"line_start":2787,"line_end":2787,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589458,"byte_end":589461,"line_start":2788,"line_end":2788,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589464,"byte_end":589511,"line_start":2789,"line_end":2789,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":589514,"byte_end":589557,"line_start":2790,"line_end":2790,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3372},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377343,"byte_end":377351,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"name":"BitSlice","qualname":"::slice::BitSlice","value":"BitSlice {  }","parent":null,"children":[{"krate":0,"index":3375},{"krate":0,"index":3376},{"krate":0,"index":3377}],"decl_id":null,"docs":" A slice of individual bits, anywhere in memory.","sig":null,"attributes":[{"value":"* A slice of individual bits, anywhere in memory.\n\n`BitSlice<O, T>` is an unsized region type; you interact with it through\n`&BitSlice<O, T>` and `&mut BitSlice<O, T>` references, which work exactly like\nall other Rust references. As with the standard slice’s relationship to arrays\nand vectors, this is [`bitvec`]’s primary working type, but you will probably\nhold it through one of the provided [`BitArray`], [`BitBox`], or [`BitVec`]\ncontainers.\n\n`BitSlice` is conceptually a `[bool]` slice, and provides a nearly complete\nmirror of `[bool]`’s API.\n\nEvery bit-vector crate can give you an opaque type that hides shift/mask\ncalculations from you. `BitSlice` does far more than this: it offers you the\nfull Rust guarantees about reference behavior, including lifetime tracking,\nmutability and aliasing awareness, and explicit memory control, *as well as* the\nfull set of tools and APIs available to the standard `[bool]` slice type.\n`BitSlice` can arbitrarily split and subslice, just like `[bool]`. You can write\na linear consuming function and keep the patterns you already know.\n\nFor example, to trim all the bits off either edge that match a condition, you\ncould write\n\n```rust\nuse bitvec::prelude::*;\n\nfn trim<O: BitOrder, T: BitStore>(\n  bits: &BitSlice<O, T>,\n  to_trim: bool,\n) -> &BitSlice<O, T> {\n  let stop = |b: &bool| *b != to_trim;\n  let front = bits.iter().by_ref().position(stop).unwrap_or(0);\n  let back = bits.iter().by_ref().rposition(stop).map_or(0, |p| p + 1);\n  &bits[front .. back]\n}\n# assert_eq!(trim(bits![0, 0, 1, 1, 0, 1, 0], false), bits![1, 1, 0, 1]);\n```\n\nto get behavior something like\n`trim(&BitSlice[0, 0, 1, 1, 0, 1, 0], false) == &BitSlice[1, 1, 0, 1]`.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html)\n\n# API Differences\n\nThe slice type `[bool]` has no type parameters. `BitSlice<O, T>` has two: one\nfor the memory type used as backing storage, and one for the order of bits\nwithin that memory type.\n\n`&BitSlice<O, T>` is capable of producing `&bool` references to read bits out\nof its memory, but is not capable of producing `&mut bool` references to write\nbits *into* its memory. Any `[bool]` API that would produce a `&mut bool` will\ninstead produce a [`BitRef<Mut, O, T>`] proxy reference.\n\n# Behavior\n\n`BitSlice` is a wrapper over `[T]`. It describes a region of memory, and must be\nhandled indirectly. This is most commonly through the reference types\n`&BitSlice` and `&mut BitSlice`, which borrow memory owned by some other value\nin the program. These buffers can be directly owned by the sibling types\n[`BitBox`], which behaves like [`Box<[T]>`](alloc::boxed::Box), and [`BitVec`],\nwhich behaves like [`Vec<T>`]. It cannot be used as the type parameter to a\nstandard-library-provided handle type.\n\nThe `BitSlice` region provides access to each individual bit in the region, as\nif each bit had a memory address that you could use to dereference it. It packs\neach logical bit into exactly one bit of storage memory, just like\n[`std::bitset`] and [`std::vector<bool>`] in C++.\n\n# Type Parameters\n\n`BitSlice` has two type parameters which propagate through nearly every public\nAPI in the crate. These are very important to its operation, and your choice\nof type arguments informs nearly every part of this library’s behavior.\n\n## `T: BitStore`\n\n[`BitStore`] is the simpler of the two parameters. It refers to the integer type\nused to hold bits. It must be one of the Rust unsigned integer fundamentals:\n`u8`, `u16`, `u32`, `usize`, and on 64-bit systems only, `u64`. In addition, it\ncan also be an alias-safed wrapper over them (see the [`access`] module) in\norder to permit bit-slices to share underlying memory without interfering with\neach other.\n\n`BitSlice` references can only be constructed over the integers, not over their\naliasing wrappers. `BitSlice` will only use aliasing types in its `T` slots when\nyou invoke APIs that produce them, such as [`.split_at_mut()`].\n\nThe default type argument is `usize`.\n\nThe argument you choose is used as the basis of a `[T]` slice, over which the\n`BitSlice` view type is placed. `BitSlice<_, T>` is subject to all of the rules\nabout alignment that `[T]` is. If you are working with in-memory representation\nformats, chances are that you already have a `T` type with which you’ve been\nworking, and should use it here.\n\nIf you are only using this crate to discard the seven wasted bits per `bool`\nof a collection of `bool`s, and are not too concerned about the in-memory\nrepresentation, then you should use the default type argument of `usize`. This\nis because most processors work best when moving an entire `usize` between\nmemory and the processor itself, and using a smaller type may cause it to slow\ndown.\n\n## `O: BitOrder`\n\n[`BitOrder`] is the more complex parameter. It has a default argument which,\nlike `usize`, is the good-enough choice when you do not explicitly need to\ncontrol the representation of bits in memory.\n\nThis parameter determines how to index the bits within a single memory element\n`T`. Computers all agree that in a slice of elements `T`, the element with the\nlower index has a lower memory address than the element with the higher index.\nBut the individual bits within an element do not have addresses, and so there is\nno uniform standard of which bit is the zeroth, which is the first, which is the\npenultimate, and which is the last.\n\nTo make matters even more confusing, there are two predominant ideas of\nin-element ordering that often *correlate* with the in-element *byte* ordering\nof integer types, but are in fact wholly unrelated! [`bitvec`] provides these\ntwo main orders as types for you, and if you need a different one, it also\nprovides the tools you need to make your own.\n\n### Least Significant Bit Comes First\n\nThis ordering, named the [`Lsb0`] type, indexes bits within an element by\nplacing the `0` index at the least significant bit (numeric value `1`) and the\nfinal index at the most significant bit (numeric value [`T::MIN`][minval] for\nsigned integers on most machines).\n\nFor example, this is the ordering used by most C compilers to lay out bit-field\nstruct members on little-endian **byte**-ordered machines.\n\n### Most Significant Bit Comes First\n\nThis ordering, named the [`Msb0`] type, indexes bits within an element by\nplacing the `0` index at the most significant bit (numeric value\n[`T::MIN`][minval] for most signed integers) and the final index at the least\nsignificant bit (numeric value `1`).\n\nFor example, this is the ordering used by the [TCP wire format], and by most C\ncompilers to lay out bit-field struct members on big-endian **byte**-ordered\nmachines.\n\n### Default Ordering\n\nThe default ordering is [`Lsb0`], as it typically produces shorter object code\nthan [`Msb0`] does. If you are implementing a collection, then `Lsb0` is likely\nthe more performant ordering; if you are implementing a buffer protocol, then\nyour choice of ordering is dictated by the protocol definition.\n\n# Safety\n\n`BitSlice` is designed to never introduce new memory unsafety that you did not\nprovide yourself, either before or during the use of this crate. Bugs do, and\nhave, occured, and you are encouraged to submit any discovered flaw as a defect\nreport.\n\nThe `&BitSlice` reference type uses a private encoding scheme to hold all the\ninformation needed in its stack value. This encoding is **not** part of the\npublic API of the library, and is not binary-compatible with `&[T]`.\nFurthermore, in order to satisfy Rust’s requirements about alias conditions,\n`BitSlice` performs type transformations on the `T` parameter to ensure that it\nnever creates the potential for undefined behavior.\n\nYou must never attempt to type-cast a reference to `BitSlice` in any way. You\nmust not use [`mem::transmute`] with `BitSlice` anywhere in its type arguments.\nYou must not use `as`-casting to convert between `*BitSlice` and any other type.\nYou must not attempt to modify the binary representation of a `&BitSlice`\nreference value. These actions will all lead to runtime memory unsafety, are\n(hopefully) likely to induce a program crash, and may possibly cause undefined\nbehavior at compile-time.\n\nEverything in the `BitSlice` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent parts in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nLike the standard library’s `[T]` slice, `BitSlice` is designed to be very easy\nto use safely, while supporting `unsafe` when necessary. Rust has a powerful\noptimizing engine, and `BitSlice` will frequently be compiled to have zero\nruntime cost. Where it is slower, it will not be significantly slower than a\nmanual replacement.\n\nAs the machine instructions operate on registers rather than bits, your choice\nof [`T: BitStore`] type parameter can influence your slice’s performance. Using\nlarger register types means that slices can gallop over completely-filled\ninterior elements faster, while narrower register types permit more graceful\nhandling of subslicing and aliased splits.\n\n# Construction\n\n`BitSlice` views of memory can be constructed over borrowed data in a number of\nways. As this is a reference-only type, it can only ever be built by borrowing\nan existing memory buffer and taking temporary control of your program’s view of\nthe region.\n\n## Macro Constructor\n\n`BitSlice` buffers can be constructed at compile-time through the [`bits!`]\nmacro. This macro accepts a superset of the [`vec!`] arguments, and creates an\nappropriate buffer in the local scope. The macro expands to a borrowed\n[`BitArray`] temporary; currently, it cannot be assigned to a `static` binding.\n\n```rust\nuse bitvec::prelude::*;\n\nlet immut = bits![Lsb0, u8; 0, 1, 0, 0, 1, 0, 0, 1];\nlet mutable: &mut BitSlice<_, _> = bits![mut Msb0, u8; 0; 8];\n\nassert_ne!(immut, mutable);\nmutable.clone_from_bitslice(immut);\nassert_eq!(immut, mutable);\n```\n\n## Borrowing Constructors\n\nThe functions [`from_element`], [`from_element_mut`], [`from_slice`], and\n[`from_slice_mut`] take references to existing memory, and construct\n`BitSlice` references over them. These are the most basic ways to borrow memory\nand view it as bits.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u16; 3];\nlet local_borrow = BitSlice::<Lsb0, _>::from_slice(&data);\n\nlet mut data = [0u8; 5];\nlet local_mut = BitSlice::<Lsb0, _>::from_slice_mut(&mut data);\n```\n\n## Trait Method Constructors\n\nThe [`BitView`] trait implements [`.view_bits::<O>()`] and\n[`.view_bits_mut::<O>()`] methods on elements, arrays not larger than 64\nelements, and slices. This trait, imported in the crate prelude, is *probably*\nthe easiest way for you to borrow memory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u32; 5];\nlet trait_view = data.view_bits::<Lsb0>();\n\nlet mut data = 0usize;\nlet trait_mut = data.view_bits_mut::<Msb0>();\n```\n\n## Owned Bit Slices\n\nIf you wish to take ownership of a memory region and enforce that it is always\nviewed as a `BitSlice` by default, you can use one of the [`BitArray`],\n[`BitBox`], or [`BitVec`] types, rather than pairing ordinary buffer types with\nthe borrowing constructors.\n\n```rust\nuse bitvec::prelude::*;\n\nlet slice = bits![0; 27];\nlet array = bitarr![LocalBits, u8; 0; 10];\n# #[cfg(feature = \"alloc\")] fn allocs() {\nlet boxed = bitbox![0; 10];\nlet vec = bitvec![0; 20];\n# } #[cfg(feature = \"alloc\")] allocs();\n\n// arrays always round up\nassert_eq!(array.as_bitslice(), slice[.. 16]);\n# #[cfg(feature = \"alloc\")] fn allocs2() {\n# let slice = bits![0; 27];\n# let boxed = bitbox![0; 10];\n# let vec = bitvec![0; 20];\nassert_eq!(boxed.as_bitslice(), slice[.. 10]);\nassert_eq!(vec.as_bitslice(), slice[.. 20]);\n# } #[cfg(feature = \"alloc\")] allocs2();\n```\n\n[TCP wire format]: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure\n[minval]: https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.MIN\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitRef<Mut, O, T>`]: crate::ptr::BitRef\n[`BitOrder`]: crate::order::BitOrder\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`BitView`]: crate::view::BitView\n[`Cell<T>`]: core::cell::Cell\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n[`T: BitStore`]: crate::store::BitStore\n[`Vec<T>`]: alloc::vec::Vec\n\n[`access`]: crate::access\n[`bits!`]: macro@crate::bits\n[`bitvec`]: crate\n[`bitvec::prelude::LocalBits`]: crate::order::LocalBits\n[`from_element`]: Self::from_element\n[`from_element_mut`]: Self::from_element_mut\n[`from_slice`]: Self::from_slice\n[`from_slice_mut`]: Self::from_slice_mut\n[`mem::transmute`]: core::mem::transmute\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n[`vec!`]: macro@alloc::vec\n\n[`.split_at_mut()`]: Self::split_at_mut\n[`.view_bits::<O>()`]: crate::view::BitView::view_bits\n[`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":363831,"byte_end":377310,"line_start":134,"line_end":456,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":377311,"byte_end":377331,"line_start":457,"line_end":457,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":3381},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379581,"byte_end":379593,"line_start":524,"line_end":524,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitSlice<O, T>>::from_element","value":"pub fn from_element(&T) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378788,"byte_end":378856,"line_start":496,"line_end":496,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378858,"byte_end":378861,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378863,"byte_end":378935,"line_start":498,"line_end":498,"column_start":2,"column_end":74}},{"value":"/ provides a method [`.view_bits::<O>()`] which delegates to this function","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378937,"byte_end":379013,"line_start":499,"line_end":499,"column_start":2,"column_end":78}},{"value":"/ and may be more convenient for you to write.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379015,"byte_end":379063,"line_start":500,"line_end":500,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379065,"byte_end":379068,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379070,"byte_end":379086,"line_start":502,"line_end":502,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379088,"byte_end":379091,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A shared reference to a memory element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379093,"byte_end":379146,"line_start":504,"line_end":504,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379148,"byte_end":379151,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379153,"byte_end":379166,"line_start":506,"line_end":506,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379168,"byte_end":379171,"line_start":507,"line_end":507,"column_start":2,"column_end":5}},{"value":"/ A shared `&BitSlice` over the `elem` element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379173,"byte_end":379222,"line_start":508,"line_end":508,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379224,"byte_end":379227,"line_start":509,"line_end":509,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379229,"byte_end":379243,"line_start":510,"line_end":510,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379245,"byte_end":379248,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379250,"byte_end":379261,"line_start":512,"line_end":512,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379263,"byte_end":379290,"line_start":513,"line_end":513,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379292,"byte_end":379295,"line_start":514,"line_end":514,"column_start":2,"column_end":5}},{"value":"/ let elem = 0u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379297,"byte_end":379316,"line_start":515,"line_end":515,"column_start":2,"column_end":21}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_element(&elem);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379318,"byte_end":379374,"line_start":516,"line_end":516,"column_start":2,"column_end":58}},{"value":"/ assert_eq!(bits.len(), 8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379376,"byte_end":379406,"line_start":517,"line_end":517,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379408,"byte_end":379415,"line_start":518,"line_end":518,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379417,"byte_end":379420,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379422,"byte_end":379462,"line_start":520,"line_end":520,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379464,"byte_end":379501,"line_start":521,"line_end":521,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379503,"byte_end":379561,"line_start":522,"line_end":522,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379563,"byte_end":379572,"line_start":523,"line_end":523,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3382},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380740,"byte_end":380756,"line_start":562,"line_end":562,"column_start":9,"column_end":25},"name":"from_element_mut","qualname":"<BitSlice<O, T>>::from_element_mut","value":"pub fn from_element_mut(&mut T) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over an element.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over an element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379716,"byte_end":379786,"line_start":529,"line_end":529,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379788,"byte_end":379791,"line_start":530,"line_end":530,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379793,"byte_end":379865,"line_start":531,"line_end":531,"column_start":2,"column_end":74}},{"value":"/ provides a method [`.view_bits_mut::<O>()`] which delegates to this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379867,"byte_end":379938,"line_start":532,"line_end":532,"column_start":2,"column_end":73}},{"value":"/ function and may be more convenient for you to write.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379940,"byte_end":379997,"line_start":533,"line_end":533,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":379999,"byte_end":380002,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380004,"byte_end":380020,"line_start":535,"line_end":535,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380022,"byte_end":380025,"line_start":536,"line_end":536,"column_start":2,"column_end":5}},{"value":"/ - `elem`: An exclusive reference to a memory element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380027,"byte_end":380084,"line_start":537,"line_end":537,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380086,"byte_end":380089,"line_start":538,"line_end":538,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380091,"byte_end":380104,"line_start":539,"line_end":539,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380106,"byte_end":380109,"line_start":540,"line_end":540,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `elem` element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380111,"byte_end":380168,"line_start":541,"line_end":541,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380170,"byte_end":380173,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ Note that the original `elem` reference will be inaccessible for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380175,"byte_end":380247,"line_start":543,"line_end":543,"column_start":2,"column_end":74}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380249,"byte_end":380304,"line_start":544,"line_end":544,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380306,"byte_end":380309,"line_start":545,"line_end":545,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380311,"byte_end":380325,"line_start":546,"line_end":546,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380327,"byte_end":380330,"line_start":547,"line_end":547,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380332,"byte_end":380343,"line_start":548,"line_end":548,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380345,"byte_end":380372,"line_start":549,"line_end":549,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380374,"byte_end":380377,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ let mut elem = 0u16;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380379,"byte_end":380403,"line_start":551,"line_end":551,"column_start":2,"column_end":26}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element_mut(&mut elem);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380405,"byte_end":380469,"line_start":552,"line_end":552,"column_start":2,"column_end":66}},{"value":"/ bits.set(15, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380471,"byte_end":380494,"line_start":553,"line_end":553,"column_start":2,"column_end":25}},{"value":"/ assert!(bits.get(15).unwrap());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380496,"byte_end":380531,"line_start":554,"line_end":554,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(elem, 1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380533,"byte_end":380557,"line_start":555,"line_end":555,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380559,"byte_end":380566,"line_start":556,"line_end":556,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380568,"byte_end":380571,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380573,"byte_end":380613,"line_start":558,"line_end":558,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380615,"byte_end":380652,"line_start":559,"line_end":559,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380654,"byte_end":380720,"line_start":560,"line_end":560,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380722,"byte_end":380731,"line_start":561,"line_end":561,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3383},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382187,"byte_end":382197,"line_start":606,"line_end":606,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitSlice<O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Result<&Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380887,"byte_end":380946,"line_start":567,"line_end":567,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380948,"byte_end":380951,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":380953,"byte_end":381023,"line_start":569,"line_end":569,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] which delegates to this function and may be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381025,"byte_end":381101,"line_start":570,"line_end":570,"column_start":2,"column_end":78}},{"value":"/ more convenient for you to write.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381103,"byte_end":381140,"line_start":571,"line_end":571,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381142,"byte_end":381145,"line_start":572,"line_end":572,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381147,"byte_end":381163,"line_start":573,"line_end":573,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381165,"byte_end":381168,"line_start":574,"line_end":574,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A shared reference over a sequence of memory elements.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381170,"byte_end":381239,"line_start":575,"line_end":575,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381241,"byte_end":381244,"line_start":576,"line_end":576,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381246,"byte_end":381259,"line_start":577,"line_end":577,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381261,"byte_end":381264,"line_start":578,"line_end":578,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view of the provided slice. The error condition is only","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381266,"byte_end":381339,"line_start":579,"line_end":579,"column_start":2,"column_end":75}},{"value":"/ encountered if the source slice is too long to be encoded in a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381341,"byte_end":381407,"line_start":580,"line_end":580,"column_start":2,"column_end":68}},{"value":"/ `&BitSlice` handle, but such a slice is likely impossible to produce","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381409,"byte_end":381481,"line_start":581,"line_end":581,"column_start":2,"column_end":74}},{"value":"/ without causing errors long before calling this function.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381483,"byte_end":381544,"line_start":582,"line_end":582,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381546,"byte_end":381549,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381551,"byte_end":381567,"line_start":584,"line_end":584,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381569,"byte_end":381572,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ The produced `&BitSlice` handle always begins at the zeroth bit of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381574,"byte_end":381648,"line_start":586,"line_end":586,"column_start":2,"column_end":76}},{"value":"/ zeroth element in `slice`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381650,"byte_end":381680,"line_start":587,"line_end":587,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381682,"byte_end":381685,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381687,"byte_end":381701,"line_start":589,"line_end":589,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381703,"byte_end":381706,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381708,"byte_end":381719,"line_start":591,"line_end":591,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381721,"byte_end":381748,"line_start":592,"line_end":592,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381750,"byte_end":381753,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381755,"byte_end":381781,"line_start":594,"line_end":594,"column_start":2,"column_end":28}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_slice(slice).unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381783,"byte_end":381846,"line_start":595,"line_end":595,"column_start":2,"column_end":65}},{"value":"/ assert!(bits[15]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381848,"byte_end":381870,"line_start":596,"line_end":596,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381872,"byte_end":381879,"line_start":597,"line_end":597,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381881,"byte_end":381884,"line_start":598,"line_end":598,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require a slice exceeding","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381886,"byte_end":381962,"line_start":599,"line_end":599,"column_start":2,"column_end":78}},{"value":"/ `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":381964,"byte_end":382029,"line_start":600,"line_end":600,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382031,"byte_end":382034,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382036,"byte_end":382073,"line_start":602,"line_end":602,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382075,"byte_end":382107,"line_start":603,"line_end":603,"column_start":2,"column_end":34}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382109,"byte_end":382167,"line_start":604,"line_end":604,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382169,"byte_end":382178,"line_start":605,"line_end":605,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3384},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384549,"byte_end":384563,"line_start":675,"line_end":675,"column_start":9,"column_end":23},"name":"from_slice_mut","qualname":"<BitSlice<O, T>>::from_slice_mut","value":"pub fn from_slice_mut(&mut [T]) -> Result<&mut Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over a slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382597,"byte_end":382664,"line_start":618,"line_end":618,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382666,"byte_end":382669,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382671,"byte_end":382741,"line_start":620,"line_end":620,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] which delegates to this function and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382743,"byte_end":382816,"line_start":621,"line_end":621,"column_start":2,"column_end":75}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382818,"byte_end":382862,"line_start":622,"line_end":622,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382864,"byte_end":382867,"line_start":623,"line_end":623,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382869,"byte_end":382885,"line_start":624,"line_end":624,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382887,"byte_end":382890,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An exclusive reference over a sequence of memory elements.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382892,"byte_end":382965,"line_start":626,"line_end":626,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382967,"byte_end":382970,"line_start":627,"line_end":627,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382972,"byte_end":382985,"line_start":628,"line_end":628,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382987,"byte_end":382990,"line_start":629,"line_end":629,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view of the provided slice. The error condition is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":382992,"byte_end":383064,"line_start":630,"line_end":630,"column_start":2,"column_end":74}},{"value":"/ only encountered if the source slice is too long to be encoded in a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383066,"byte_end":383137,"line_start":631,"line_end":631,"column_start":2,"column_end":73}},{"value":"/ `&mut BitSlice` handle, but such a slice is likely impossible to produce","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383139,"byte_end":383215,"line_start":632,"line_end":632,"column_start":2,"column_end":78}},{"value":"/ without causing errors long before calling this function.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383217,"byte_end":383278,"line_start":633,"line_end":633,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383280,"byte_end":383283,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ Note that the original `slice` reference will be inaccessible for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383285,"byte_end":383358,"line_start":635,"line_end":635,"column_start":2,"column_end":75}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383360,"byte_end":383415,"line_start":636,"line_end":636,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383417,"byte_end":383420,"line_start":637,"line_end":637,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383422,"byte_end":383438,"line_start":638,"line_end":638,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383440,"byte_end":383443,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ The produced `&mut BitSlice` handle always begins at the zeroth bit of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383445,"byte_end":383519,"line_start":640,"line_end":640,"column_start":2,"column_end":76}},{"value":"/ the zeroth element in `slice`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383521,"byte_end":383555,"line_start":641,"line_end":641,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383557,"byte_end":383560,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383562,"byte_end":383576,"line_start":643,"line_end":643,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383578,"byte_end":383581,"line_start":644,"line_end":644,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383583,"byte_end":383594,"line_start":645,"line_end":645,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383596,"byte_end":383623,"line_start":646,"line_end":646,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383625,"byte_end":383628,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ let mut slice = [0u8; 2];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383630,"byte_end":383659,"line_start":648,"line_end":648,"column_start":2,"column_end":31}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut slice).unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383661,"byte_end":383733,"line_start":649,"line_end":649,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383735,"byte_end":383738,"line_start":650,"line_end":650,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383740,"byte_end":383762,"line_start":651,"line_end":651,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383764,"byte_end":383786,"line_start":652,"line_end":652,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383788,"byte_end":383809,"line_start":653,"line_end":653,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(slice[0], 1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383811,"byte_end":383839,"line_start":654,"line_end":654,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383841,"byte_end":383848,"line_start":655,"line_end":655,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383850,"byte_end":383853,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ This example attempts to construct a `&mut BitSlice` handle from a slice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383855,"byte_end":383931,"line_start":657,"line_end":657,"column_start":2,"column_end":78}},{"value":"/ that is too large to index. Either the `vec!` allocation will fail, or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":383933,"byte_end":384007,"line_start":658,"line_end":658,"column_start":2,"column_end":76}},{"value":"/ the bit-slice constructor will fail.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384009,"byte_end":384049,"line_start":659,"line_end":659,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384051,"byte_end":384054,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384056,"byte_end":384080,"line_start":661,"line_end":661,"column_start":2,"column_end":26}},{"value":"/ # #[cfg(feature = \"alloc\")] {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384082,"byte_end":384115,"line_start":662,"line_end":662,"column_start":2,"column_end":35}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384117,"byte_end":384144,"line_start":663,"line_end":663,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384146,"byte_end":384149,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ let mut data = vec![0usize; BitSlice::<Lsb0, usize>::MAX_ELTS];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384151,"byte_end":384218,"line_start":665,"line_end":665,"column_start":2,"column_end":69}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut data[..]).unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384220,"byte_end":384295,"line_start":666,"line_end":666,"column_start":2,"column_end":77}},{"value":"/ # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384297,"byte_end":384304,"line_start":667,"line_end":667,"column_start":2,"column_end":9}},{"value":"/ # #[cfg(not(feature = \"alloc\"))] panic!(\"No allocator present\");","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384306,"byte_end":384374,"line_start":668,"line_end":668,"column_start":2,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384376,"byte_end":384383,"line_start":669,"line_end":669,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384385,"byte_end":384388,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384390,"byte_end":384427,"line_start":671,"line_end":671,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384429,"byte_end":384461,"line_start":672,"line_end":672,"column_start":2,"column_end":34}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384463,"byte_end":384529,"line_start":673,"line_end":673,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384531,"byte_end":384540,"line_start":674,"line_end":674,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3385},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385352,"byte_end":385372,"line_start":701,"line_end":701,"column_start":16,"column_end":36},"name":"from_slice_unchecked","qualname":"<BitSlice<O, T>>::from_slice_unchecked","value":"pub unsafe fn from_slice_unchecked(&[T]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384839,"byte_end":384914,"line_start":687,"line_end":687,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384916,"byte_end":384953,"line_start":688,"line_end":688,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384955,"byte_end":384958,"line_start":689,"line_end":689,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384960,"byte_end":384972,"line_start":690,"line_end":690,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384974,"byte_end":384977,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is longer than [`MAX_ELTS`], then the returned","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":384979,"byte_end":385051,"line_start":692,"line_end":692,"column_start":2,"column_end":74}},{"value":"/ `BitSlice` will have its length severely truncated. This is not a safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385053,"byte_end":385129,"line_start":693,"line_end":693,"column_start":2,"column_end":78}},{"value":"/ violation, but it is behavior that callers must avoid to remain correct.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385131,"byte_end":385207,"line_start":694,"line_end":694,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385209,"byte_end":385212,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ Prefer [`::from_slice()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385214,"byte_end":385244,"line_start":696,"line_end":696,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385246,"byte_end":385249,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385251,"byte_end":385283,"line_start":698,"line_end":698,"column_start":2,"column_end":34}},{"value":"/ [`::from_slice()`]: Self::from_slice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385285,"byte_end":385325,"line_start":699,"line_end":699,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385327,"byte_end":385336,"line_start":700,"line_end":700,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3386},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386064,"byte_end":386088,"line_start":722,"line_end":722,"column_start":16,"column_end":40},"name":"from_slice_unchecked_mut","qualname":"<BitSlice<O, T>>::from_slice_unchecked_mut","value":"pub unsafe fn from_slice_unchecked_mut(&mut [T]) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385539,"byte_end":385614,"line_start":708,"line_end":708,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385616,"byte_end":385653,"line_start":709,"line_end":709,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385655,"byte_end":385658,"line_start":710,"line_end":710,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385660,"byte_end":385672,"line_start":711,"line_end":711,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385674,"byte_end":385677,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is longer than [`MAX_ELTS`], then the returned","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385679,"byte_end":385751,"line_start":713,"line_end":713,"column_start":2,"column_end":74}},{"value":"/ `BitSlice` will have its length severely truncated. This is not a safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385753,"byte_end":385829,"line_start":714,"line_end":714,"column_start":2,"column_end":78}},{"value":"/ violation, but it is behavior that callers must avoid to remain correct.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385831,"byte_end":385907,"line_start":715,"line_end":715,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385909,"byte_end":385912,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ Prefer [`::from_slice_mut()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385914,"byte_end":385948,"line_start":717,"line_end":717,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385950,"byte_end":385953,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385955,"byte_end":385987,"line_start":719,"line_end":719,"column_start":2,"column_end":34}},{"value":"/ [`::from_slice_mut()`]: Self::from_slice_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":385989,"byte_end":386037,"line_start":720,"line_end":720,"column_start":2,"column_end":50}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386039,"byte_end":386048,"line_start":721,"line_end":721,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3387},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386552,"byte_end":386557,"line_start":742,"line_end":742,"column_start":9,"column_end":14},"name":"empty","qualname":"<BitSlice<O, T>>::empty","value":"pub fn empty<'a>() -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty slice reference.","sig":null,"attributes":[{"value":"/ Produces the empty slice reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386267,"byte_end":386306,"line_start":729,"line_end":729,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386308,"byte_end":386311,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&[]` for ordinary slices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386313,"byte_end":386365,"line_start":731,"line_end":731,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386367,"byte_end":386370,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386372,"byte_end":386386,"line_start":733,"line_end":733,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386388,"byte_end":386391,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386393,"byte_end":386404,"line_start":735,"line_end":735,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386406,"byte_end":386433,"line_start":736,"line_end":736,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386435,"byte_end":386438,"line_start":737,"line_end":737,"column_start":2,"column_end":5}},{"value":"/ let bits: &BitSlice = BitSlice::empty();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386440,"byte_end":386484,"line_start":738,"line_end":738,"column_start":2,"column_end":46}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386486,"byte_end":386515,"line_start":739,"line_end":739,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386517,"byte_end":386524,"line_start":740,"line_end":740,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386526,"byte_end":386543,"line_start":741,"line_end":741,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3389},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386938,"byte_end":386947,"line_start":759,"line_end":759,"column_start":9,"column_end":18},"name":"empty_mut","qualname":"<BitSlice<O, T>>::empty_mut","value":"pub fn empty_mut<'a>() -> &'a mut Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty mutable slice reference.","sig":null,"attributes":[{"value":"/ Produces the empty mutable slice reference.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386633,"byte_end":386680,"line_start":746,"line_end":746,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386682,"byte_end":386685,"line_start":747,"line_end":747,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&mut []` for ordinary slices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386687,"byte_end":386743,"line_start":748,"line_end":748,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386745,"byte_end":386748,"line_start":749,"line_end":749,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386750,"byte_end":386764,"line_start":750,"line_end":750,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386766,"byte_end":386769,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386771,"byte_end":386782,"line_start":752,"line_end":752,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386784,"byte_end":386811,"line_start":753,"line_end":753,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386813,"byte_end":386816,"line_start":754,"line_end":754,"column_start":2,"column_end":5}},{"value":"/ let bits: &mut BitSlice = BitSlice::empty_mut();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386818,"byte_end":386870,"line_start":755,"line_end":755,"column_start":2,"column_end":54}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386872,"byte_end":386901,"line_start":756,"line_end":756,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386903,"byte_end":386910,"line_start":757,"line_end":757,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":386912,"byte_end":386929,"line_start":758,"line_end":758,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3391},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387922,"byte_end":387925,"line_start":803,"line_end":803,"column_start":9,"column_end":12},"name":"set","qualname":"<BitSlice<O, T>>::set","value":"pub fn set(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387012,"byte_end":387050,"line_start":763,"line_end":763,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387052,"byte_end":387055,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387057,"byte_end":387073,"line_start":765,"line_end":765,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387075,"byte_end":387078,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387080,"byte_end":387097,"line_start":767,"line_end":767,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387099,"byte_end":387173,"line_start":768,"line_end":768,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387175,"byte_end":387196,"line_start":769,"line_end":769,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387198,"byte_end":387272,"line_start":770,"line_end":770,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387274,"byte_end":387277,"line_start":771,"line_end":771,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387279,"byte_end":387292,"line_start":772,"line_end":772,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387294,"byte_end":387297,"line_start":773,"line_end":773,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387299,"byte_end":387374,"line_start":774,"line_end":774,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387376,"byte_end":387379,"line_start":775,"line_end":775,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387381,"byte_end":387393,"line_start":776,"line_end":776,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387395,"byte_end":387398,"line_start":777,"line_end":777,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is not less than [`self.len()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387400,"byte_end":387466,"line_start":778,"line_end":778,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387468,"byte_end":387471,"line_start":779,"line_end":779,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387473,"byte_end":387487,"line_start":780,"line_end":780,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387489,"byte_end":387492,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387494,"byte_end":387505,"line_start":782,"line_end":782,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387507,"byte_end":387534,"line_start":783,"line_end":783,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387536,"byte_end":387539,"line_start":784,"line_end":784,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387541,"byte_end":387569,"line_start":785,"line_end":785,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387571,"byte_end":387574,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387576,"byte_end":387598,"line_start":787,"line_end":787,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387600,"byte_end":387622,"line_start":788,"line_end":788,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387624,"byte_end":387645,"line_start":789,"line_end":789,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387647,"byte_end":387654,"line_start":790,"line_end":790,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387656,"byte_end":387659,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387661,"byte_end":387737,"line_start":792,"line_end":792,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387739,"byte_end":387742,"line_start":793,"line_end":793,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387744,"byte_end":387768,"line_start":794,"line_end":794,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387770,"byte_end":387797,"line_start":795,"line_end":795,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387799,"byte_end":387802,"line_start":796,"line_end":796,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387804,"byte_end":387832,"line_start":797,"line_end":797,"column_start":2,"column_end":30}},{"value":"/ bits.set(1, false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387834,"byte_end":387857,"line_start":798,"line_end":798,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387859,"byte_end":387866,"line_start":799,"line_end":799,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387868,"byte_end":387871,"line_start":800,"line_end":800,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387873,"byte_end":387902,"line_start":801,"line_end":801,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":387904,"byte_end":387913,"line_start":802,"line_end":802,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3392},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388595,"byte_end":388598,"line_start":840,"line_end":840,"column_start":9,"column_end":12},"name":"any","qualname":"<BitSlice<O, T>>::any","value":"pub fn any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is set (logical `∨`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is set (logical `∨`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388072,"byte_end":388131,"line_start":810,"line_end":810,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388133,"byte_end":388136,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388138,"byte_end":388155,"line_start":812,"line_end":812,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388157,"byte_end":388160,"line_start":813,"line_end":813,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388162,"byte_end":388173,"line_start":814,"line_end":814,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388175,"byte_end":388187,"line_start":815,"line_end":815,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388189,"byte_end":388201,"line_start":816,"line_end":816,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388203,"byte_end":388215,"line_start":817,"line_end":817,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388217,"byte_end":388229,"line_start":818,"line_end":818,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388231,"byte_end":388238,"line_start":819,"line_end":819,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388240,"byte_end":388243,"line_start":820,"line_end":820,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388245,"byte_end":388261,"line_start":821,"line_end":821,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388263,"byte_end":388266,"line_start":822,"line_end":822,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388268,"byte_end":388281,"line_start":823,"line_end":823,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388283,"byte_end":388286,"line_start":824,"line_end":824,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388288,"byte_end":388301,"line_start":825,"line_end":825,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388303,"byte_end":388306,"line_start":826,"line_end":826,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is set. The empty slice returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388308,"byte_end":388379,"line_start":827,"line_end":827,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388381,"byte_end":388393,"line_start":828,"line_end":828,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388395,"byte_end":388398,"line_start":829,"line_end":829,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388400,"byte_end":388414,"line_start":830,"line_end":830,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388416,"byte_end":388419,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388421,"byte_end":388432,"line_start":832,"line_end":832,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388434,"byte_end":388461,"line_start":833,"line_end":833,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388463,"byte_end":388466,"line_start":834,"line_end":834,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388468,"byte_end":388501,"line_start":835,"line_end":835,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].any());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388503,"byte_end":388533,"line_start":836,"line_end":836,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].any());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388535,"byte_end":388566,"line_start":837,"line_end":837,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388568,"byte_end":388575,"line_start":838,"line_end":838,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":388577,"byte_end":388586,"line_start":839,"line_end":839,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3396},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389623,"byte_end":389626,"line_start":886,"line_end":886,"column_start":9,"column_end":12},"name":"all","qualname":"<BitSlice<O, T>>::all","value":"pub fn all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice domain are set (logical `∧`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice domain are set (logical `∧`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389090,"byte_end":389158,"line_start":856,"line_end":856,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389160,"byte_end":389163,"line_start":857,"line_end":857,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389165,"byte_end":389182,"line_start":858,"line_end":858,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389184,"byte_end":389187,"line_start":859,"line_end":859,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389189,"byte_end":389200,"line_start":860,"line_end":860,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389202,"byte_end":389214,"line_start":861,"line_end":861,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389216,"byte_end":389228,"line_start":862,"line_end":862,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389230,"byte_end":389242,"line_start":863,"line_end":863,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389244,"byte_end":389256,"line_start":864,"line_end":864,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389258,"byte_end":389265,"line_start":865,"line_end":865,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389267,"byte_end":389270,"line_start":866,"line_end":866,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389272,"byte_end":389288,"line_start":867,"line_end":867,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389290,"byte_end":389293,"line_start":868,"line_end":868,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389295,"byte_end":389308,"line_start":869,"line_end":869,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389310,"byte_end":389313,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389315,"byte_end":389328,"line_start":871,"line_end":871,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389330,"byte_end":389333,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are set. The empty slice returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389335,"byte_end":389408,"line_start":873,"line_end":873,"column_start":2,"column_end":75}},{"value":"/ `true`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389410,"byte_end":389421,"line_start":874,"line_end":874,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389423,"byte_end":389426,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389428,"byte_end":389442,"line_start":876,"line_end":876,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389444,"byte_end":389447,"line_start":877,"line_end":877,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389449,"byte_end":389460,"line_start":878,"line_end":878,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389462,"byte_end":389489,"line_start":879,"line_end":879,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389491,"byte_end":389494,"line_start":880,"line_end":880,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389496,"byte_end":389529,"line_start":881,"line_end":881,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].all());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389531,"byte_end":389561,"line_start":882,"line_end":882,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].all());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389563,"byte_end":389594,"line_start":883,"line_end":883,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389596,"byte_end":389603,"line_start":884,"line_end":884,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":389605,"byte_end":389614,"line_start":885,"line_end":885,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3400},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391192,"byte_end":391199,"line_start":945,"line_end":945,"column_start":9,"column_end":16},"name":"not_any","qualname":"<BitSlice<O, T>>::not_any","value":"pub fn not_any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice are unset (logical `¬∨`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice are unset (logical `¬∨`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390681,"byte_end":390746,"line_start":916,"line_end":916,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390748,"byte_end":390751,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390753,"byte_end":390770,"line_start":918,"line_end":918,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390772,"byte_end":390775,"line_start":919,"line_end":919,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390777,"byte_end":390788,"line_start":920,"line_end":920,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390790,"byte_end":390802,"line_start":921,"line_end":921,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390804,"byte_end":390816,"line_start":922,"line_end":922,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390818,"byte_end":390830,"line_start":923,"line_end":923,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390832,"byte_end":390844,"line_start":924,"line_end":924,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390846,"byte_end":390853,"line_start":925,"line_end":925,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390855,"byte_end":390858,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390860,"byte_end":390876,"line_start":927,"line_end":927,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390878,"byte_end":390881,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390883,"byte_end":390896,"line_start":929,"line_end":929,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390898,"byte_end":390901,"line_start":930,"line_end":930,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390903,"byte_end":390916,"line_start":931,"line_end":931,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390918,"byte_end":390921,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are unset.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390923,"byte_end":390974,"line_start":933,"line_end":933,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390976,"byte_end":390979,"line_start":934,"line_end":934,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390981,"byte_end":390995,"line_start":935,"line_end":935,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":390997,"byte_end":391000,"line_start":936,"line_end":936,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391002,"byte_end":391013,"line_start":937,"line_end":937,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391015,"byte_end":391042,"line_start":938,"line_end":938,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391044,"byte_end":391047,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391049,"byte_end":391082,"line_start":940,"line_end":940,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_any());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391084,"byte_end":391119,"line_start":941,"line_end":941,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_any());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391121,"byte_end":391155,"line_start":942,"line_end":942,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391157,"byte_end":391164,"line_start":943,"line_end":943,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391166,"byte_end":391183,"line_start":944,"line_end":944,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3401},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391743,"byte_end":391750,"line_start":978,"line_end":978,"column_start":9,"column_end":16},"name":"not_all","qualname":"<BitSlice<O, T>>::not_all","value":"pub fn not_all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is unset (logical `¬∧`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is unset (logical `¬∧`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391236,"byte_end":391299,"line_start":949,"line_end":949,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391301,"byte_end":391304,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391306,"byte_end":391323,"line_start":951,"line_end":951,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391325,"byte_end":391328,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391330,"byte_end":391341,"line_start":953,"line_end":953,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391343,"byte_end":391355,"line_start":954,"line_end":954,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391357,"byte_end":391369,"line_start":955,"line_end":955,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391371,"byte_end":391383,"line_start":956,"line_end":956,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391385,"byte_end":391397,"line_start":957,"line_end":957,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391399,"byte_end":391406,"line_start":958,"line_end":958,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391408,"byte_end":391411,"line_start":959,"line_end":959,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391413,"byte_end":391429,"line_start":960,"line_end":960,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391431,"byte_end":391434,"line_start":961,"line_end":961,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391436,"byte_end":391449,"line_start":962,"line_end":962,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391451,"byte_end":391454,"line_start":963,"line_end":963,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391456,"byte_end":391469,"line_start":964,"line_end":964,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391471,"byte_end":391474,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is unset.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391476,"byte_end":391525,"line_start":966,"line_end":966,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391527,"byte_end":391530,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391532,"byte_end":391546,"line_start":968,"line_end":968,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391548,"byte_end":391551,"line_start":969,"line_end":969,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391553,"byte_end":391564,"line_start":970,"line_end":970,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391566,"byte_end":391593,"line_start":971,"line_end":971,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391595,"byte_end":391598,"line_start":972,"line_end":972,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391600,"byte_end":391633,"line_start":973,"line_end":973,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_all());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391635,"byte_end":391670,"line_start":974,"line_end":974,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_all());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391672,"byte_end":391706,"line_start":975,"line_end":975,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391708,"byte_end":391715,"line_start":976,"line_end":976,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391717,"byte_end":391734,"line_start":977,"line_end":977,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3402},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392577,"byte_end":392581,"line_start":1021,"line_end":1021,"column_start":9,"column_end":13},"name":"some","qualname":"<BitSlice<O, T>>::some","value":"pub fn some(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the slice has some, but not all, bits set and some, but\n not all, bits unset.","sig":null,"attributes":[{"value":"/ Tests whether the slice has some, but not all, bits set and some, but","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391787,"byte_end":391860,"line_start":982,"line_end":982,"column_start":2,"column_end":75}},{"value":"/ not all, bits unset.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391862,"byte_end":391886,"line_start":983,"line_end":983,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391888,"byte_end":391891,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ This is `false` if either [`.all()`] or [`.not_any()`] are `true`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391893,"byte_end":391963,"line_start":985,"line_end":985,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391965,"byte_end":391968,"line_start":986,"line_end":986,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391970,"byte_end":391987,"line_start":987,"line_end":987,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391989,"byte_end":391992,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":391994,"byte_end":392005,"line_start":989,"line_end":989,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392007,"byte_end":392019,"line_start":990,"line_end":990,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392021,"byte_end":392033,"line_start":991,"line_end":991,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392035,"byte_end":392047,"line_start":992,"line_end":992,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392049,"byte_end":392061,"line_start":993,"line_end":993,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392063,"byte_end":392070,"line_start":994,"line_end":994,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392072,"byte_end":392075,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392077,"byte_end":392093,"line_start":996,"line_end":996,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392095,"byte_end":392098,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392100,"byte_end":392113,"line_start":998,"line_end":998,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392115,"byte_end":392118,"line_start":999,"line_end":999,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392120,"byte_end":392133,"line_start":1000,"line_end":1000,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392135,"byte_end":392138,"line_start":1001,"line_end":1001,"column_start":2,"column_end":5}},{"value":"/ Whether the slice domain has mixed content. The empty slice returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392140,"byte_end":392211,"line_start":1002,"line_end":1002,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392213,"byte_end":392225,"line_start":1003,"line_end":1003,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392227,"byte_end":392230,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392232,"byte_end":392246,"line_start":1005,"line_end":1005,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392248,"byte_end":392251,"line_start":1006,"line_end":1006,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392253,"byte_end":392264,"line_start":1007,"line_end":1007,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392266,"byte_end":392293,"line_start":1008,"line_end":1008,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392295,"byte_end":392298,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ let data = 0b111_000_10u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392300,"byte_end":392330,"line_start":1010,"line_end":1010,"column_start":2,"column_end":32}},{"value":"/ let bits = bits![1, 1, 0, 0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392332,"byte_end":392371,"line_start":1011,"line_end":1011,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392373,"byte_end":392376,"line_start":1012,"line_end":1012,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[.. 2].some());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392378,"byte_end":392410,"line_start":1013,"line_end":1013,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits[2 .. 4].some());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392412,"byte_end":392446,"line_start":1014,"line_end":1014,"column_start":2,"column_end":36}},{"value":"/ assert!(bits.some());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392448,"byte_end":392473,"line_start":1015,"line_end":1015,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392475,"byte_end":392482,"line_start":1016,"line_end":1016,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392484,"byte_end":392487,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ [`.all()`]: Self::all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392489,"byte_end":392514,"line_start":1018,"line_end":1018,"column_start":2,"column_end":27}},{"value":"/ [`.not_any()`]: Self::not_any","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392516,"byte_end":392549,"line_start":1019,"line_end":1019,"column_start":2,"column_end":35}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392551,"byte_end":392568,"line_start":1020,"line_end":1020,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3403},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393070,"byte_end":393080,"line_start":1046,"line_end":1046,"column_start":9,"column_end":19},"name":"count_ones","qualname":"<BitSlice<O, T>>::count_ones","value":"pub fn count_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits set to `1` in the slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits set to `1` in the slice contents.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392635,"byte_end":392698,"line_start":1025,"line_end":1025,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392700,"byte_end":392703,"line_start":1026,"line_end":1026,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392705,"byte_end":392721,"line_start":1027,"line_end":1027,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392723,"byte_end":392726,"line_start":1028,"line_end":1028,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392728,"byte_end":392741,"line_start":1029,"line_end":1029,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392743,"byte_end":392746,"line_start":1030,"line_end":1030,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392748,"byte_end":392761,"line_start":1031,"line_end":1031,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392763,"byte_end":392766,"line_start":1032,"line_end":1032,"column_start":2,"column_end":5}},{"value":"/ The number of bits in the slice domain that are set to `1`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392768,"byte_end":392831,"line_start":1033,"line_end":1033,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392833,"byte_end":392836,"line_start":1034,"line_end":1034,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392838,"byte_end":392852,"line_start":1035,"line_end":1035,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392854,"byte_end":392857,"line_start":1036,"line_end":1036,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392859,"byte_end":392875,"line_start":1037,"line_end":1037,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392877,"byte_end":392880,"line_start":1038,"line_end":1038,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392882,"byte_end":392893,"line_start":1039,"line_end":1039,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392895,"byte_end":392922,"line_start":1040,"line_end":1040,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392924,"byte_end":392927,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392929,"byte_end":392962,"line_start":1042,"line_end":1042,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_ones(), 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":392964,"byte_end":393007,"line_start":1043,"line_end":1043,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits[2 ..].count_ones(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393009,"byte_end":393052,"line_start":1044,"line_end":1044,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393054,"byte_end":393061,"line_start":1045,"line_end":1045,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3407},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394148,"byte_end":394159,"line_start":1091,"line_end":1091,"column_start":9,"column_end":20},"name":"count_zeros","qualname":"<BitSlice<O, T>>::count_zeros","value":"pub fn count_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits cleared to `0` in the slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits cleared to `0` in the slice contents.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393703,"byte_end":393770,"line_start":1070,"line_end":1070,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393772,"byte_end":393775,"line_start":1071,"line_end":1071,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393777,"byte_end":393793,"line_start":1072,"line_end":1072,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393795,"byte_end":393798,"line_start":1073,"line_end":1073,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393800,"byte_end":393813,"line_start":1074,"line_end":1074,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393815,"byte_end":393818,"line_start":1075,"line_end":1075,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393820,"byte_end":393833,"line_start":1076,"line_end":1076,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393835,"byte_end":393838,"line_start":1077,"line_end":1077,"column_start":2,"column_end":5}},{"value":"/ The number of bits in the slice domain that are cleared to `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393840,"byte_end":393907,"line_start":1078,"line_end":1078,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393909,"byte_end":393912,"line_start":1079,"line_end":1079,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393914,"byte_end":393928,"line_start":1080,"line_end":1080,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393930,"byte_end":393933,"line_start":1081,"line_end":1081,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393935,"byte_end":393951,"line_start":1082,"line_end":1082,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393953,"byte_end":393956,"line_start":1083,"line_end":1083,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393958,"byte_end":393969,"line_start":1084,"line_end":1084,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":393971,"byte_end":393998,"line_start":1085,"line_end":1085,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394000,"byte_end":394003,"line_start":1086,"line_end":1086,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394005,"byte_end":394038,"line_start":1087,"line_end":1087,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_zeros(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394040,"byte_end":394084,"line_start":1088,"line_end":1088,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits[2 ..].count_zeros(), 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394086,"byte_end":394130,"line_start":1089,"line_end":1089,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394132,"byte_end":394139,"line_start":1090,"line_end":1090,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3411},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395404,"byte_end":395413,"line_start":1138,"line_end":1138,"column_start":9,"column_end":18},"name":"iter_ones","qualname":"<BitSlice<O, T>>::iter_ones","value":"pub fn iter_ones(&Self) -> IterOnes<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates all bits in a `BitSlice` that are set to `1`.","sig":null,"attributes":[{"value":"/ Enumerates all bits in a `BitSlice` that are set to `1`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394789,"byte_end":394849,"line_start":1115,"line_end":1115,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394851,"byte_end":394854,"line_start":1116,"line_end":1116,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394856,"byte_end":394870,"line_start":1117,"line_end":1117,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394872,"byte_end":394875,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394877,"byte_end":394888,"line_start":1119,"line_end":1119,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394890,"byte_end":394917,"line_start":1120,"line_end":1120,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394919,"byte_end":394922,"line_start":1121,"line_end":1121,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1, 0, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394924,"byte_end":394972,"line_start":1122,"line_end":1122,"column_start":2,"column_end":50}},{"value":"/ let mut indices = [1, 4, 8].iter().copied();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":394974,"byte_end":395022,"line_start":1123,"line_end":1123,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395024,"byte_end":395027,"line_start":1124,"line_end":1124,"column_start":2,"column_end":5}},{"value":"/ let mut iter_ones = bits.iter_ones();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395029,"byte_end":395070,"line_start":1125,"line_end":1125,"column_start":2,"column_end":43}},{"value":"/ let mut compose = bits.iter()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395072,"byte_end":395105,"line_start":1126,"line_end":1126,"column_start":2,"column_end":35}},{"value":"/   .copied()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395107,"byte_end":395122,"line_start":1127,"line_end":1127,"column_start":2,"column_end":17}},{"value":"/   .enumerate()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395124,"byte_end":395142,"line_start":1128,"line_end":1128,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if bit { Some(idx) } else { None });","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395144,"byte_end":395211,"line_start":1129,"line_end":1129,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395213,"byte_end":395216,"line_start":1130,"line_end":1130,"column_start":2,"column_end":5}},{"value":"/ for ((a, b), c) in iter_ones.zip(compose).zip(indices) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395218,"byte_end":395278,"line_start":1131,"line_end":1131,"column_start":2,"column_end":62}},{"value":"/   assert_eq!(a, b);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395280,"byte_end":395303,"line_start":1132,"line_end":1132,"column_start":2,"column_end":25}},{"value":"/   assert_eq!(b, c);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395305,"byte_end":395328,"line_start":1133,"line_end":1133,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395330,"byte_end":395335,"line_start":1134,"line_end":1134,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395337,"byte_end":395344,"line_start":1135,"line_end":1135,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395346,"byte_end":395363,"line_start":1136,"line_end":1136,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395365,"byte_end":395395,"line_start":1137,"line_end":1137,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3412},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396091,"byte_end":396101,"line_start":1165,"line_end":1165,"column_start":9,"column_end":19},"name":"iter_zeros","qualname":"<BitSlice<O, T>>::iter_zeros","value":"pub fn iter_zeros(&Self) -> IterZeros<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates all bits in a `BitSlice` that are cleared to `0`.","sig":null,"attributes":[{"value":"/ Enumerates all bits in a `BitSlice` that are cleared to `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395468,"byte_end":395532,"line_start":1142,"line_end":1142,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395534,"byte_end":395537,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395539,"byte_end":395553,"line_start":1144,"line_end":1144,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395555,"byte_end":395558,"line_start":1145,"line_end":1145,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395560,"byte_end":395571,"line_start":1146,"line_end":1146,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395573,"byte_end":395600,"line_start":1147,"line_end":1147,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395602,"byte_end":395605,"line_start":1148,"line_end":1148,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 1, 1, 0, 1, 1, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395607,"byte_end":395655,"line_start":1149,"line_end":1149,"column_start":2,"column_end":50}},{"value":"/ let mut indices = [1, 4, 8].iter().copied();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395657,"byte_end":395705,"line_start":1150,"line_end":1150,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395707,"byte_end":395710,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ let mut iter_zeros = bits.iter_zeros();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395712,"byte_end":395755,"line_start":1152,"line_end":1152,"column_start":2,"column_end":45}},{"value":"/ let mut compose = bits.iter()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395757,"byte_end":395790,"line_start":1153,"line_end":1153,"column_start":2,"column_end":35}},{"value":"/   .copied()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395792,"byte_end":395807,"line_start":1154,"line_end":1154,"column_start":2,"column_end":17}},{"value":"/   .enumerate()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395809,"byte_end":395827,"line_start":1155,"line_end":1155,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if !bit { Some(idx) } else { None });","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395829,"byte_end":395897,"line_start":1156,"line_end":1156,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395899,"byte_end":395902,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ for ((a, b), c) in iter_zeros.zip(compose).zip(indices) {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395904,"byte_end":395965,"line_start":1158,"line_end":1158,"column_start":2,"column_end":63}},{"value":"/   assert_eq!(a, b);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395967,"byte_end":395990,"line_start":1159,"line_end":1159,"column_start":2,"column_end":25}},{"value":"/   assert_eq!(b, c);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":395992,"byte_end":396015,"line_start":1160,"line_end":1160,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396017,"byte_end":396022,"line_start":1161,"line_end":1161,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396024,"byte_end":396031,"line_start":1162,"line_end":1162,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396033,"byte_end":396050,"line_start":1163,"line_end":1163,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396052,"byte_end":396082,"line_start":1164,"line_end":1164,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3413},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396426,"byte_end":396435,"line_start":1180,"line_end":1180,"column_start":9,"column_end":18},"name":"first_one","qualname":"<BitSlice<O, T>>::first_one","value":"pub fn first_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the first bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Gets the index of the first bit in the bit-slice set to `1`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396158,"byte_end":396222,"line_start":1169,"line_end":1169,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396224,"byte_end":396227,"line_start":1170,"line_end":1170,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396229,"byte_end":396243,"line_start":1171,"line_end":1171,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396245,"byte_end":396248,"line_start":1172,"line_end":1172,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396250,"byte_end":396261,"line_start":1173,"line_end":1173,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396263,"byte_end":396290,"line_start":1174,"line_end":1174,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396292,"byte_end":396295,"line_start":1175,"line_end":1175,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_one().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396297,"byte_end":396340,"line_start":1176,"line_end":1176,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0, 0, 1].first_one().unwrap(), 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396342,"byte_end":396397,"line_start":1177,"line_end":1177,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396399,"byte_end":396406,"line_start":1178,"line_end":1178,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396408,"byte_end":396417,"line_start":1179,"line_end":1179,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3414},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396763,"byte_end":396773,"line_start":1195,"line_end":1195,"column_start":9,"column_end":19},"name":"first_zero","qualname":"<BitSlice<O, T>>::first_zero","value":"pub fn first_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the first bit in the bit-slice set to `0`.","sig":null,"attributes":[{"value":"/ Gets the index of the first bit in the bit-slice set to `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396493,"byte_end":396557,"line_start":1184,"line_end":1184,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396559,"byte_end":396562,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396564,"byte_end":396578,"line_start":1186,"line_end":1186,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396580,"byte_end":396583,"line_start":1187,"line_end":1187,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396585,"byte_end":396596,"line_start":1188,"line_end":1188,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396598,"byte_end":396625,"line_start":1189,"line_end":1189,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396627,"byte_end":396630,"line_start":1190,"line_end":1190,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_zero().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396632,"byte_end":396676,"line_start":1191,"line_end":1191,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1, 1, 0].first_zero().unwrap(), 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396678,"byte_end":396734,"line_start":1192,"line_end":1192,"column_start":2,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396736,"byte_end":396743,"line_start":1193,"line_end":1193,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396745,"byte_end":396754,"line_start":1194,"line_end":1194,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3415},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397100,"byte_end":397108,"line_start":1210,"line_end":1210,"column_start":9,"column_end":17},"name":"last_one","qualname":"<BitSlice<O, T>>::last_one","value":"pub fn last_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the last bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Gets the index of the last bit in the bit-slice set to `1`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396832,"byte_end":396895,"line_start":1199,"line_end":1199,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396897,"byte_end":396900,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396902,"byte_end":396916,"line_start":1201,"line_end":1201,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396918,"byte_end":396921,"line_start":1202,"line_end":1202,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396923,"byte_end":396934,"line_start":1203,"line_end":1203,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396936,"byte_end":396963,"line_start":1204,"line_end":1204,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396965,"byte_end":396968,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_one().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":396970,"byte_end":397012,"line_start":1206,"line_end":1206,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bits![1, 0, 0, 1].last_one().unwrap(), 3);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397014,"byte_end":397071,"line_start":1207,"line_end":1207,"column_start":2,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397073,"byte_end":397080,"line_start":1208,"line_end":1208,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397082,"byte_end":397091,"line_start":1209,"line_end":1209,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3416},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397441,"byte_end":397450,"line_start":1225,"line_end":1225,"column_start":9,"column_end":18},"name":"last_zero","qualname":"<BitSlice<O, T>>::last_zero","value":"pub fn last_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the last bit in the bit-slice set to `0`.","sig":null,"attributes":[{"value":"/ Gets the index of the last bit in the bit-slice set to `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397171,"byte_end":397234,"line_start":1214,"line_end":1214,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397236,"byte_end":397239,"line_start":1215,"line_end":1215,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397241,"byte_end":397255,"line_start":1216,"line_end":1216,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397257,"byte_end":397260,"line_start":1217,"line_end":1217,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397262,"byte_end":397273,"line_start":1218,"line_end":1218,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397275,"byte_end":397302,"line_start":1219,"line_end":1219,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397304,"byte_end":397307,"line_start":1220,"line_end":1220,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_zero().is_none());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397309,"byte_end":397352,"line_start":1221,"line_end":1221,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0, 1, 1, 0].last_zero().unwrap(), 3);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397354,"byte_end":397412,"line_start":1222,"line_end":1222,"column_start":2,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397414,"byte_end":397421,"line_start":1223,"line_end":1223,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397423,"byte_end":397432,"line_start":1224,"line_end":1224,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3417},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397908,"byte_end":397920,"line_start":1244,"line_end":1244,"column_start":9,"column_end":21},"name":"leading_ones","qualname":"<BitSlice<O, T>>::leading_ones","value":"pub fn leading_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397514,"byte_end":397588,"line_start":1229,"line_end":1229,"column_start":2,"column_end":76}},{"value":"/ bit set to `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397590,"byte_end":397609,"line_start":1230,"line_end":1230,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397611,"byte_end":397614,"line_start":1231,"line_end":1231,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397616,"byte_end":397663,"line_start":1232,"line_end":1232,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397665,"byte_end":397668,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397670,"byte_end":397684,"line_start":1234,"line_end":1234,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397686,"byte_end":397689,"line_start":1235,"line_end":1235,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397691,"byte_end":397702,"line_start":1236,"line_end":1236,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397704,"byte_end":397731,"line_start":1237,"line_end":1237,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397733,"byte_end":397736,"line_start":1238,"line_end":1238,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_ones(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397738,"byte_end":397780,"line_start":1239,"line_end":1239,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bits![0].leading_ones(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397782,"byte_end":397825,"line_start":1240,"line_end":1240,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1, 0, 1, 1].leading_ones(), 1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397827,"byte_end":397879,"line_start":1241,"line_end":1241,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397881,"byte_end":397888,"line_start":1242,"line_end":1242,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397890,"byte_end":397899,"line_start":1243,"line_end":1243,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3418},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398381,"byte_end":398394,"line_start":1263,"line_end":1263,"column_start":9,"column_end":22},"name":"leading_zeros","qualname":"<BitSlice<O, T>>::leading_zeros","value":"pub fn leading_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":397984,"byte_end":398058,"line_start":1248,"line_end":1248,"column_start":2,"column_end":76}},{"value":"/ bit set to `1`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398060,"byte_end":398079,"line_start":1249,"line_end":1249,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398081,"byte_end":398084,"line_start":1250,"line_end":1250,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398086,"byte_end":398133,"line_start":1251,"line_end":1251,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398135,"byte_end":398138,"line_start":1252,"line_end":1252,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398140,"byte_end":398154,"line_start":1253,"line_end":1253,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398156,"byte_end":398159,"line_start":1254,"line_end":1254,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398161,"byte_end":398172,"line_start":1255,"line_end":1255,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398174,"byte_end":398201,"line_start":1256,"line_end":1256,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398203,"byte_end":398206,"line_start":1257,"line_end":1257,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_zeros(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398208,"byte_end":398251,"line_start":1258,"line_end":1258,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1].leading_zeros(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398253,"byte_end":398297,"line_start":1259,"line_end":1259,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![0, 1, 0, 0].leading_zeros(), 1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398299,"byte_end":398352,"line_start":1260,"line_end":1260,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398354,"byte_end":398361,"line_start":1261,"line_end":1261,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398363,"byte_end":398372,"line_start":1262,"line_end":1262,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3419},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398851,"byte_end":398864,"line_start":1282,"line_end":1282,"column_start":9,"column_end":22},"name":"trailing_ones","qualname":"<BitSlice<O, T>>::trailing_ones","value":"pub fn trailing_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398457,"byte_end":398532,"line_start":1267,"line_end":1267,"column_start":2,"column_end":77}},{"value":"/ set to `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398534,"byte_end":398549,"line_start":1268,"line_end":1268,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398551,"byte_end":398554,"line_start":1269,"line_end":1269,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398556,"byte_end":398603,"line_start":1270,"line_end":1270,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398605,"byte_end":398608,"line_start":1271,"line_end":1271,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398610,"byte_end":398624,"line_start":1272,"line_end":1272,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398626,"byte_end":398629,"line_start":1273,"line_end":1273,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398631,"byte_end":398642,"line_start":1274,"line_end":1274,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398644,"byte_end":398671,"line_start":1275,"line_end":1275,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398673,"byte_end":398676,"line_start":1276,"line_end":1276,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_ones(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398678,"byte_end":398721,"line_start":1277,"line_end":1277,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0].trailing_ones(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398723,"byte_end":398767,"line_start":1278,"line_end":1278,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1, 0, 1, 1].trailing_ones(), 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398769,"byte_end":398822,"line_start":1279,"line_end":1279,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398824,"byte_end":398831,"line_start":1280,"line_end":1280,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398833,"byte_end":398842,"line_start":1281,"line_end":1281,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3421},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399364,"byte_end":399378,"line_start":1303,"line_end":1303,"column_start":9,"column_end":23},"name":"trailing_zeros","qualname":"<BitSlice<O, T>>::trailing_zeros","value":"pub fn trailing_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":398967,"byte_end":399042,"line_start":1288,"line_end":1288,"column_start":2,"column_end":77}},{"value":"/ set to `1`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399044,"byte_end":399059,"line_start":1289,"line_end":1289,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399061,"byte_end":399064,"line_start":1290,"line_end":1290,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399066,"byte_end":399113,"line_start":1291,"line_end":1291,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399115,"byte_end":399118,"line_start":1292,"line_end":1292,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399120,"byte_end":399134,"line_start":1293,"line_end":1293,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399136,"byte_end":399139,"line_start":1294,"line_end":1294,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399141,"byte_end":399152,"line_start":1295,"line_end":1295,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399154,"byte_end":399181,"line_start":1296,"line_end":1296,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399183,"byte_end":399186,"line_start":1297,"line_end":1297,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_zeros(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399188,"byte_end":399232,"line_start":1298,"line_end":1298,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1].trailing_zeros(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399234,"byte_end":399279,"line_start":1299,"line_end":1299,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(bits![0, 1, 0, 0].trailing_zeros(), 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399281,"byte_end":399335,"line_start":1300,"line_end":1300,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399337,"byte_end":399344,"line_start":1301,"line_end":1301,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399346,"byte_end":399355,"line_start":1302,"line_end":1302,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3423},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401695,"byte_end":401714,"line_start":1382,"line_end":1382,"column_start":9,"column_end":28},"name":"clone_from_bitslice","qualname":"<BitSlice<O, T>>::clone_from_bitslice","value":"pub fn clone_from_bitslice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies the bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies the bits from `src` into `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399480,"byte_end":399523,"line_start":1309,"line_end":1309,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399525,"byte_end":399528,"line_start":1310,"line_end":1310,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399530,"byte_end":399580,"line_start":1311,"line_end":1311,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399582,"byte_end":399585,"line_start":1312,"line_end":1312,"column_start":2,"column_end":5}},{"value":"/ If `src` has the same type arguments as `self`, it can be more","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399587,"byte_end":399653,"line_start":1313,"line_end":1313,"column_start":2,"column_end":68}},{"value":"/ performant to use [`.copy_from_bitslice()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399655,"byte_end":399703,"line_start":1314,"line_end":1314,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399705,"byte_end":399708,"line_start":1315,"line_end":1315,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399710,"byte_end":399724,"line_start":1316,"line_end":1316,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399726,"byte_end":399729,"line_start":1317,"line_end":1317,"column_start":2,"column_end":5}},{"value":"/ [`slice::clone_from_bitslice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.clone_from_bitslice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399731,"byte_end":399851,"line_start":1318,"line_end":1318,"column_start":2,"column_end":122}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399853,"byte_end":399856,"line_start":1319,"line_end":1319,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399858,"byte_end":399879,"line_start":1320,"line_end":1320,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399881,"byte_end":399884,"line_start":1321,"line_end":1321,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399886,"byte_end":399960,"line_start":1322,"line_end":1322,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399962,"byte_end":399972,"line_start":1323,"line_end":1323,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399974,"byte_end":399977,"line_start":1324,"line_end":1324,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399979,"byte_end":399991,"line_start":1325,"line_end":1325,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399993,"byte_end":399996,"line_start":1326,"line_end":1326,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":399998,"byte_end":400068,"line_start":1327,"line_end":1327,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400070,"byte_end":400073,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400075,"byte_end":400089,"line_start":1329,"line_end":1329,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400091,"byte_end":400094,"line_start":1330,"line_end":1330,"column_start":2,"column_end":5}},{"value":"/ Cloning two bits from a slice into another:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400096,"byte_end":400143,"line_start":1331,"line_end":1331,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400145,"byte_end":400148,"line_start":1332,"line_end":1332,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400150,"byte_end":400161,"line_start":1333,"line_end":1333,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400163,"byte_end":400190,"line_start":1334,"line_end":1334,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400192,"byte_end":400195,"line_start":1335,"line_end":1335,"column_start":2,"column_end":5}},{"value":"/ let src = bits![Msb0, u16; 1; 4];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400197,"byte_end":400234,"line_start":1336,"line_end":1336,"column_start":2,"column_end":39}},{"value":"/ let dst = bits![mut Lsb0, u8; 0; 2];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400236,"byte_end":400276,"line_start":1337,"line_end":1337,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400278,"byte_end":400281,"line_start":1338,"line_end":1338,"column_start":2,"column_end":5}},{"value":"/ dst.clone_from_bitslice(&src[2 ..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400283,"byte_end":400323,"line_start":1339,"line_end":1339,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(dst, bits![1; 2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400325,"byte_end":400358,"line_start":1340,"line_end":1340,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400360,"byte_end":400367,"line_start":1341,"line_end":1341,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400369,"byte_end":400372,"line_start":1342,"line_end":1342,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400374,"byte_end":400444,"line_start":1343,"line_end":1343,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400446,"byte_end":400516,"line_start":1344,"line_end":1344,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use clone_from_slice on a single","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400518,"byte_end":400592,"line_start":1345,"line_end":1345,"column_start":2,"column_end":76}},{"value":"/ slice will result in a compile failure:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400594,"byte_end":400637,"line_start":1346,"line_end":1346,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400639,"byte_end":400642,"line_start":1347,"line_end":1347,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400644,"byte_end":400668,"line_start":1348,"line_end":1348,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400670,"byte_end":400697,"line_start":1349,"line_end":1349,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400699,"byte_end":400702,"line_start":1350,"line_end":1350,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400704,"byte_end":400745,"line_start":1351,"line_end":1351,"column_start":2,"column_end":43}},{"value":"/ slice[.. 2].clone_from_bitslice(&slice[3 ..]); // compile fail!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400747,"byte_end":400814,"line_start":1352,"line_end":1352,"column_start":2,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400816,"byte_end":400823,"line_start":1353,"line_end":1353,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400825,"byte_end":400828,"line_start":1354,"line_end":1354,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`.split_at_mut()`] to create two","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400830,"byte_end":400899,"line_start":1355,"line_end":1355,"column_start":2,"column_end":71}},{"value":"/ distinct sub-slices from a slice:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400901,"byte_end":400938,"line_start":1356,"line_end":1356,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400940,"byte_end":400943,"line_start":1357,"line_end":1357,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400945,"byte_end":400956,"line_start":1358,"line_end":1358,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400958,"byte_end":400985,"line_start":1359,"line_end":1359,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400987,"byte_end":400990,"line_start":1360,"line_end":1360,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":400992,"byte_end":401033,"line_start":1361,"line_end":1361,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401035,"byte_end":401038,"line_start":1362,"line_end":1362,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401040,"byte_end":401045,"line_start":1363,"line_end":1363,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = slice.split_at_mut(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401047,"byte_end":401095,"line_start":1364,"line_end":1364,"column_start":2,"column_end":50}},{"value":"/   left.clone_from_bitslice(&right[1 ..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401097,"byte_end":401142,"line_start":1365,"line_end":1365,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401144,"byte_end":401149,"line_start":1366,"line_end":1366,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401151,"byte_end":401154,"line_start":1367,"line_end":1367,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(slice, bits![1, 1, 0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401156,"byte_end":401200,"line_start":1368,"line_end":1368,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401202,"byte_end":401209,"line_start":1369,"line_end":1369,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401211,"byte_end":401214,"line_start":1370,"line_end":1370,"column_start":2,"column_end":5}},{"value":"/ # Performance","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401216,"byte_end":401233,"line_start":1371,"line_end":1371,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401235,"byte_end":401238,"line_start":1372,"line_end":1372,"column_start":2,"column_end":5}},{"value":"/ If `self` and `src` use the same type arguments, this specializes to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401240,"byte_end":401312,"line_start":1373,"line_end":1373,"column_start":2,"column_end":74}},{"value":"/ [`.copy_from_bitslice()`]; if you know statically that this is the case,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401314,"byte_end":401390,"line_start":1374,"line_end":1374,"column_start":2,"column_end":78}},{"value":"/ prefer to call that method directly and avoid the cost of detection at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401392,"byte_end":401466,"line_start":1375,"line_end":1375,"column_start":2,"column_end":76}},{"value":"/ runtime. Otherwise, this is a bit-by-bit crawl across both slices, which","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401468,"byte_end":401544,"line_start":1376,"line_end":1376,"column_start":2,"column_end":78}},{"value":"/ is a slow process.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401546,"byte_end":401568,"line_start":1377,"line_end":1377,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401570,"byte_end":401573,"line_start":1378,"line_end":1378,"column_start":2,"column_end":5}},{"value":"/ [`.copy_from_bitslice()`]: Self::copy_from_bitslice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401575,"byte_end":401630,"line_start":1379,"line_end":1379,"column_start":2,"column_end":57}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401632,"byte_end":401675,"line_start":1380,"line_end":1380,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":401677,"byte_end":401686,"line_start":1381,"line_end":1381,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3426},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404157,"byte_end":404175,"line_start":1478,"line_end":1478,"column_start":9,"column_end":27},"name":"copy_from_bitslice","qualname":"<BitSlice<O, T>>::copy_from_bitslice","value":"pub fn copy_from_bitslice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits from `src` into `self`, using a memcpy wherever\n possible.","sig":null,"attributes":[{"value":"/ Copies all bits from `src` into `self`, using a memcpy wherever","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402197,"byte_end":402264,"line_start":1410,"line_end":1410,"column_start":2,"column_end":69}},{"value":"/ possible.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402266,"byte_end":402279,"line_start":1411,"line_end":1411,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402281,"byte_end":402284,"line_start":1412,"line_end":1412,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be same as `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402286,"byte_end":402333,"line_start":1413,"line_end":1413,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402335,"byte_end":402338,"line_start":1414,"line_end":1414,"column_start":2,"column_end":5}},{"value":"/ If `src` does not use the same type arguments as `self`, use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402340,"byte_end":402404,"line_start":1415,"line_end":1415,"column_start":2,"column_end":66}},{"value":"/ [`.clone_from_bitslice()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402406,"byte_end":402437,"line_start":1416,"line_end":1416,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402439,"byte_end":402442,"line_start":1417,"line_end":1417,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402444,"byte_end":402458,"line_start":1418,"line_end":1418,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402460,"byte_end":402463,"line_start":1419,"line_end":1419,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_from_slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.copy_from_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402465,"byte_end":402577,"line_start":1420,"line_end":1420,"column_start":2,"column_end":114}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402579,"byte_end":402582,"line_start":1421,"line_end":1421,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402584,"byte_end":402605,"line_start":1422,"line_end":1422,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402607,"byte_end":402610,"line_start":1423,"line_end":1423,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402612,"byte_end":402686,"line_start":1424,"line_end":1424,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402688,"byte_end":402698,"line_start":1425,"line_end":1425,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402700,"byte_end":402703,"line_start":1426,"line_end":1426,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402705,"byte_end":402717,"line_start":1427,"line_end":1427,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402719,"byte_end":402722,"line_start":1428,"line_end":1428,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402724,"byte_end":402794,"line_start":1429,"line_end":1429,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402796,"byte_end":402799,"line_start":1430,"line_end":1430,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402801,"byte_end":402815,"line_start":1431,"line_end":1431,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402817,"byte_end":402820,"line_start":1432,"line_end":1432,"column_start":2,"column_end":5}},{"value":"/ Copying two bits from a slice into another:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402822,"byte_end":402869,"line_start":1433,"line_end":1433,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402871,"byte_end":402874,"line_start":1434,"line_end":1434,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402876,"byte_end":402887,"line_start":1435,"line_end":1435,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402889,"byte_end":402916,"line_start":1436,"line_end":1436,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402918,"byte_end":402921,"line_start":1437,"line_end":1437,"column_start":2,"column_end":5}},{"value":"/ let src = bits![1; 4];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402923,"byte_end":402949,"line_start":1438,"line_end":1438,"column_start":2,"column_end":28}},{"value":"/ let dst = bits![mut 0; 2];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402951,"byte_end":402981,"line_start":1439,"line_end":1439,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402983,"byte_end":402986,"line_start":1440,"line_end":1440,"column_start":2,"column_end":5}},{"value":"/ // Because the slices have to be the same length,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":402988,"byte_end":403041,"line_start":1441,"line_end":1441,"column_start":2,"column_end":55}},{"value":"/ // we slice the source slice from four bits to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403043,"byte_end":403093,"line_start":1442,"line_end":1442,"column_start":2,"column_end":52}},{"value":"/ // two. It will panic if we don't do this.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403095,"byte_end":403141,"line_start":1443,"line_end":1443,"column_start":2,"column_end":48}},{"value":"/ dst.clone_from_bitslice(&src[2..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403143,"byte_end":403182,"line_start":1444,"line_end":1444,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403184,"byte_end":403191,"line_start":1445,"line_end":1445,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403193,"byte_end":403196,"line_start":1446,"line_end":1446,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403198,"byte_end":403268,"line_start":1447,"line_end":1447,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403270,"byte_end":403340,"line_start":1448,"line_end":1448,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use [.copy_from_slice()] on a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403342,"byte_end":403413,"line_start":1449,"line_end":1449,"column_start":2,"column_end":73}},{"value":"/ single slice will result in a compile failure:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403415,"byte_end":403465,"line_start":1450,"line_end":1450,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403467,"byte_end":403470,"line_start":1451,"line_end":1451,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403472,"byte_end":403496,"line_start":1452,"line_end":1452,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403498,"byte_end":403525,"line_start":1453,"line_end":1453,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403527,"byte_end":403530,"line_start":1454,"line_end":1454,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403532,"byte_end":403573,"line_start":1455,"line_end":1455,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403575,"byte_end":403578,"line_start":1456,"line_end":1456,"column_start":2,"column_end":5}},{"value":"/ slice[.. 2].copy_from_bitslice(&bits[3 ..]); // compile fail!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403580,"byte_end":403645,"line_start":1457,"line_end":1457,"column_start":2,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403647,"byte_end":403654,"line_start":1458,"line_end":1458,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403656,"byte_end":403659,"line_start":1459,"line_end":1459,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`.split_at_mut()`] to create two","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403661,"byte_end":403730,"line_start":1460,"line_end":1460,"column_start":2,"column_end":71}},{"value":"/ distinct sub-slices from a slice:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403732,"byte_end":403769,"line_start":1461,"line_end":1461,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403771,"byte_end":403774,"line_start":1462,"line_end":1462,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403776,"byte_end":403787,"line_start":1463,"line_end":1463,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403789,"byte_end":403816,"line_start":1464,"line_end":1464,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403818,"byte_end":403821,"line_start":1465,"line_end":1465,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403823,"byte_end":403864,"line_start":1466,"line_end":1466,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403866,"byte_end":403869,"line_start":1467,"line_end":1467,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403871,"byte_end":403876,"line_start":1468,"line_end":1468,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = slice.split_at_mut(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403878,"byte_end":403926,"line_start":1469,"line_end":1469,"column_start":2,"column_end":50}},{"value":"/   left.copy_from_bitslice(&right[1 ..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403928,"byte_end":403972,"line_start":1470,"line_end":1470,"column_start":2,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403974,"byte_end":403979,"line_start":1471,"line_end":1471,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403981,"byte_end":403984,"line_start":1472,"line_end":1472,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(slice, bits![1, 1, 0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":403986,"byte_end":404030,"line_start":1473,"line_end":1473,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404032,"byte_end":404039,"line_start":1474,"line_end":1474,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404041,"byte_end":404044,"line_start":1475,"line_end":1475,"column_start":2,"column_end":5}},{"value":"/ [`.clone_from_bitslice()`]: Self::clone_from_bitslice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404046,"byte_end":404103,"line_start":1476,"line_end":1476,"column_start":2,"column_end":59}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":404105,"byte_end":404148,"line_start":1477,"line_end":1477,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3427},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408506,"byte_end":408524,"line_start":1620,"line_end":1620,"column_start":9,"column_end":27},"name":"swap_with_bitslice","qualname":"<BitSlice<O, T>>::swap_with_bitslice","value":"pub fn swap_with_bitslice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps all bits in `self` with those in `other`.","sig":null,"attributes":[{"value":"/ Swaps all bits in `self` with those in `other`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407602,"byte_end":407653,"line_start":1585,"line_end":1585,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407655,"byte_end":407658,"line_start":1586,"line_end":1586,"column_start":2,"column_end":5}},{"value":"/ The length of `other` must be the same as `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407660,"byte_end":407713,"line_start":1587,"line_end":1587,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407715,"byte_end":407718,"line_start":1588,"line_end":1588,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407720,"byte_end":407734,"line_start":1589,"line_end":1589,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407736,"byte_end":407739,"line_start":1590,"line_end":1590,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap_with_slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.swap_with_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407741,"byte_end":407853,"line_start":1591,"line_end":1591,"column_start":2,"column_end":114}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407855,"byte_end":407858,"line_start":1592,"line_end":1592,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407860,"byte_end":407881,"line_start":1593,"line_end":1593,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407883,"byte_end":407886,"line_start":1594,"line_end":1594,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407888,"byte_end":407962,"line_start":1595,"line_end":1595,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407964,"byte_end":407974,"line_start":1596,"line_end":1596,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407976,"byte_end":407979,"line_start":1597,"line_end":1597,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407981,"byte_end":407993,"line_start":1598,"line_end":1598,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":407995,"byte_end":407998,"line_start":1599,"line_end":1599,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408000,"byte_end":408070,"line_start":1600,"line_end":1600,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408072,"byte_end":408075,"line_start":1601,"line_end":1601,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408077,"byte_end":408091,"line_start":1602,"line_end":1602,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408093,"byte_end":408096,"line_start":1603,"line_end":1603,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408098,"byte_end":408109,"line_start":1604,"line_end":1604,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408111,"byte_end":408138,"line_start":1605,"line_end":1605,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408140,"byte_end":408143,"line_start":1606,"line_end":1606,"column_start":2,"column_end":5}},{"value":"/ let mut one = [0xA5u8, 0x69];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408145,"byte_end":408178,"line_start":1607,"line_end":1607,"column_start":2,"column_end":35}},{"value":"/ let mut two = 0x1234u16;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408180,"byte_end":408208,"line_start":1608,"line_end":1608,"column_start":2,"column_end":30}},{"value":"/ let one_bits = one.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408210,"byte_end":408257,"line_start":1609,"line_end":1609,"column_start":2,"column_end":49}},{"value":"/ let two_bits = two.view_bits_mut::<Lsb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408259,"byte_end":408306,"line_start":1610,"line_end":1610,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408308,"byte_end":408311,"line_start":1611,"line_end":1611,"column_start":2,"column_end":5}},{"value":"/ one_bits.swap_with_bitslice(two_bits);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408313,"byte_end":408355,"line_start":1612,"line_end":1612,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408357,"byte_end":408360,"line_start":1613,"line_end":1613,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(one, [0x2C, 0x48]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408362,"byte_end":408396,"line_start":1614,"line_end":1614,"column_start":2,"column_end":36}},{"value":"/ # #[cfg(target_endian = \"little\")] {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408398,"byte_end":408438,"line_start":1615,"line_end":1615,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(two, 0x96A5);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408440,"byte_end":408468,"line_start":1616,"line_end":1616,"column_start":2,"column_end":30}},{"value":"/ # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408470,"byte_end":408477,"line_start":1617,"line_end":1617,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408479,"byte_end":408486,"line_start":1618,"line_end":1618,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408488,"byte_end":408497,"line_start":1619,"line_end":1619,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3430},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409498,"byte_end":409508,"line_start":1661,"line_end":1661,"column_start":9,"column_end":19},"name":"shift_left","qualname":"<BitSlice<O, T>>::shift_left","value":"pub fn shift_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice left (towards index `0`).","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice left (towards index `0`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408793,"byte_end":408857,"line_start":1635,"line_end":1635,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408859,"byte_end":408862,"line_start":1636,"line_end":1636,"column_start":2,"column_end":5}},{"value":"/ This moves the contents of the slice from `by ..` down to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408864,"byte_end":408925,"line_start":1637,"line_end":1637,"column_start":2,"column_end":63}},{"value":"/ `0 .. len - by`, and erases `len - by ..` to `0`. As this is a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408927,"byte_end":408993,"line_start":1638,"line_end":1638,"column_start":2,"column_end":68}},{"value":"/ destructive (and linearly expensive) operation, you may prefer instead","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":408995,"byte_end":409069,"line_start":1639,"line_end":1639,"column_start":2,"column_end":76}},{"value":"/ to use range subslicing.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409071,"byte_end":409099,"line_start":1640,"line_end":1640,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409101,"byte_end":409104,"line_start":1641,"line_end":1641,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409106,"byte_end":409122,"line_start":1642,"line_end":1642,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409124,"byte_end":409127,"line_start":1643,"line_end":1643,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409129,"byte_end":409146,"line_start":1644,"line_end":1644,"column_start":2,"column_end":19}},{"value":"/ - `by`: The distance by which to shift the slice contents.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409148,"byte_end":409210,"line_start":1645,"line_end":1645,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409212,"byte_end":409215,"line_start":1646,"line_end":1646,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409217,"byte_end":409229,"line_start":1647,"line_end":1647,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409231,"byte_end":409234,"line_start":1648,"line_end":1648,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409236,"byte_end":409290,"line_start":1649,"line_end":1649,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409292,"byte_end":409295,"line_start":1650,"line_end":1650,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409297,"byte_end":409311,"line_start":1651,"line_end":1651,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409313,"byte_end":409316,"line_start":1652,"line_end":1652,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409318,"byte_end":409329,"line_start":1653,"line_end":1653,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409331,"byte_end":409358,"line_start":1654,"line_end":1654,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409360,"byte_end":409363,"line_start":1655,"line_end":1655,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 6];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409365,"byte_end":409396,"line_start":1656,"line_end":1656,"column_start":2,"column_end":33}},{"value":"/ bits.shift_left(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409398,"byte_end":409421,"line_start":1657,"line_end":1657,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bits, bits![1, 1, 1, 1, 0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409423,"byte_end":409469,"line_start":1658,"line_end":1658,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409471,"byte_end":409478,"line_start":1659,"line_end":1659,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409480,"byte_end":409489,"line_start":1660,"line_end":1660,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3431},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410536,"byte_end":410547,"line_start":1705,"line_end":1705,"column_start":9,"column_end":20},"name":"shift_right","qualname":"<BitSlice<O, T>>::shift_right","value":"pub fn shift_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice right (towards index `self.len()`).","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice right (towards index `self.len()`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409835,"byte_end":409909,"line_start":1680,"line_end":1680,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409911,"byte_end":409914,"line_start":1681,"line_end":1681,"column_start":2,"column_end":5}},{"value":"/ This moves the contents of the slice from `.. len - by` up to `by ..`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409916,"byte_end":409990,"line_start":1682,"line_end":1682,"column_start":2,"column_end":76}},{"value":"/ and erases `.. by` to `0`. As this is a destructive (and linearly","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":409992,"byte_end":410061,"line_start":1683,"line_end":1683,"column_start":2,"column_end":71}},{"value":"/ expensive) operation, you may prefer instead to use range subslicing.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410063,"byte_end":410136,"line_start":1684,"line_end":1684,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410138,"byte_end":410141,"line_start":1685,"line_end":1685,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410143,"byte_end":410159,"line_start":1686,"line_end":1686,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410161,"byte_end":410164,"line_start":1687,"line_end":1687,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410166,"byte_end":410183,"line_start":1688,"line_end":1688,"column_start":2,"column_end":19}},{"value":"/ - `by`: The distance by which to shift the slice contents.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410185,"byte_end":410247,"line_start":1689,"line_end":1689,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410249,"byte_end":410252,"line_start":1690,"line_end":1690,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410254,"byte_end":410266,"line_start":1691,"line_end":1691,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410268,"byte_end":410271,"line_start":1692,"line_end":1692,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410273,"byte_end":410327,"line_start":1693,"line_end":1693,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410329,"byte_end":410332,"line_start":1694,"line_end":1694,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410334,"byte_end":410348,"line_start":1695,"line_end":1695,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410350,"byte_end":410353,"line_start":1696,"line_end":1696,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410355,"byte_end":410366,"line_start":1697,"line_end":1697,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410368,"byte_end":410395,"line_start":1698,"line_end":1698,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410397,"byte_end":410400,"line_start":1699,"line_end":1699,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 6];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410402,"byte_end":410433,"line_start":1700,"line_end":1700,"column_start":2,"column_end":33}},{"value":"/ bits.shift_right(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410435,"byte_end":410459,"line_start":1701,"line_end":1701,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bits, bits![0, 0, 1, 1, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410461,"byte_end":410507,"line_start":1702,"line_end":1702,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410509,"byte_end":410516,"line_start":1703,"line_end":1703,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410518,"byte_end":410527,"line_start":1704,"line_end":1704,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3432},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411457,"byte_end":411464,"line_start":1745,"line_end":1745,"column_start":9,"column_end":16},"name":"set_all","qualname":"<BitSlice<O, T>>::set_all","value":"pub fn set_all(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits in the slice to a value.","sig":null,"attributes":[{"value":"/ Sets all bits in the slice to a value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410874,"byte_end":410916,"line_start":1724,"line_end":1724,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410918,"byte_end":410921,"line_start":1725,"line_end":1725,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410923,"byte_end":410939,"line_start":1726,"line_end":1726,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410941,"byte_end":410944,"line_start":1727,"line_end":1727,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410946,"byte_end":410963,"line_start":1728,"line_end":1728,"column_start":2,"column_end":19}},{"value":"/ - `value`: The bit value to which all bits in the slice will be set.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":410965,"byte_end":411037,"line_start":1729,"line_end":1729,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411039,"byte_end":411042,"line_start":1730,"line_end":1730,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411044,"byte_end":411058,"line_start":1731,"line_end":1731,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411060,"byte_end":411063,"line_start":1732,"line_end":1732,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411065,"byte_end":411076,"line_start":1733,"line_end":1733,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411078,"byte_end":411105,"line_start":1734,"line_end":1734,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411107,"byte_end":411110,"line_start":1735,"line_end":1735,"column_start":2,"column_end":5}},{"value":"/ let mut src = 0u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411112,"byte_end":411134,"line_start":1736,"line_end":1736,"column_start":2,"column_end":24}},{"value":"/ let bits = src.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411136,"byte_end":411179,"line_start":1737,"line_end":1737,"column_start":2,"column_end":45}},{"value":"/ bits[2 .. 6].set_all(true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411181,"byte_end":411212,"line_start":1738,"line_end":1738,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bits.as_raw_slice(), &[0b0011_1100]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411214,"byte_end":411266,"line_start":1739,"line_end":1739,"column_start":2,"column_end":54}},{"value":"/ bits[3 .. 5].set_all(false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411268,"byte_end":411300,"line_start":1740,"line_end":1740,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bits.as_raw_slice(), &[0b0010_0100]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411302,"byte_end":411354,"line_start":1741,"line_end":1741,"column_start":2,"column_end":54}},{"value":"/ bits[.. 1].set_all(true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411356,"byte_end":411385,"line_start":1742,"line_end":1742,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bits.as_raw_slice(), &[0b1010_0100]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411387,"byte_end":411439,"line_start":1743,"line_end":1743,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":411441,"byte_end":411448,"line_start":1744,"line_end":1744,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3433},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413304,"byte_end":413312,"line_start":1805,"line_end":1805,"column_start":9,"column_end":17},"name":"for_each","qualname":"<BitSlice<O, T>>::for_each","value":"pub fn for_each<F>(&mut Self, F) where F: FnMut(usize, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Applies a function to each bit in the slice.","sig":null,"attributes":[{"value":"/ Applies a function to each bit in the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412145,"byte_end":412193,"line_start":1771,"line_end":1771,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412195,"byte_end":412198,"line_start":1772,"line_end":1772,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` cannot implement [`IndexMut`], as it cannot manifest `&mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412200,"byte_end":412273,"line_start":1773,"line_end":1773,"column_start":2,"column_end":75}},{"value":"/ bool` references, and the [`BitRef`] proxy reference has an unavoidable","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412275,"byte_end":412350,"line_start":1774,"line_end":1774,"column_start":2,"column_end":77}},{"value":"/ overhead. This method bypasses both problems, by applying a function to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412352,"byte_end":412427,"line_start":1775,"line_end":1775,"column_start":2,"column_end":77}},{"value":"/ each pair of index and value in the slice, without constructing a proxy","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412429,"byte_end":412504,"line_start":1776,"line_end":1776,"column_start":2,"column_end":77}},{"value":"/ reference. Benchmarks indicate that this method is about 2–4 times","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412506,"byte_end":412578,"line_start":1777,"line_end":1777,"column_start":2,"column_end":72}},{"value":"/ faster than the `.iter_mut().enumerate()` equivalent.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412580,"byte_end":412637,"line_start":1778,"line_end":1778,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412639,"byte_end":412642,"line_start":1779,"line_end":1779,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412644,"byte_end":412660,"line_start":1780,"line_end":1780,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412662,"byte_end":412665,"line_start":1781,"line_end":1781,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412667,"byte_end":412684,"line_start":1782,"line_end":1782,"column_start":2,"column_end":19}},{"value":"/ - `func`: A function which receives two arguments, `index: usize` and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412686,"byte_end":412759,"line_start":1783,"line_end":1783,"column_start":2,"column_end":75}},{"value":"/   `value: bool`, and returns a `bool`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412761,"byte_end":412803,"line_start":1784,"line_end":1784,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412805,"byte_end":412808,"line_start":1785,"line_end":1785,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412810,"byte_end":412823,"line_start":1786,"line_end":1786,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412825,"byte_end":412828,"line_start":1787,"line_end":1787,"column_start":2,"column_end":5}},{"value":"/ For each index in the slice, the result of invoking `func` with the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412830,"byte_end":412901,"line_start":1788,"line_end":1788,"column_start":2,"column_end":73}},{"value":"/ index number and current bit value is written into the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412903,"byte_end":412968,"line_start":1789,"line_end":1789,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412970,"byte_end":412973,"line_start":1790,"line_end":1790,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412975,"byte_end":412989,"line_start":1791,"line_end":1791,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412991,"byte_end":412994,"line_start":1792,"line_end":1792,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":412996,"byte_end":413007,"line_start":1793,"line_end":1793,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413009,"byte_end":413036,"line_start":1794,"line_end":1794,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413038,"byte_end":413041,"line_start":1795,"line_end":1795,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413043,"byte_end":413066,"line_start":1796,"line_end":1796,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413068,"byte_end":413112,"line_start":1797,"line_end":1797,"column_start":2,"column_end":46}},{"value":"/ bits.for_each(|idx, _bit| idx % 3 == 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413114,"byte_end":413158,"line_start":1798,"line_end":1798,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(data, 0b100_100_10);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413160,"byte_end":413195,"line_start":1799,"line_end":1799,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413197,"byte_end":413204,"line_start":1800,"line_end":1800,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413206,"byte_end":413209,"line_start":1801,"line_end":1801,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413211,"byte_end":413245,"line_start":1802,"line_end":1802,"column_start":2,"column_end":36}},{"value":"/ [`IndexMut`]: core::ops::IndexMut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413247,"byte_end":413284,"line_start":1803,"line_end":1803,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413286,"byte_end":413295,"line_start":1804,"line_end":1804,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3435},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415215,"byte_end":415226,"line_start":1862,"line_end":1862,"column_start":9,"column_end":20},"name":"offset_from","qualname":"<BitSlice<O, T>>::offset_from","value":"pub fn offset_from(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Produces the absolute offset in bits between two slice heads.","sig":null,"attributes":[{"value":"/ Produces the absolute offset in bits between two slice heads.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413504,"byte_end":413569,"line_start":1814,"line_end":1814,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413571,"byte_end":413574,"line_start":1815,"line_end":1815,"column_start":2,"column_end":5}},{"value":"/ While this method is sound for any two arbitrary bit slices, the answer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413576,"byte_end":413651,"line_start":1816,"line_end":1816,"column_start":2,"column_end":77}},{"value":"/ it produces is meaningful *only* when one argument is a strict subslice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413653,"byte_end":413728,"line_start":1817,"line_end":1817,"column_start":2,"column_end":77}},{"value":"/ of the other. If the two slices are created from different buffers","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413730,"byte_end":413800,"line_start":1818,"line_end":1818,"column_start":2,"column_end":72}},{"value":"/ entirely, a comparison is undefined; if the two slices are disjoint","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413802,"byte_end":413873,"line_start":1819,"line_end":1819,"column_start":2,"column_end":73}},{"value":"/ regions of the same buffer, then the semantically correct distance is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413875,"byte_end":413948,"line_start":1820,"line_end":1820,"column_start":2,"column_end":75}},{"value":"/ between the tail of the lower and the head of the upper, which this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":413950,"byte_end":414021,"line_start":1821,"line_end":1821,"column_start":2,"column_end":73}},{"value":"/ does not measure.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414023,"byte_end":414044,"line_start":1822,"line_end":1822,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414046,"byte_end":414049,"line_start":1823,"line_end":1823,"column_start":2,"column_end":5}},{"value":"/ # Visual Description","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414051,"byte_end":414075,"line_start":1824,"line_end":1824,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414077,"byte_end":414080,"line_start":1825,"line_end":1825,"column_start":2,"column_end":5}},{"value":"/ Consider the following sequence of bits:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414082,"byte_end":414126,"line_start":1826,"line_end":1826,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414128,"byte_end":414131,"line_start":1827,"line_end":1827,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414133,"byte_end":414144,"line_start":1828,"line_end":1828,"column_start":2,"column_end":13}},{"value":"/ [ 0 1 2 3 4 5 6 7 8 9 a b ]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414146,"byte_end":414177,"line_start":1829,"line_end":1829,"column_start":2,"column_end":33}},{"value":"/   |       ^^^^^^^       |","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414179,"byte_end":414208,"line_start":1830,"line_end":1830,"column_start":2,"column_end":31}},{"value":"/   ^^^^^^^^^^^^^^^^^^^^^^^","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414210,"byte_end":414239,"line_start":1831,"line_end":1831,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414241,"byte_end":414248,"line_start":1832,"line_end":1832,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414250,"byte_end":414253,"line_start":1833,"line_end":1833,"column_start":2,"column_end":5}},{"value":"/ It does not matter whether there are bits between the tail of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414255,"byte_end":414324,"line_start":1834,"line_end":1834,"column_start":2,"column_end":71}},{"value":"/ smaller and the larger slices. The offset is computed from the bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414326,"byte_end":414396,"line_start":1835,"line_end":1835,"column_start":2,"column_end":72}},{"value":"/ distance between the two heads.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414398,"byte_end":414433,"line_start":1836,"line_end":1836,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414435,"byte_end":414438,"line_start":1837,"line_end":1837,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414440,"byte_end":414454,"line_start":1838,"line_end":1838,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414456,"byte_end":414459,"line_start":1839,"line_end":1839,"column_start":2,"column_end":5}},{"value":"/ This function computes the *semantic* distance between the heads, rather","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414461,"byte_end":414537,"line_start":1840,"line_end":1840,"column_start":2,"column_end":78}},{"value":"/ than the *electrical. It does not take into account the `BitOrder`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414539,"byte_end":414609,"line_start":1841,"line_end":1841,"column_start":2,"column_end":72}},{"value":"/ implementation of the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414611,"byte_end":414643,"line_start":1842,"line_end":1842,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414645,"byte_end":414648,"line_start":1843,"line_end":1843,"column_start":2,"column_end":5}},{"value":"/ # Safety and Soundness","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414650,"byte_end":414676,"line_start":1844,"line_end":1844,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414678,"byte_end":414681,"line_start":1845,"line_end":1845,"column_start":2,"column_end":5}},{"value":"/ One of `self` or `other` must contain the other for this comparison to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414683,"byte_end":414757,"line_start":1846,"line_end":1846,"column_start":2,"column_end":76}},{"value":"/ be meaningful.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414759,"byte_end":414777,"line_start":1847,"line_end":1847,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414779,"byte_end":414782,"line_start":1848,"line_end":1848,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414784,"byte_end":414800,"line_start":1849,"line_end":1849,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414802,"byte_end":414805,"line_start":1850,"line_end":1850,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414807,"byte_end":414820,"line_start":1851,"line_end":1851,"column_start":2,"column_end":15}},{"value":"/ - `other`: Another bit slice. This must be either a strict subregion or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414822,"byte_end":414897,"line_start":1852,"line_end":1852,"column_start":2,"column_end":77}},{"value":"/   a strict superregion of `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414899,"byte_end":414936,"line_start":1853,"line_end":1853,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414938,"byte_end":414941,"line_start":1854,"line_end":1854,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414943,"byte_end":414956,"line_start":1855,"line_end":1855,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414958,"byte_end":414961,"line_start":1856,"line_end":1856,"column_start":2,"column_end":5}},{"value":"/ The distance in (semantic) bits between the heads of each region. The","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":414963,"byte_end":415036,"line_start":1857,"line_end":1857,"column_start":2,"column_end":75}},{"value":"/ value is positive when `other` is higher in the address space than","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415038,"byte_end":415108,"line_start":1858,"line_end":1858,"column_start":2,"column_end":72}},{"value":"/ `self`, and negative when `other` is lower in the address space than","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415110,"byte_end":415182,"line_start":1859,"line_end":1859,"column_start":2,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415184,"byte_end":415195,"line_start":1860,"line_end":1860,"column_start":2,"column_end":13}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415197,"byte_end":415206,"line_start":1861,"line_end":1861,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3436},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415411,"byte_end":415430,"line_start":1869,"line_end":1869,"column_start":9,"column_end":28},"name":"electrical_distance","qualname":"<BitSlice<O, T>>::electrical_distance","value":"pub fn electrical_distance(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(never)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415341,"byte_end":415357,"line_start":1867,"line_end":1867,"column_start":2,"column_end":18}},{"value":"deprecated = \"Use `BitPtr::offset_from`\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415359,"byte_end":415402,"line_start":1868,"line_end":1868,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3440},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417558,"byte_end":417571,"line_start":1936,"line_end":1936,"column_start":16,"column_end":29},"name":"set_unchecked","qualname":"<BitSlice<O, T>>::set_unchecked","value":"pub unsafe fn set_unchecked(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index, without doing bounds checking.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415867,"byte_end":415936,"line_start":1885,"line_end":1885,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415938,"byte_end":415941,"line_start":1886,"line_end":1886,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415943,"byte_end":416019,"line_start":1887,"line_end":1887,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]*. For a safe","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416021,"byte_end":416090,"line_start":1888,"line_end":1888,"column_start":2,"column_end":71}},{"value":"/ alternative, see [`.set()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416092,"byte_end":416124,"line_start":1889,"line_end":1889,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416126,"byte_end":416129,"line_start":1890,"line_end":1890,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416131,"byte_end":416147,"line_start":1891,"line_end":1891,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416149,"byte_end":416152,"line_start":1892,"line_end":1892,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416154,"byte_end":416171,"line_start":1893,"line_end":1893,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416173,"byte_end":416247,"line_start":1894,"line_end":1894,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416249,"byte_end":416270,"line_start":1895,"line_end":1895,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416272,"byte_end":416346,"line_start":1896,"line_end":1896,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416348,"byte_end":416351,"line_start":1897,"line_end":1897,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416353,"byte_end":416366,"line_start":1898,"line_end":1898,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416368,"byte_end":416371,"line_start":1899,"line_end":1899,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`. If `index` is out of bounds, then","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416373,"byte_end":416448,"line_start":1900,"line_end":1900,"column_start":2,"column_end":77}},{"value":"/ the memory access is incorrect, and its behavior is unspecified.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416450,"byte_end":416518,"line_start":1901,"line_end":1901,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416520,"byte_end":416523,"line_start":1902,"line_end":1902,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416525,"byte_end":416537,"line_start":1903,"line_end":1903,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416539,"byte_end":416542,"line_start":1904,"line_end":1904,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416544,"byte_end":416619,"line_start":1905,"line_end":1905,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416621,"byte_end":416692,"line_start":1906,"line_end":1906,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416694,"byte_end":416764,"line_start":1907,"line_end":1907,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416766,"byte_end":416814,"line_start":1908,"line_end":1908,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416816,"byte_end":416819,"line_start":1909,"line_end":1909,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416821,"byte_end":416892,"line_start":1910,"line_end":1910,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416894,"byte_end":416967,"line_start":1911,"line_end":1911,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416969,"byte_end":416979,"line_start":1912,"line_end":1912,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416981,"byte_end":416984,"line_start":1913,"line_end":1913,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":416986,"byte_end":417000,"line_start":1914,"line_end":1914,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417002,"byte_end":417005,"line_start":1915,"line_end":1915,"column_start":2,"column_end":5}},{"value":"/ This example uses a bit slice of length 2, and demonstrates","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417007,"byte_end":417070,"line_start":1916,"line_end":1916,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds access to the last bit in the element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417072,"byte_end":417128,"line_start":1917,"line_end":1917,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417130,"byte_end":417133,"line_start":1918,"line_end":1918,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417135,"byte_end":417146,"line_start":1919,"line_end":1919,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417148,"byte_end":417175,"line_start":1920,"line_end":1920,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417177,"byte_end":417180,"line_start":1921,"line_end":1921,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 2];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417182,"byte_end":417213,"line_start":1922,"line_end":1922,"column_start":2,"column_end":33}},{"value":"/ let (first, _) = bits.split_at_mut(1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417215,"byte_end":417257,"line_start":1923,"line_end":1923,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417259,"byte_end":417262,"line_start":1924,"line_end":1924,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417264,"byte_end":417276,"line_start":1925,"line_end":1925,"column_start":2,"column_end":14}},{"value":"/   first.set_unchecked(1, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417278,"byte_end":417313,"line_start":1926,"line_end":1926,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417315,"byte_end":417320,"line_start":1927,"line_end":1927,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417322,"byte_end":417325,"line_start":1928,"line_end":1928,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417327,"byte_end":417361,"line_start":1929,"line_end":1929,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417363,"byte_end":417370,"line_start":1930,"line_end":1930,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417372,"byte_end":417375,"line_start":1931,"line_end":1931,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417377,"byte_end":417406,"line_start":1932,"line_end":1932,"column_start":2,"column_end":31}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417408,"byte_end":417504,"line_start":1933,"line_end":1933,"column_start":2,"column_end":98}},{"value":"/ [`.set()`]: Self::set","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417506,"byte_end":417531,"line_start":1934,"line_end":1934,"column_start":2,"column_end":27}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417533,"byte_end":417542,"line_start":1935,"line_end":1935,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3441},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417896,"byte_end":417910,"line_start":1951,"line_end":1951,"column_start":16,"column_end":30},"name":"swap_unchecked","qualname":"<BitSlice<O, T>>::swap_unchecked","value":"pub unsafe fn swap_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417665,"byte_end":417697,"line_start":1940,"line_end":1940,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417699,"byte_end":417702,"line_start":1941,"line_end":1941,"column_start":2,"column_end":5}},{"value":"/ See [`.swap()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417704,"byte_end":417724,"line_start":1942,"line_end":1942,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417726,"byte_end":417729,"line_start":1943,"line_end":1943,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417731,"byte_end":417743,"line_start":1944,"line_end":1944,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417745,"byte_end":417748,"line_start":1945,"line_end":1945,"column_start":2,"column_end":5}},{"value":"/ `a` and `b` must both be less than [`self.len()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417750,"byte_end":417804,"line_start":1946,"line_end":1946,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417806,"byte_end":417809,"line_start":1947,"line_end":1947,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417811,"byte_end":417840,"line_start":1948,"line_end":1948,"column_start":2,"column_end":31}},{"value":"/ [`.swap()`]: Self::swap","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417842,"byte_end":417869,"line_start":1949,"line_end":1949,"column_start":2,"column_end":29}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":417871,"byte_end":417880,"line_start":1950,"line_end":1950,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3442},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418757,"byte_end":418775,"line_start":1985,"line_end":1985,"column_start":16,"column_end":34},"name":"split_at_unchecked","qualname":"<BitSlice<O, T>>::split_at_unchecked","value":"pub unsafe fn split_at_unchecked(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index, without performing any bounds\n checking.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index, without performing any bounds","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418040,"byte_end":418113,"line_start":1957,"line_end":1957,"column_start":2,"column_end":75}},{"value":"/ checking.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418115,"byte_end":418128,"line_start":1958,"line_end":1958,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418130,"byte_end":418133,"line_start":1959,"line_end":1959,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418135,"byte_end":418159,"line_start":1960,"line_end":1960,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418161,"byte_end":418164,"line_start":1961,"line_end":1961,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418166,"byte_end":418178,"line_start":1962,"line_end":1962,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418180,"byte_end":418183,"line_start":1963,"line_end":1963,"column_start":2,"column_end":5}},{"value":"/ `mid` must not be greater than [`self.len()`]. If this condition is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418185,"byte_end":418256,"line_start":1964,"line_end":1964,"column_start":2,"column_end":73}},{"value":"/ violated, the function behavior is *unspecified*.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418258,"byte_end":418311,"line_start":1965,"line_end":1965,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418313,"byte_end":418316,"line_start":1966,"line_end":1966,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418318,"byte_end":418332,"line_start":1967,"line_end":1967,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418334,"byte_end":418337,"line_start":1968,"line_end":1968,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418339,"byte_end":418350,"line_start":1969,"line_end":1969,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418352,"byte_end":418379,"line_start":1970,"line_end":1970,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418381,"byte_end":418384,"line_start":1971,"line_end":1971,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 0, 1, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418386,"byte_end":418425,"line_start":1972,"line_end":1972,"column_start":2,"column_end":41}},{"value":"/ let (l, r) = unsafe { bits.split_at_unchecked(3) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418427,"byte_end":418482,"line_start":1973,"line_end":1973,"column_start":2,"column_end":57}},{"value":"/ assert!(l.not_any());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418484,"byte_end":418509,"line_start":1974,"line_end":1974,"column_start":2,"column_end":27}},{"value":"/ assert!(r.all());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418511,"byte_end":418532,"line_start":1975,"line_end":1975,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418534,"byte_end":418537,"line_start":1976,"line_end":1976,"column_start":2,"column_end":5}},{"value":"/ let (l, r) = unsafe { bits.split_at_unchecked(6) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418539,"byte_end":418594,"line_start":1977,"line_end":1977,"column_start":2,"column_end":57}},{"value":"/ assert_eq!(l, bits);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418596,"byte_end":418620,"line_start":1978,"line_end":1978,"column_start":2,"column_end":26}},{"value":"/ assert!(r.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418622,"byte_end":418648,"line_start":1979,"line_end":1979,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418650,"byte_end":418657,"line_start":1980,"line_end":1980,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418659,"byte_end":418662,"line_start":1981,"line_end":1981,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418664,"byte_end":418693,"line_start":1982,"line_end":1982,"column_start":2,"column_end":31}},{"value":"/ [`.split_at()`]: Self::split_at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418695,"byte_end":418730,"line_start":1983,"line_end":1983,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418732,"byte_end":418741,"line_start":1984,"line_end":1984,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3443},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419184,"byte_end":419206,"line_start":2001,"line_end":2001,"column_start":16,"column_end":38},"name":"split_at_unchecked_mut","qualname":"<BitSlice<O, T>>::split_at_unchecked_mut","value":"pub unsafe fn split_at_unchecked_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418879,"byte_end":418930,"line_start":1989,"line_end":1989,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418932,"byte_end":418935,"line_start":1990,"line_end":1990,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at_mut()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418937,"byte_end":418965,"line_start":1991,"line_end":1991,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418967,"byte_end":418970,"line_start":1992,"line_end":1992,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418972,"byte_end":418984,"line_start":1993,"line_end":1993,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418986,"byte_end":418989,"line_start":1994,"line_end":1994,"column_start":2,"column_end":5}},{"value":"/ `mid` must not be greater than [`self.len()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":418991,"byte_end":419041,"line_start":1995,"line_end":1995,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419043,"byte_end":419046,"line_start":1996,"line_end":1996,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419048,"byte_end":419077,"line_start":1997,"line_end":1997,"column_start":2,"column_end":31}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419079,"byte_end":419122,"line_start":1998,"line_end":1998,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419124,"byte_end":419133,"line_start":1999,"line_end":1999,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419135,"byte_end":419168,"line_start":2000,"line_end":2000,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3444},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420046,"byte_end":420067,"line_start":2033,"line_end":2033,"column_start":16,"column_end":37},"name":"copy_within_unchecked","qualname":"<BitSlice<O, T>>::copy_within_unchecked","value":"pub unsafe fn copy_within_unchecked<R>(&mut Self, R, usize) where\nR: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself,\n without doing bounds checks.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419461,"byte_end":419530,"line_start":2012,"line_end":2012,"column_start":2,"column_end":71}},{"value":"/ without doing bounds checks.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419532,"byte_end":419564,"line_start":2013,"line_end":2013,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419566,"byte_end":419569,"line_start":2014,"line_end":2014,"column_start":2,"column_end":5}},{"value":"/ The ranges are allowed to overlap.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419571,"byte_end":419609,"line_start":2015,"line_end":2015,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419611,"byte_end":419614,"line_start":2016,"line_end":2016,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419616,"byte_end":419632,"line_start":2017,"line_end":2017,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419634,"byte_end":419637,"line_start":2018,"line_end":2018,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419639,"byte_end":419656,"line_start":2019,"line_end":2019,"column_start":2,"column_end":19}},{"value":"/ - `src`: The range within `self` from which to copy.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419658,"byte_end":419714,"line_start":2020,"line_end":2020,"column_start":2,"column_end":58}},{"value":"/ - `dst`: The starting index within `self` at which to paste.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419716,"byte_end":419780,"line_start":2021,"line_end":2021,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419782,"byte_end":419785,"line_start":2022,"line_end":2022,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419787,"byte_end":419800,"line_start":2023,"line_end":2023,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419802,"byte_end":419805,"line_start":2024,"line_end":2024,"column_start":2,"column_end":5}},{"value":"/ `self[src]` is copied to `self[dest .. dest + src.end() - src.start()]`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419807,"byte_end":419883,"line_start":2025,"line_end":2025,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419885,"byte_end":419888,"line_start":2026,"line_end":2026,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419890,"byte_end":419902,"line_start":2027,"line_end":2027,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419904,"byte_end":419907,"line_start":2028,"line_end":2028,"column_start":2,"column_end":5}},{"value":"/ `src` and `dest .. dest + src.len()` must be entirely within","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419909,"byte_end":419973,"line_start":2029,"line_end":2029,"column_start":2,"column_end":66}},{"value":"/ [`self.len()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419975,"byte_end":419994,"line_start":2030,"line_end":2030,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":419996,"byte_end":419999,"line_start":2031,"line_end":2031,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420001,"byte_end":420030,"line_start":2032,"line_end":2032,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3449},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422546,"byte_end":422555,"line_start":2117,"line_end":2117,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitSlice<O, T>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw bit-pointer to the base of the bit-slice’s region.","sig":null,"attributes":[{"value":"/ Returns a raw bit-pointer to the base of the bit-slice’s region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421033,"byte_end":421103,"line_start":2072,"line_end":2072,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421105,"byte_end":421108,"line_start":2073,"line_end":2073,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-slice outlives the bit-pointer this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421110,"byte_end":421185,"line_start":2074,"line_end":2074,"column_start":2,"column_end":77}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421187,"byte_end":421252,"line_start":2075,"line_end":2075,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421254,"byte_end":421257,"line_start":2076,"line_end":2076,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the bit-pointer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421259,"byte_end":421322,"line_start":2077,"line_end":2077,"column_start":2,"column_end":65}},{"value":"/ (non-transitively) points to is never written to using this bit-pointer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421324,"byte_end":421399,"line_start":2078,"line_end":2078,"column_start":2,"column_end":77}},{"value":"/ or any bit-pointer derived from it. If you need to mutate the contents","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421401,"byte_end":421475,"line_start":2079,"line_end":2079,"column_start":2,"column_end":76}},{"value":"/ of the slice, use [`.as_mut_bitptr()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421477,"byte_end":421520,"line_start":2080,"line_end":2080,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421522,"byte_end":421525,"line_start":2081,"line_end":2081,"column_start":2,"column_end":5}},{"value":"/ Modifying the container referenced by this bit-slice may cause its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421527,"byte_end":421597,"line_start":2082,"line_end":2082,"column_start":2,"column_end":72}},{"value":"/ buffer to be reällocated, which would also make any bit-pointers to it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421599,"byte_end":421674,"line_start":2083,"line_end":2083,"column_start":2,"column_end":76}},{"value":"/ invalid.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421676,"byte_end":421688,"line_start":2084,"line_end":2084,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421690,"byte_end":421693,"line_start":2085,"line_end":2085,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421695,"byte_end":421709,"line_start":2086,"line_end":2086,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421711,"byte_end":421714,"line_start":2087,"line_end":2087,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421716,"byte_end":421810,"line_start":2088,"line_end":2088,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421812,"byte_end":421815,"line_start":2089,"line_end":2089,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421817,"byte_end":421838,"line_start":2090,"line_end":2090,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421840,"byte_end":421843,"line_start":2091,"line_end":2091,"column_start":2,"column_end":5}},{"value":"/ This returns a structure, [`BitPtr`], rather than an actual raw pointer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421845,"byte_end":421920,"line_start":2092,"line_end":2092,"column_start":2,"column_end":77}},{"value":"/ `*Bit`. The information required to address a bit within a memory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421922,"byte_end":421991,"line_start":2093,"line_end":2093,"column_start":2,"column_end":71}},{"value":"/ element cannot be encoded into a single pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":421993,"byte_end":422045,"line_start":2094,"line_end":2094,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422047,"byte_end":422050,"line_start":2095,"line_end":2095,"column_start":2,"column_end":5}},{"value":"/ This structure can be converted back into a `&BitSlice` with the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422052,"byte_end":422120,"line_start":2096,"line_end":2096,"column_start":2,"column_end":70}},{"value":"/ function [`from_raw_parts`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422122,"byte_end":422154,"line_start":2097,"line_end":2097,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422156,"byte_end":422159,"line_start":2098,"line_end":2098,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422161,"byte_end":422175,"line_start":2099,"line_end":2099,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422177,"byte_end":422180,"line_start":2100,"line_end":2100,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422182,"byte_end":422193,"line_start":2101,"line_end":2101,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422195,"byte_end":422222,"line_start":2102,"line_end":2102,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422224,"byte_end":422227,"line_start":2103,"line_end":2103,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422229,"byte_end":422256,"line_start":2104,"line_end":2104,"column_start":2,"column_end":29}},{"value":"/ let x_ptr = x.as_ptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422258,"byte_end":422285,"line_start":2105,"line_end":2105,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422287,"byte_end":422290,"line_start":2106,"line_end":2106,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422292,"byte_end":422304,"line_start":2107,"line_end":2107,"column_start":2,"column_end":14}},{"value":"/   for i in 0 .. x.len() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422306,"byte_end":422335,"line_start":2108,"line_end":2108,"column_start":2,"column_end":31}},{"value":"/     assert_eq!(*x.get_unchecked(i), (&*x)[i]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422337,"byte_end":422387,"line_start":2109,"line_end":2109,"column_start":2,"column_end":52}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422389,"byte_end":422396,"line_start":2110,"line_end":2110,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422398,"byte_end":422403,"line_start":2111,"line_end":2111,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422405,"byte_end":422412,"line_start":2112,"line_end":2112,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422414,"byte_end":422417,"line_start":2113,"line_end":2113,"column_start":2,"column_end":5}},{"value":"/ [`.as_mut_bitptr()`]: Self::as_mut_bitptr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422419,"byte_end":422464,"line_start":2114,"line_end":2114,"column_start":2,"column_end":47}},{"value":"/ [`from_raw_parts`]: crate::slice::from_raw_parts","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422466,"byte_end":422518,"line_start":2115,"line_end":2115,"column_start":2,"column_end":54}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422520,"byte_end":422537,"line_start":2116,"line_end":2116,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3450},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423827,"byte_end":423840,"line_start":2157,"line_end":2157,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitSlice<O, T>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable bit-pointer to the bit-slice’s region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable bit-pointer to the bit-slice’s region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422625,"byte_end":422695,"line_start":2121,"line_end":2121,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422697,"byte_end":422700,"line_start":2122,"line_end":2122,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-slice outlives the bit-pointer this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422702,"byte_end":422777,"line_start":2123,"line_end":2123,"column_start":2,"column_end":77}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422779,"byte_end":422844,"line_start":2124,"line_end":2124,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422846,"byte_end":422849,"line_start":2125,"line_end":2125,"column_start":2,"column_end":5}},{"value":"/ Modifying the container referenced by this bit-slice may cause its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422851,"byte_end":422921,"line_start":2126,"line_end":2126,"column_start":2,"column_end":72}},{"value":"/ buffer to be reällocated, which would also make any bit-pointers to it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":422923,"byte_end":422998,"line_start":2127,"line_end":2127,"column_start":2,"column_end":76}},{"value":"/ invalid.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423000,"byte_end":423012,"line_start":2128,"line_end":2128,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423014,"byte_end":423017,"line_start":2129,"line_end":2129,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423019,"byte_end":423033,"line_start":2130,"line_end":2130,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423035,"byte_end":423038,"line_start":2131,"line_end":2131,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423040,"byte_end":423142,"line_start":2132,"line_end":2132,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423144,"byte_end":423147,"line_start":2133,"line_end":2133,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423149,"byte_end":423170,"line_start":2134,"line_end":2134,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423172,"byte_end":423175,"line_start":2135,"line_end":2135,"column_start":2,"column_end":5}},{"value":"/ This returns `*mut BitSlice`, which is the equivalent of `*mut [T]`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423177,"byte_end":423248,"line_start":2136,"line_end":2136,"column_start":2,"column_end":73}},{"value":"/ instead of `*mut T`. The pointer encoding used requires more than one","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423250,"byte_end":423323,"line_start":2137,"line_end":2137,"column_start":2,"column_end":75}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423325,"byte_end":423399,"line_start":2138,"line_end":2138,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423401,"byte_end":423468,"line_start":2139,"line_end":2139,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423470,"byte_end":423473,"line_start":2140,"line_end":2140,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423475,"byte_end":423489,"line_start":2141,"line_end":2141,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423491,"byte_end":423494,"line_start":2142,"line_end":2142,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423496,"byte_end":423507,"line_start":2143,"line_end":2143,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423509,"byte_end":423536,"line_start":2144,"line_end":2144,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423538,"byte_end":423541,"line_start":2145,"line_end":2145,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423543,"byte_end":423584,"line_start":2146,"line_end":2146,"column_start":2,"column_end":43}},{"value":"/ let bits_ptr = bits.as_mut_ptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423586,"byte_end":423623,"line_start":2147,"line_end":2147,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423625,"byte_end":423628,"line_start":2148,"line_end":2148,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423630,"byte_end":423660,"line_start":2149,"line_end":2149,"column_start":2,"column_end":32}},{"value":"/   unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423662,"byte_end":423676,"line_start":2150,"line_end":2150,"column_start":2,"column_end":16}},{"value":"/     bits_ptr.add(i).write(i % 3 == 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423678,"byte_end":423720,"line_start":2151,"line_end":2151,"column_start":2,"column_end":44}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423722,"byte_end":423729,"line_start":2152,"line_end":2152,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423731,"byte_end":423736,"line_start":2153,"line_end":2153,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_raw_slice()[0], 0b0100_1001);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423738,"byte_end":423790,"line_start":2154,"line_end":2154,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423792,"byte_end":423799,"line_start":2155,"line_end":2155,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423801,"byte_end":423818,"line_start":2156,"line_end":2156,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3451},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425579,"byte_end":425594,"line_start":2205,"line_end":2205,"column_start":9,"column_end":24},"name":"as_bitptr_range","qualname":"<BitSlice<O, T>>::as_bitptr_range","value":"pub fn as_bitptr_range(&Self) -> BitPtrRange<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the two raw bit-pointers spanning the bit-slice.","sig":null,"attributes":[{"value":"/ Returns the two raw bit-pointers spanning the bit-slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423916,"byte_end":423976,"line_start":2161,"line_end":2161,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423978,"byte_end":423981,"line_start":2162,"line_end":2162,"column_start":2,"column_end":5}},{"value":"/ The returned range is half-open, which means that the end bit-pointer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":423983,"byte_end":424056,"line_start":2163,"line_end":2163,"column_start":2,"column_end":75}},{"value":"/ points *one past* the last bit of the bit-slice. This way, an empty","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424058,"byte_end":424129,"line_start":2164,"line_end":2164,"column_start":2,"column_end":73}},{"value":"/ bit-slice is represented by two equal bit-pointers, and the difference","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424131,"byte_end":424205,"line_start":2165,"line_end":2165,"column_start":2,"column_end":76}},{"value":"/ between the two bit-pointers represents the size of the bit-slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424207,"byte_end":424277,"line_start":2166,"line_end":2166,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424279,"byte_end":424282,"line_start":2167,"line_end":2167,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitptr`] for warnings on using these bit-pointers. The end","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424284,"byte_end":424355,"line_start":2168,"line_end":2168,"column_start":2,"column_end":73}},{"value":"/ bit-pointer requires extra caution, as it does not point to a valid bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424357,"byte_end":424432,"line_start":2169,"line_end":2169,"column_start":2,"column_end":77}},{"value":"/ in the bit-slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424434,"byte_end":424455,"line_start":2170,"line_end":2170,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424457,"byte_end":424460,"line_start":2171,"line_end":2171,"column_start":2,"column_end":5}},{"value":"/ This function allows a more direct access to bit-pointers, without","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424462,"byte_end":424532,"line_start":2172,"line_end":2172,"column_start":2,"column_end":72}},{"value":"/ paying the cost of encoding into a `*BitSlice`, at the cost of no longer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424534,"byte_end":424610,"line_start":2173,"line_end":2173,"column_start":2,"column_end":78}},{"value":"/ fitting into ordinary Rust interfaces.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424612,"byte_end":424654,"line_start":2174,"line_end":2174,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424656,"byte_end":424659,"line_start":2175,"line_end":2175,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424661,"byte_end":424675,"line_start":2176,"line_end":2176,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424677,"byte_end":424680,"line_start":2177,"line_end":2177,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr_range`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr_range)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424682,"byte_end":424788,"line_start":2178,"line_end":2178,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424790,"byte_end":424793,"line_start":2179,"line_end":2179,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424795,"byte_end":424816,"line_start":2180,"line_end":2180,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424818,"byte_end":424821,"line_start":2181,"line_end":2181,"column_start":2,"column_end":5}},{"value":"/ This returns a dedicated structure, rather than a range of [`BitPtr`]s,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424823,"byte_end":424898,"line_start":2182,"line_end":2182,"column_start":2,"column_end":77}},{"value":"/ because the traits needed for non-`core` types to correctly operate in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424900,"byte_end":424974,"line_start":2183,"line_end":2183,"column_start":2,"column_end":76}},{"value":"/ ranges are still unstable. The structure can be converted into a range,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":424976,"byte_end":425051,"line_start":2184,"line_end":2184,"column_start":2,"column_end":77}},{"value":"/ but that range will not be an iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425053,"byte_end":425096,"line_start":2185,"line_end":2185,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425098,"byte_end":425101,"line_start":2186,"line_end":2186,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425103,"byte_end":425117,"line_start":2187,"line_end":2187,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425119,"byte_end":425122,"line_start":2188,"line_end":2188,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425124,"byte_end":425135,"line_start":2189,"line_end":2189,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425137,"byte_end":425164,"line_start":2190,"line_end":2190,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425166,"byte_end":425169,"line_start":2191,"line_end":2191,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425171,"byte_end":425207,"line_start":2192,"line_end":2192,"column_start":2,"column_end":38}},{"value":"/ let mid_ptr = bits.get(2).unwrap().into_bitptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425209,"byte_end":425262,"line_start":2193,"line_end":2193,"column_start":2,"column_end":55}},{"value":"/ let mut range = bits.as_bitptr_range();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425264,"byte_end":425307,"line_start":2194,"line_end":2194,"column_start":2,"column_end":45}},{"value":"/ assert!(range.contains(&mid_ptr));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425309,"byte_end":425347,"line_start":2195,"line_end":2195,"column_start":2,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425349,"byte_end":425361,"line_start":2196,"line_end":2196,"column_start":2,"column_end":14}},{"value":"/   assert!(!range.next().unwrap().read());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425363,"byte_end":425408,"line_start":2197,"line_end":2197,"column_start":2,"column_end":47}},{"value":"/   assert!(range.next_back().unwrap().read())","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425410,"byte_end":425458,"line_start":2198,"line_end":2198,"column_start":2,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425460,"byte_end":425465,"line_start":2199,"line_end":2199,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425467,"byte_end":425474,"line_start":2200,"line_end":2200,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425476,"byte_end":425479,"line_start":2201,"line_end":2201,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425481,"byte_end":425515,"line_start":2202,"line_end":2202,"column_start":2,"column_end":36}},{"value":"/ [`as_bitptr`]: Self::as_bitptr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425517,"byte_end":425551,"line_start":2203,"line_end":2203,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425553,"byte_end":425570,"line_start":2204,"line_end":2204,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3452},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427111,"byte_end":427130,"line_start":2248,"line_end":2248,"column_start":9,"column_end":28},"name":"as_mut_bitptr_range","qualname":"<BitSlice<O, T>>::as_mut_bitptr_range","value":"pub fn as_mut_bitptr_range(&mut Self) -> BitPtrRange<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the two unsafe mutable bit-pointers spanning the bit-slice.","sig":null,"attributes":[{"value":"/ Returns the two unsafe mutable bit-pointers spanning the bit-slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425675,"byte_end":425746,"line_start":2209,"line_end":2209,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425748,"byte_end":425751,"line_start":2210,"line_end":2210,"column_start":2,"column_end":5}},{"value":"/ The returned range is half-open, which means that the end bit-pointer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425753,"byte_end":425826,"line_start":2211,"line_end":2211,"column_start":2,"column_end":75}},{"value":"/ points *one past* the last bitt of the bit-slice. This way, an empty","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425828,"byte_end":425900,"line_start":2212,"line_end":2212,"column_start":2,"column_end":74}},{"value":"/ bit-slice is represented by two equal bit-pointers, and the difference","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425902,"byte_end":425976,"line_start":2213,"line_end":2213,"column_start":2,"column_end":76}},{"value":"/ between the two bit-pointers represents the size of the bit-slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":425978,"byte_end":426048,"line_start":2214,"line_end":2214,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426050,"byte_end":426053,"line_start":2215,"line_end":2215,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitptr`] for warnings on using these bit-pointers. The end","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426055,"byte_end":426130,"line_start":2216,"line_end":2216,"column_start":2,"column_end":77}},{"value":"/ bit-pointer requires extra caution, as it does not point to a valid bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426132,"byte_end":426207,"line_start":2217,"line_end":2217,"column_start":2,"column_end":77}},{"value":"/ in the bit-slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426209,"byte_end":426230,"line_start":2218,"line_end":2218,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426232,"byte_end":426235,"line_start":2219,"line_end":2219,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426237,"byte_end":426251,"line_start":2220,"line_end":2220,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426253,"byte_end":426256,"line_start":2221,"line_end":2221,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr_range`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr_range)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426258,"byte_end":426372,"line_start":2222,"line_end":2222,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426374,"byte_end":426377,"line_start":2223,"line_end":2223,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426379,"byte_end":426400,"line_start":2224,"line_end":2224,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426402,"byte_end":426405,"line_start":2225,"line_end":2225,"column_start":2,"column_end":5}},{"value":"/ This returns a dedicated structure, rather than a range of [`BitPtr`]s,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426407,"byte_end":426482,"line_start":2226,"line_end":2226,"column_start":2,"column_end":77}},{"value":"/ because the traits needed for non-`core` types to correctly operate in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426484,"byte_end":426558,"line_start":2227,"line_end":2227,"column_start":2,"column_end":76}},{"value":"/ ranges are still unstable. The structure can be converted into a range,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426560,"byte_end":426635,"line_start":2228,"line_end":2228,"column_start":2,"column_end":77}},{"value":"/ but that range will not be an iterator.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426637,"byte_end":426680,"line_start":2229,"line_end":2229,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426682,"byte_end":426685,"line_start":2230,"line_end":2230,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426687,"byte_end":426701,"line_start":2231,"line_end":2231,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426703,"byte_end":426706,"line_start":2232,"line_end":2232,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426708,"byte_end":426719,"line_start":2233,"line_end":2233,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426721,"byte_end":426748,"line_start":2234,"line_end":2234,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr as bv_ptr;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426750,"byte_end":426780,"line_start":2235,"line_end":2235,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426782,"byte_end":426785,"line_start":2236,"line_end":2236,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426787,"byte_end":426810,"line_start":2237,"line_end":2237,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426812,"byte_end":426856,"line_start":2238,"line_end":2238,"column_start":2,"column_end":46}},{"value":"/ for mut bitptr in bits.as_mut_bitptr_range() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426858,"byte_end":426908,"line_start":2239,"line_end":2239,"column_start":2,"column_end":52}},{"value":"/   unsafe { bv_ptr::write(bitptr, true); }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426910,"byte_end":426955,"line_start":2240,"line_end":2240,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426957,"byte_end":426962,"line_start":2241,"line_end":2241,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, !0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426964,"byte_end":426989,"line_start":2242,"line_end":2242,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":426991,"byte_end":426998,"line_start":2243,"line_end":2243,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427000,"byte_end":427003,"line_start":2244,"line_end":2244,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427005,"byte_end":427039,"line_start":2245,"line_end":2245,"column_start":2,"column_end":36}},{"value":"/ [`as_mut_bitptr`]: Self::as_mut_bitptr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427041,"byte_end":427083,"line_start":2246,"line_end":2246,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427085,"byte_end":427102,"line_start":2247,"line_end":2247,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":3453},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428395,"byte_end":428405,"line_start":2287,"line_end":2287,"column_start":9,"column_end":19},"name":"bit_domain","qualname":"<BitSlice<O, T>>::bit_domain","value":"pub fn bit_domain(&Self) -> BitDomain<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into subslices at alias boundaries.","sig":null,"attributes":[{"value":"/ Splits the slice into subslices at alias boundaries.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427217,"byte_end":427273,"line_start":2252,"line_end":2252,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427275,"byte_end":427278,"line_start":2253,"line_end":2253,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427280,"byte_end":427356,"line_start":2254,"line_end":2254,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427358,"byte_end":427431,"line_start":2255,"line_end":2255,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427433,"byte_end":427505,"line_start":2256,"line_end":2256,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427507,"byte_end":427582,"line_start":2257,"line_end":2257,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427584,"byte_end":427598,"line_start":2258,"line_end":2258,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427600,"byte_end":427603,"line_start":2259,"line_end":2259,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`BitDomain`] splitting in its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427605,"byte_end":427667,"line_start":2260,"line_end":2260,"column_start":2,"column_end":64}},{"value":"/ documentation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427669,"byte_end":427687,"line_start":2261,"line_end":2261,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427689,"byte_end":427692,"line_start":2262,"line_end":2262,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427694,"byte_end":427708,"line_start":2263,"line_end":2263,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427710,"byte_end":427713,"line_start":2264,"line_end":2264,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427715,"byte_end":427726,"line_start":2265,"line_end":2265,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427728,"byte_end":427755,"line_start":2266,"line_end":2266,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427757,"byte_end":427760,"line_start":2267,"line_end":2267,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427762,"byte_end":427791,"line_start":2268,"line_end":2268,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427793,"byte_end":427836,"line_start":2269,"line_end":2269,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427838,"byte_end":427878,"line_start":2270,"line_end":2270,"column_start":2,"column_end":42}},{"value":"/ let bits: &BitSlice<Msb0, <u16 as BitStore>::Alias> = &rest[.. 32];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427880,"byte_end":427951,"line_start":2271,"line_end":2271,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427953,"byte_end":427956,"line_start":2272,"line_end":2272,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427958,"byte_end":427991,"line_start":2273,"line_end":2273,"column_start":2,"column_end":35}},{"value":"/   .bit_domain()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":427993,"byte_end":428012,"line_start":2274,"line_end":2274,"column_start":2,"column_end":21}},{"value":"/   .region()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428014,"byte_end":428029,"line_start":2275,"line_end":2275,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428031,"byte_end":428047,"line_start":2276,"line_end":2276,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(head.len(), 8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428049,"byte_end":428079,"line_start":2277,"line_end":2277,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(tail.len(), 8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428081,"byte_end":428111,"line_start":2278,"line_end":2278,"column_start":2,"column_end":32}},{"value":"/ let _: &BitSlice<Msb0, <u16 as BitStore>::Alias> = head;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428113,"byte_end":428173,"line_start":2279,"line_end":2279,"column_start":2,"column_end":62}},{"value":"/ let _: &BitSlice<Msb0, <u16 as BitStore>::Alias> = tail;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428175,"byte_end":428235,"line_start":2280,"line_end":2280,"column_start":2,"column_end":62}},{"value":"/ let _: &BitSlice<Msb0, u16> = body;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428237,"byte_end":428276,"line_start":2281,"line_end":2281,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428278,"byte_end":428285,"line_start":2282,"line_end":2282,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428287,"byte_end":428290,"line_start":2283,"line_end":2283,"column_start":2,"column_end":5}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428292,"byte_end":428335,"line_start":2284,"line_end":2284,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428337,"byte_end":428354,"line_start":2285,"line_end":2285,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428356,"byte_end":428386,"line_start":2286,"line_end":2286,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3454},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429680,"byte_end":429694,"line_start":2327,"line_end":2327,"column_start":9,"column_end":23},"name":"bit_domain_mut","qualname":"<BitSlice<O, T>>::bit_domain_mut","value":"pub fn bit_domain_mut(&mut Self) -> BitDomainMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into subslices at alias boundaries.","sig":null,"attributes":[{"value":"/ Splits the slice into subslices at alias boundaries.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428462,"byte_end":428518,"line_start":2291,"line_end":2291,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428520,"byte_end":428523,"line_start":2292,"line_end":2292,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428525,"byte_end":428601,"line_start":2293,"line_end":2293,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428603,"byte_end":428676,"line_start":2294,"line_end":2294,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428678,"byte_end":428750,"line_start":2295,"line_end":2295,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428752,"byte_end":428827,"line_start":2296,"line_end":2296,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428829,"byte_end":428843,"line_start":2297,"line_end":2297,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428845,"byte_end":428848,"line_start":2298,"line_end":2298,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`BitDomainMut`] splitting in its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428850,"byte_end":428915,"line_start":2299,"line_end":2299,"column_start":2,"column_end":67}},{"value":"/ documentation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428917,"byte_end":428935,"line_start":2300,"line_end":2300,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428937,"byte_end":428940,"line_start":2301,"line_end":2301,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428942,"byte_end":428956,"line_start":2302,"line_end":2302,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428958,"byte_end":428961,"line_start":2303,"line_end":2303,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428963,"byte_end":428974,"line_start":2304,"line_end":2304,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":428976,"byte_end":429003,"line_start":2305,"line_end":2305,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429005,"byte_end":429008,"line_start":2306,"line_end":2306,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429010,"byte_end":429039,"line_start":2307,"line_end":2307,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429041,"byte_end":429084,"line_start":2308,"line_end":2308,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429086,"byte_end":429126,"line_start":2309,"line_end":2309,"column_start":2,"column_end":42}},{"value":"/ let bits: &mut BitSlice<Msb0, <u16 as BitStore>::Alias>","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429128,"byte_end":429187,"line_start":2310,"line_end":2310,"column_start":2,"column_end":61}},{"value":"/   = &mut rest[.. 32];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429189,"byte_end":429214,"line_start":2311,"line_end":2311,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429216,"byte_end":429219,"line_start":2312,"line_end":2312,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429221,"byte_end":429254,"line_start":2313,"line_end":2313,"column_start":2,"column_end":35}},{"value":"/   .bit_domain_mut()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429256,"byte_end":429279,"line_start":2314,"line_end":2314,"column_start":2,"column_end":25}},{"value":"/   .region()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429281,"byte_end":429296,"line_start":2315,"line_end":2315,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429298,"byte_end":429314,"line_start":2316,"line_end":2316,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(head.len(), 8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429316,"byte_end":429346,"line_start":2317,"line_end":2317,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(tail.len(), 8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429348,"byte_end":429378,"line_start":2318,"line_end":2318,"column_start":2,"column_end":32}},{"value":"/ let _: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = head;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429380,"byte_end":429444,"line_start":2319,"line_end":2319,"column_start":2,"column_end":66}},{"value":"/ let _: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = tail;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429446,"byte_end":429510,"line_start":2320,"line_end":2320,"column_start":2,"column_end":66}},{"value":"/ let _: &mut BitSlice<Msb0, u16> = body;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429512,"byte_end":429555,"line_start":2321,"line_end":2321,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429557,"byte_end":429564,"line_start":2322,"line_end":2322,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429566,"byte_end":429569,"line_start":2323,"line_end":2323,"column_start":2,"column_end":5}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429571,"byte_end":429620,"line_start":2324,"line_end":2324,"column_start":2,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429622,"byte_end":429639,"line_start":2325,"line_end":2325,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429641,"byte_end":429671,"line_start":2326,"line_end":2326,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3455},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430899,"byte_end":430905,"line_start":2366,"line_end":2366,"column_start":9,"column_end":15},"name":"domain","qualname":"<BitSlice<O, T>>::domain","value":"pub fn domain(&Self) -> Domain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice, split at alias\n boundaries.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice, split at alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429761,"byte_end":429829,"line_start":2331,"line_end":2331,"column_start":2,"column_end":70}},{"value":"/ boundaries.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429831,"byte_end":429846,"line_start":2332,"line_end":2332,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429848,"byte_end":429851,"line_start":2333,"line_end":2333,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429853,"byte_end":429929,"line_start":2334,"line_end":2334,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":429931,"byte_end":430004,"line_start":2335,"line_end":2335,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430006,"byte_end":430078,"line_start":2336,"line_end":2336,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430080,"byte_end":430155,"line_start":2337,"line_end":2337,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430157,"byte_end":430171,"line_start":2338,"line_end":2338,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430173,"byte_end":430176,"line_start":2339,"line_end":2339,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`Domain`] splitting in its documentation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430178,"byte_end":430252,"line_start":2340,"line_end":2340,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430254,"byte_end":430257,"line_start":2341,"line_end":2341,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430259,"byte_end":430273,"line_start":2342,"line_end":2342,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430275,"byte_end":430278,"line_start":2343,"line_end":2343,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430280,"byte_end":430291,"line_start":2344,"line_end":2344,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430293,"byte_end":430320,"line_start":2345,"line_end":2345,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430322,"byte_end":430325,"line_start":2346,"line_end":2346,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430327,"byte_end":430356,"line_start":2347,"line_end":2347,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430358,"byte_end":430401,"line_start":2348,"line_end":2348,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430403,"byte_end":430443,"line_start":2349,"line_end":2349,"column_start":2,"column_end":42}},{"value":"/ let bits: &BitSlice<Msb0, <u16 as BitStore>::Alias> = &rest[.. 32];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430445,"byte_end":430516,"line_start":2350,"line_end":2350,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430518,"byte_end":430521,"line_start":2351,"line_end":2351,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430523,"byte_end":430556,"line_start":2352,"line_end":2352,"column_start":2,"column_end":35}},{"value":"/   .domain()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430558,"byte_end":430573,"line_start":2353,"line_end":2353,"column_start":2,"column_end":17}},{"value":"/   .region()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430575,"byte_end":430590,"line_start":2354,"line_end":2354,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430592,"byte_end":430608,"line_start":2355,"line_end":2355,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(body.len(), 1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430610,"byte_end":430640,"line_start":2356,"line_end":2356,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430642,"byte_end":430645,"line_start":2357,"line_end":2357,"column_start":2,"column_end":5}},{"value":"/ let _: &<u16 as BitStore>::Alias = head.unwrap().1;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430647,"byte_end":430702,"line_start":2358,"line_end":2358,"column_start":2,"column_end":57}},{"value":"/ let _: &<u16 as BitStore>::Alias = tail.unwrap().0;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430704,"byte_end":430759,"line_start":2359,"line_end":2359,"column_start":2,"column_end":57}},{"value":"/ let _: &[u16] = body;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430761,"byte_end":430786,"line_start":2360,"line_end":2360,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430788,"byte_end":430795,"line_start":2361,"line_end":2361,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430797,"byte_end":430800,"line_start":2362,"line_end":2362,"column_start":2,"column_end":5}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430802,"byte_end":430839,"line_start":2363,"line_end":2363,"column_start":2,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430841,"byte_end":430858,"line_start":2364,"line_end":2364,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430860,"byte_end":430890,"line_start":2365,"line_end":2365,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3456},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432170,"byte_end":432180,"line_start":2407,"line_end":2407,"column_start":9,"column_end":19},"name":"domain_mut","qualname":"<BitSlice<O, T>>::domain_mut","value":"pub fn domain_mut(&mut Self) -> DomainMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice, split at alias\n boundaries.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice, split at alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":430953,"byte_end":431021,"line_start":2370,"line_end":2370,"column_start":2,"column_end":70}},{"value":"/ boundaries.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431023,"byte_end":431038,"line_start":2371,"line_end":2371,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431040,"byte_end":431043,"line_start":2372,"line_end":2372,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431045,"byte_end":431121,"line_start":2373,"line_end":2373,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431123,"byte_end":431196,"line_start":2374,"line_end":2374,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431198,"byte_end":431270,"line_start":2375,"line_end":2375,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431272,"byte_end":431347,"line_start":2376,"line_end":2376,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431349,"byte_end":431363,"line_start":2377,"line_end":2377,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431365,"byte_end":431368,"line_start":2378,"line_end":2378,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`DomainMut`] splitting in its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431370,"byte_end":431432,"line_start":2379,"line_end":2379,"column_start":2,"column_end":64}},{"value":"/ documentation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431434,"byte_end":431452,"line_start":2380,"line_end":2380,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431454,"byte_end":431457,"line_start":2381,"line_end":2381,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431459,"byte_end":431473,"line_start":2382,"line_end":2382,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431475,"byte_end":431478,"line_start":2383,"line_end":2383,"column_start":2,"column_end":5}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431480,"byte_end":431483,"line_start":2384,"line_end":2384,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431485,"byte_end":431496,"line_start":2385,"line_end":2385,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431498,"byte_end":431525,"line_start":2386,"line_end":2386,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431527,"byte_end":431530,"line_start":2387,"line_end":2387,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431532,"byte_end":431561,"line_start":2388,"line_end":2388,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431563,"byte_end":431606,"line_start":2389,"line_end":2389,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431608,"byte_end":431648,"line_start":2390,"line_end":2390,"column_start":2,"column_end":42}},{"value":"/ let bits: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = &mut rest[.. 32];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431650,"byte_end":431729,"line_start":2391,"line_end":2391,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431731,"byte_end":431734,"line_start":2392,"line_end":2392,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431736,"byte_end":431769,"line_start":2393,"line_end":2393,"column_start":2,"column_end":35}},{"value":"/   .domain_mut()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431771,"byte_end":431790,"line_start":2394,"line_end":2394,"column_start":2,"column_end":21}},{"value":"/   .region()","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431792,"byte_end":431807,"line_start":2395,"line_end":2395,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431809,"byte_end":431825,"line_start":2396,"line_end":2396,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(body.len(), 1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431827,"byte_end":431857,"line_start":2397,"line_end":2397,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431859,"byte_end":431862,"line_start":2398,"line_end":2398,"column_start":2,"column_end":5}},{"value":"/ let _: &<<u16 as BitStore>::Alias as BitStore>::Access = head.unwrap().1;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431864,"byte_end":431941,"line_start":2399,"line_end":2399,"column_start":2,"column_end":79}},{"value":"/ let _: &<<u16 as BitStore>::Alias as BitStore>::Access = tail.unwrap().0;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":431943,"byte_end":432020,"line_start":2400,"line_end":2400,"column_start":2,"column_end":79}},{"value":"/ let _: &mut [u16] = body;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432022,"byte_end":432051,"line_start":2401,"line_end":2401,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432053,"byte_end":432060,"line_start":2402,"line_end":2402,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432062,"byte_end":432065,"line_start":2403,"line_end":2403,"column_start":2,"column_end":5}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432067,"byte_end":432110,"line_start":2404,"line_end":2404,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432112,"byte_end":432129,"line_start":2405,"line_end":2405,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432131,"byte_end":432161,"line_start":2406,"line_end":2406,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3457},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432633,"byte_end":432645,"line_start":2421,"line_end":2421,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitSlice<O, T>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432238,"byte_end":432291,"line_start":2411,"line_end":2411,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432293,"byte_end":432296,"line_start":2412,"line_end":2412,"column_start":2,"column_end":5}},{"value":"/ The returned slice handle views all elements touched by `self`, and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432298,"byte_end":432369,"line_start":2413,"line_end":2413,"column_start":2,"column_end":73}},{"value":"/ marks them all with `self`’s current aliasing state. For a more precise","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432371,"byte_end":432448,"line_start":2414,"line_end":2414,"column_start":2,"column_end":77}},{"value":"/ view, or one that permits mutation, use [`.domain()`] or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432450,"byte_end":432510,"line_start":2415,"line_end":2415,"column_start":2,"column_end":62}},{"value":"/ [`.domain_mut()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432512,"byte_end":432534,"line_start":2416,"line_end":2416,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432536,"byte_end":432539,"line_start":2417,"line_end":2417,"column_start":2,"column_end":5}},{"value":"/ [`.domain()`]: Self::domain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432541,"byte_end":432572,"line_start":2418,"line_end":2418,"column_start":2,"column_end":33}},{"value":"/ [`.domain_mut()`]: Self::domain_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432574,"byte_end":432613,"line_start":2419,"line_end":2419,"column_start":2,"column_end":41}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432615,"byte_end":432624,"line_start":2420,"line_end":2420,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3472},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437348,"byte_end":437359,"line_start":2585,"line_end":2585,"column_start":9,"column_end":20},"name":"set_aliased","qualname":"<BitSlice<O, T>>::set_aliased","value":"pub fn set_aliased(&Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435852,"byte_end":435890,"line_start":2532,"line_end":2532,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435892,"byte_end":435895,"line_start":2533,"line_end":2533,"column_start":2,"column_end":5}},{"value":"/ This method supports writing through a shared reference to a bit that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435897,"byte_end":435970,"line_start":2534,"line_end":2534,"column_start":2,"column_end":75}},{"value":"/ may be observed by other `BitSlice` handles. It is only present when the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435972,"byte_end":436048,"line_start":2535,"line_end":2535,"column_start":2,"column_end":78}},{"value":"/ `T` type parameter supports such shared mutation (measured by the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436050,"byte_end":436119,"line_start":2536,"line_end":2536,"column_start":2,"column_end":71}},{"value":"/ [`Radium`] trait).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436121,"byte_end":436143,"line_start":2537,"line_end":2537,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436145,"byte_end":436148,"line_start":2538,"line_end":2538,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436150,"byte_end":436166,"line_start":2539,"line_end":2539,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436168,"byte_end":436171,"line_start":2540,"line_end":2540,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436173,"byte_end":436186,"line_start":2541,"line_end":2541,"column_start":2,"column_end":15}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436188,"byte_end":436262,"line_start":2542,"line_end":2542,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436264,"byte_end":436285,"line_start":2543,"line_end":2543,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436287,"byte_end":436361,"line_start":2544,"line_end":2544,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436363,"byte_end":436366,"line_start":2545,"line_end":2545,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436368,"byte_end":436381,"line_start":2546,"line_end":2546,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436383,"byte_end":436386,"line_start":2547,"line_end":2547,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436388,"byte_end":436463,"line_start":2548,"line_end":2548,"column_start":2,"column_end":77}},{"value":"/ If `T` is an [atomic], this will lock the memory bus for the referent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436465,"byte_end":436538,"line_start":2549,"line_end":2549,"column_start":2,"column_end":75}},{"value":"/ address, and may cause stalls.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436540,"byte_end":436574,"line_start":2550,"line_end":2550,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436576,"byte_end":436579,"line_start":2551,"line_end":2551,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436581,"byte_end":436593,"line_start":2552,"line_end":2552,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436595,"byte_end":436598,"line_start":2553,"line_end":2553,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is not less than [`self.len()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436600,"byte_end":436666,"line_start":2554,"line_end":2554,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436668,"byte_end":436671,"line_start":2555,"line_end":2555,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436673,"byte_end":436687,"line_start":2556,"line_end":2556,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436689,"byte_end":436692,"line_start":2557,"line_end":2557,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436694,"byte_end":436705,"line_start":2558,"line_end":2558,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436707,"byte_end":436734,"line_start":2559,"line_end":2559,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436736,"byte_end":436761,"line_start":2560,"line_end":2560,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436763,"byte_end":436766,"line_start":2561,"line_end":2561,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436768,"byte_end":436798,"line_start":2562,"line_end":2562,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436800,"byte_end":436840,"line_start":2563,"line_end":2563,"column_start":2,"column_end":42}},{"value":"/ let bits_2 = bits;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436842,"byte_end":436864,"line_start":2564,"line_end":2564,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436866,"byte_end":436869,"line_start":2565,"line_end":2565,"column_start":2,"column_end":5}},{"value":"/ bits.set_aliased(1, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436871,"byte_end":436901,"line_start":2566,"line_end":2566,"column_start":2,"column_end":32}},{"value":"/ assert!(bits_2[1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436903,"byte_end":436926,"line_start":2567,"line_end":2567,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436928,"byte_end":436935,"line_start":2568,"line_end":2568,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436937,"byte_end":436940,"line_start":2569,"line_end":2569,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":436942,"byte_end":437018,"line_start":2570,"line_end":2570,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437020,"byte_end":437023,"line_start":2571,"line_end":2571,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437025,"byte_end":437049,"line_start":2572,"line_end":2572,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437051,"byte_end":437078,"line_start":2573,"line_end":2573,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437080,"byte_end":437105,"line_start":2574,"line_end":2574,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437107,"byte_end":437110,"line_start":2575,"line_end":2575,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437112,"byte_end":437142,"line_start":2576,"line_end":2576,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Lsb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437144,"byte_end":437184,"line_start":2577,"line_end":2577,"column_start":2,"column_end":42}},{"value":"/ bits.set_aliased(8, false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437186,"byte_end":437217,"line_start":2578,"line_end":2578,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437219,"byte_end":437226,"line_start":2579,"line_end":2579,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437228,"byte_end":437231,"line_start":2580,"line_end":2580,"column_start":2,"column_end":5}},{"value":"/ [atomic]: core::sync::atomic","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437233,"byte_end":437265,"line_start":2581,"line_end":2581,"column_start":2,"column_end":34}},{"value":"/ [`Radium`]: radium::Radium","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437267,"byte_end":437297,"line_start":2582,"line_end":2582,"column_start":2,"column_end":32}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437299,"byte_end":437328,"line_start":2583,"line_end":2583,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437330,"byte_end":437339,"line_start":2584,"line_end":2584,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3473},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439043,"byte_end":439064,"line_start":2637,"line_end":2637,"column_start":16,"column_end":37},"name":"set_aliased_unchecked","qualname":"<BitSlice<O, T>>::set_aliased_unchecked","value":"pub unsafe fn set_aliased_unchecked(&Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index, without doing bounds checking.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437510,"byte_end":437579,"line_start":2592,"line_end":2592,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437581,"byte_end":437584,"line_start":2593,"line_end":2593,"column_start":2,"column_end":5}},{"value":"/ This method supports writing through a shared reference to a bit that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437586,"byte_end":437659,"line_start":2594,"line_end":2594,"column_start":2,"column_end":75}},{"value":"/ may be observed by other `BitSlice` handles. It is only present when the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437661,"byte_end":437737,"line_start":2595,"line_end":2595,"column_start":2,"column_end":78}},{"value":"/ `T` type parameter supports such shared mutation (measured by the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437739,"byte_end":437808,"line_start":2596,"line_end":2596,"column_start":2,"column_end":71}},{"value":"/ [`Radium`] trait).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437810,"byte_end":437832,"line_start":2597,"line_end":2597,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437834,"byte_end":437837,"line_start":2598,"line_end":2598,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437839,"byte_end":437852,"line_start":2599,"line_end":2599,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437854,"byte_end":437857,"line_start":2600,"line_end":2600,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`. If `index` is out of bounds, then","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437859,"byte_end":437934,"line_start":2601,"line_end":2601,"column_start":2,"column_end":77}},{"value":"/ the memory access is incorrect, and its behavior is unspecified. If `T`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":437936,"byte_end":438011,"line_start":2602,"line_end":2602,"column_start":2,"column_end":77}},{"value":"/ is an [atomic], this will lock the memory bus for the referent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438013,"byte_end":438079,"line_start":2603,"line_end":2603,"column_start":2,"column_end":68}},{"value":"/ address, and may cause stalls.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438081,"byte_end":438115,"line_start":2604,"line_end":2604,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438117,"byte_end":438120,"line_start":2605,"line_end":2605,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438122,"byte_end":438134,"line_start":2606,"line_end":2606,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438136,"byte_end":438139,"line_start":2607,"line_end":2607,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438141,"byte_end":438216,"line_start":2608,"line_end":2608,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438218,"byte_end":438289,"line_start":2609,"line_end":2609,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438291,"byte_end":438361,"line_start":2610,"line_end":2610,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438363,"byte_end":438411,"line_start":2611,"line_end":2611,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438413,"byte_end":438416,"line_start":2612,"line_end":2612,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438418,"byte_end":438489,"line_start":2613,"line_end":2613,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438491,"byte_end":438564,"line_start":2614,"line_end":2614,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438566,"byte_end":438576,"line_start":2615,"line_end":2615,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438578,"byte_end":438581,"line_start":2616,"line_end":2616,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438583,"byte_end":438597,"line_start":2617,"line_end":2617,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438599,"byte_end":438602,"line_start":2618,"line_end":2618,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438604,"byte_end":438615,"line_start":2619,"line_end":2619,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438617,"byte_end":438644,"line_start":2620,"line_end":2620,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438646,"byte_end":438671,"line_start":2621,"line_end":2621,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438673,"byte_end":438676,"line_start":2622,"line_end":2622,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438678,"byte_end":438708,"line_start":2623,"line_end":2623,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438710,"byte_end":438750,"line_start":2624,"line_end":2624,"column_start":2,"column_end":42}},{"value":"/ let bits_2 = bits;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438752,"byte_end":438774,"line_start":2625,"line_end":2625,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438776,"byte_end":438779,"line_start":2626,"line_end":2626,"column_start":2,"column_end":5}},{"value":"/ let (first, _) = bits.split_at(1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438781,"byte_end":438819,"line_start":2627,"line_end":2627,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(first.len(), 1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438821,"byte_end":438852,"line_start":2628,"line_end":2628,"column_start":2,"column_end":33}},{"value":"/ unsafe { first.set_aliased_unchecked(2, true); }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438854,"byte_end":438906,"line_start":2629,"line_end":2629,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438908,"byte_end":438911,"line_start":2630,"line_end":2630,"column_start":2,"column_end":5}},{"value":"/ assert!(bits_2[2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438913,"byte_end":438936,"line_start":2631,"line_end":2631,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438938,"byte_end":438945,"line_start":2632,"line_end":2632,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438947,"byte_end":438950,"line_start":2633,"line_end":2633,"column_start":2,"column_end":5}},{"value":"/ [atomic]: core::sync::atomic","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438952,"byte_end":438984,"line_start":2634,"line_end":2634,"column_start":2,"column_end":34}},{"value":"/ [`Radium`]: radium::Radium","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":438986,"byte_end":439016,"line_start":2635,"line_end":2635,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439018,"byte_end":439027,"line_start":2636,"line_end":2636,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3474},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439605,"byte_end":439625,"line_start":2653,"line_end":2653,"column_start":9,"column_end":29},"name":"split_at_aliased_mut","qualname":"<BitSlice<O, T>>::split_at_aliased_mut","value":"pub fn split_at_aliased_mut(&mut Self, usize) -> (&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439170,"byte_end":439215,"line_start":2641,"line_end":2641,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439217,"byte_end":439220,"line_start":2642,"line_end":2642,"column_start":2,"column_end":5}},{"value":"/ This method has the same behavior as [`.split_at_mut()`], except that it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439222,"byte_end":439298,"line_start":2643,"line_end":2643,"column_start":2,"column_end":78}},{"value":"/ does not apply an aliasing marker to the partitioned subslices.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439300,"byte_end":439367,"line_start":2644,"line_end":2644,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439369,"byte_end":439372,"line_start":2645,"line_end":2645,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439374,"byte_end":439386,"line_start":2646,"line_end":2646,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439388,"byte_end":439391,"line_start":2647,"line_end":2647,"column_start":2,"column_end":5}},{"value":"/ Because this method is defined only on `BitSlice`s whose `T` type is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439393,"byte_end":439465,"line_start":2648,"line_end":2648,"column_start":2,"column_end":74}},{"value":"/ alias-safe, the subslices do not need to be additionally marked.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439467,"byte_end":439535,"line_start":2649,"line_end":2649,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439537,"byte_end":439540,"line_start":2650,"line_end":2650,"column_start":2,"column_end":5}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439542,"byte_end":439585,"line_start":2651,"line_end":2651,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439587,"byte_end":439596,"line_start":2652,"line_end":2652,"column_start":2,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":3478},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440252,"byte_end":440260,"line_start":2677,"line_end":2677,"column_start":12,"column_end":20},"name":"MAX_BITS","qualname":"::slice::BitSlice::<O, T>::MAX_BITS","value":"usize","parent":{"krate":0,"index":3475},"children":[],"decl_id":null,"docs":" The inclusive maximum length of a `BitSlice<_, T>`.","sig":null,"attributes":[{"value":"/ The inclusive maximum length of a `BitSlice<_, T>`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439894,"byte_end":439949,"line_start":2668,"line_end":2668,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439951,"byte_end":439954,"line_start":2669,"line_end":2669,"column_start":2,"column_end":5}},{"value":"/ As `BitSlice` is zero-indexed, the largest possible index is one less","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439956,"byte_end":440029,"line_start":2670,"line_end":2670,"column_start":2,"column_end":75}},{"value":"/ than this value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440031,"byte_end":440051,"line_start":2671,"line_end":2671,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440053,"byte_end":440056,"line_start":2672,"line_end":2672,"column_start":2,"column_end":5}},{"value":"/ |CPU word width|         Value         |","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440058,"byte_end":440102,"line_start":2673,"line_end":2673,"column_start":2,"column_end":46}},{"value":"/ |-------------:|----------------------:|","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440104,"byte_end":440148,"line_start":2674,"line_end":2674,"column_start":2,"column_end":46}},{"value":"/ |32 bits       |     `0x1fff_ffff`     |","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440150,"byte_end":440194,"line_start":2675,"line_end":2675,"column_start":2,"column_end":46}},{"value":"/ |64 bits       |`0x1fff_ffff_ffff_ffff`|","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440196,"byte_end":440240,"line_start":2676,"line_end":2676,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":3479},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441097,"byte_end":441105,"line_start":2692,"line_end":2692,"column_start":12,"column_end":20},"name":"MAX_ELTS","qualname":"::slice::BitSlice::<O, T>::MAX_ELTS","value":"usize","parent":{"krate":0,"index":3475},"children":[],"decl_id":null,"docs":" The inclusive maximum length that a slice `[T]` can be for\n `BitSlice<_, T>` to cover it.","sig":null,"attributes":[{"value":"/ The inclusive maximum length that a slice `[T]` can be for","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440312,"byte_end":440374,"line_start":2678,"line_end":2678,"column_start":2,"column_end":64}},{"value":"/ `BitSlice<_, T>` to cover it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440376,"byte_end":440409,"line_start":2679,"line_end":2679,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440411,"byte_end":440414,"line_start":2680,"line_end":2680,"column_start":2,"column_end":5}},{"value":"/ A `BitSlice<_, T>` that begins in the interior of an element and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440416,"byte_end":440484,"line_start":2681,"line_end":2681,"column_start":2,"column_end":70}},{"value":"/ contains the maximum number of bits will extend one element past the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440486,"byte_end":440558,"line_start":2682,"line_end":2682,"column_start":2,"column_end":74}},{"value":"/ cutoff that would occur if the slice began at the zeroth bit. Such a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440560,"byte_end":440632,"line_start":2683,"line_end":2683,"column_start":2,"column_end":74}},{"value":"/ slice must be manually constructed, but will not otherwise fail.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440634,"byte_end":440702,"line_start":2684,"line_end":2684,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440704,"byte_end":440707,"line_start":2685,"line_end":2685,"column_start":2,"column_end":5}},{"value":"/ |Type Bits|Max Elements (32-bit)| Max Elements (64-bit) |","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440709,"byte_end":440770,"line_start":2686,"line_end":2686,"column_start":2,"column_end":63}},{"value":"/ |--------:|--------------------:|----------------------:|","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440772,"byte_end":440833,"line_start":2687,"line_end":2687,"column_start":2,"column_end":63}},{"value":"/ |        8|    `0x0400_0001`    |`0x0400_0000_0000_0001`|","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440835,"byte_end":440896,"line_start":2688,"line_end":2688,"column_start":2,"column_end":63}},{"value":"/ |       16|    `0x0200_0001`    |`0x0200_0000_0000_0001`|","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440898,"byte_end":440959,"line_start":2689,"line_end":2689,"column_start":2,"column_end":63}},{"value":"/ |       32|    `0x0100_0001`    |`0x0100_0000_0000_0001`|","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":440961,"byte_end":441022,"line_start":2690,"line_end":2690,"column_start":2,"column_end":63}},{"value":"/ |       64|    `0x0080_0001`    |`0x0080_0000_0000_0001`|","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441024,"byte_end":441085,"line_start":2691,"line_end":2691,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3483},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441650,"byte_end":441659,"line_start":2717,"line_end":2717,"column_start":9,"column_end":18},"name":"to_bitvec","qualname":"<BitSlice<O, T>>::to_bitvec","value":"pub fn to_bitvec(&Self) -> BitVec<O, T::Unalias>","parent":null,"children":[],"decl_id":null,"docs":" Copies `self` into a new [`BitVec`].","sig":null,"attributes":[{"value":"/ Copies `self` into a new [`BitVec`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441248,"byte_end":441288,"line_start":2701,"line_end":2701,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441290,"byte_end":441293,"line_start":2702,"line_end":2702,"column_start":2,"column_end":5}},{"value":"/ This resets any alias markings from `self`, since the returned buffer is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441295,"byte_end":441371,"line_start":2703,"line_end":2703,"column_start":2,"column_end":78}},{"value":"/ known to be newly allocated and thus unaliased.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441373,"byte_end":441424,"line_start":2704,"line_end":2704,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441426,"byte_end":441429,"line_start":2705,"line_end":2705,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441431,"byte_end":441445,"line_start":2706,"line_end":2706,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441447,"byte_end":441450,"line_start":2707,"line_end":2707,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441452,"byte_end":441463,"line_start":2708,"line_end":2708,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441465,"byte_end":441492,"line_start":2709,"line_end":2709,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441494,"byte_end":441497,"line_start":2710,"line_end":2710,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441499,"byte_end":441532,"line_start":2711,"line_end":2711,"column_start":2,"column_end":35}},{"value":"/ let bv = bits.to_bitvec();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441534,"byte_end":441564,"line_start":2712,"line_end":2712,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits, bv);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441566,"byte_end":441591,"line_start":2713,"line_end":2713,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441593,"byte_end":441600,"line_start":2714,"line_end":2714,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441602,"byte_end":441605,"line_start":2715,"line_end":2715,"column_start":2,"column_end":5}},{"value":"/ [`BitVec`]: crate::vec::BitVec","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441607,"byte_end":441641,"line_start":2716,"line_end":2716,"column_start":2,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":3484},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":442795,"byte_end":442819,"line_start":2759,"line_end":2759,"column_start":15,"column_end":39},"name":"from_raw_parts_unchecked","qualname":"::slice::from_raw_parts_unchecked","value":"pub unsafe fn from_raw_parts_unchecked<'a, O, T>(BitPtr<Const, O, T>, usize)\n-> &'a BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts`], without checking the\n`len` argument.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`from_raw_parts`], without checking the\n`len` argument.\n\n# Parameters\n\n- `data`: A `BitPtr` to a dereferencable region of memory.\n- `len`: The length, in bits, of the region beginning at `*data`. This is not\n  checked against the maximum value, and is encoded directly into the bit-slice\n  reference. If it exceeds [`BitSlice::MAX_BITS`], it will be modulated to fit\n  (the high bits will be discarded).\n\n# Returns\n\nA `&BitSlice` reference starting at `data` and running for `len & MAX_BITS`\nbits.\n\n# Safety\n\nSee [`from_raw_parts`].\n\n[`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS\n[`from_raw_parts`]: crate::slice::from_raw_parts\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":442087,"byte_end":442770,"line_start":2735,"line_end":2757,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":442771,"byte_end":442780,"line_start":2758,"line_end":2758,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":3488},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":443707,"byte_end":443735,"line_start":2794,"line_end":2794,"column_start":15,"column_end":43},"name":"from_raw_parts_unchecked_mut","qualname":"::slice::from_raw_parts_unchecked_mut","value":"pub unsafe fn from_raw_parts_unchecked_mut<'a, O, T>(BitPtr<Mut, O, T>, usize)\n-> &'a mut BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts_mut`], without checking\nthe `len` argument.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`from_raw_parts_mut`], without checking\nthe `len` argument.\n\n# Parameters\n\n- `data`: A `BitPtr` to a dereferencable region of memory.\n- `len`: The length, in bits, of the region beginning at `*data`. This is not\n  checked against the maximum value, and is encoded directly into the bit-slice\n  reference. If it exceeds [`BitSlice::MAX_BITS`], it will be modulated to fit\n  (the high bits will be discarded).\n\n# Returns\n\nA `&mut BitSlice` reference starting at `data` and running for `len & MAX_BITS`\nbits.\n\n# Safety\n\nSee [`from_raw_parts_mut`].\n\n[`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS\n[`from_raw_parts_mut`]: crate::slice::from_raw_parts_mut\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":442979,"byte_end":443682,"line_start":2770,"line_end":2792,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":443683,"byte_end":443692,"line_start":2793,"line_end":2793,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":3492},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"store","qualname":"::store","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","parent":null,"children":[{"krate":0,"index":3493},{"krate":0,"index":3494},{"krate":0,"index":3497},{"krate":0,"index":3498},{"krate":0,"index":3500},{"krate":0,"index":3503},{"krate":0,"index":3504},{"krate":0,"index":3505},{"krate":0,"index":3506},{"krate":0,"index":3509},{"krate":0,"index":3512},{"krate":0,"index":3513},{"krate":0,"index":3516},{"krate":0,"index":3519},{"krate":0,"index":3522},{"krate":0,"index":3535},{"krate":0,"index":7086},{"krate":0,"index":7099},{"krate":0,"index":7112},{"krate":0,"index":7124},{"krate":0,"index":7125},{"krate":0,"index":7126},{"krate":0,"index":7127},{"krate":0,"index":7140},{"krate":0,"index":7153},{"krate":0,"index":7165},{"krate":0,"index":7166},{"krate":0,"index":7167},{"krate":0,"index":7168},{"krate":0,"index":7181},{"krate":0,"index":7194},{"krate":0,"index":7206},{"krate":0,"index":7207},{"krate":0,"index":7208},{"krate":0,"index":7209},{"krate":0,"index":7222},{"krate":0,"index":7235},{"krate":0,"index":7247},{"krate":0,"index":7248},{"krate":0,"index":7249},{"krate":0,"index":7250},{"krate":0,"index":7263},{"krate":0,"index":7276},{"krate":0,"index":7288},{"krate":0,"index":7289},{"krate":0,"index":7290},{"krate":0,"index":3536},{"krate":0,"index":7291},{"krate":0,"index":7294},{"krate":0,"index":7306},{"krate":0,"index":7307},{"krate":0,"index":7310},{"krate":0,"index":7322},{"krate":0,"index":7323},{"krate":0,"index":7326},{"krate":0,"index":7338},{"krate":0,"index":7339},{"krate":0,"index":7342},{"krate":0,"index":7354},{"krate":0,"index":7355},{"krate":0,"index":7358},{"krate":0,"index":7370},{"krate":0,"index":3537}],"decl_id":null,"docs":" Memory modeling.","sig":null,"attributes":[{"value":"* Memory modeling.\n\nThis module provides the [`BitStore`] trait, which contains all of the logic\nrequired to perform memory accesses from a data structure handle.\n\n# `bitvec` Memory Model\n\n`bitvec` considers all memory within [`BitSlice`] regions as if it were composed\nof discrete bits, each divisible and indipendent from its neighbors, just as the\nRust memory model considers elements `T` in a slice `[T]`. Much as ordinary byte\nslices `[u8]` provide an API where each byte is distinct and independent from\nits neighbors, but the underlying processor silicon clusters them in words and\ncachelines, both the processor silicon *and* the Rust compiler require that bits\nin a `BitSlice` be grouped into memory elements, and collectively subjected to\naliasing rules within their batch.\n\n`bitvec` manages this through the [`BitStore`] trait. It is implemented on three\ntype families available from the Rust standard libraries:\n\n- [unsigned integers]\n- [atomic] unsigned integers\n- [`Cell`] wrappers of unsigned integers\n\n`bitvec` receives a memory region typed with one of these three families and\nwraps it in one of its data structures based on [`BitSlice`]. The target\nprocessor is responsible for handling any contention between memory elements;\nthis is irrelevant to the `bitvec` model. `bitvec` is solely responsible for\nproving to the Rust compiler that all memory accesses through its types are\ncorrectly managed according to the `&`/`&mut` shared/exclusion reference model,\nand the [`UnsafeCell`] shared-mutation model.\n\nThrough [`BitStore`], `bitvec` is able to demonstrate that `&mut BitSlice`\nreferences to a region of *bits* have no other `BitSlice` references capable of\nviewing those bits. However, `&mut BitSlice` references *may* have other\n`&BitSlice` references capable of viewing the memory elements at locations that\nit modifies, and the Rust compiler considers it undefined behavior for such\nconditions to allow racing writes and reads without synchronization.\n\nAs such, [`BitStore`] provides a closed type-system graph that the [`BitSlice`]\nAPI uses to mark events that can induce aliases to memory locations. When a\n`&mut BitSlice<_, T>` typed with an ordinary unsigned integer use any of the\nAPIs that call [`.split_at_mut()`], it transitions to\n`&mut BitSlice<_, T::Alias>`. The [`::Alias`] associated type is always a type\nthat manages aliasing references to a single memory location: either an [atomic]\nunsigned integer `T` or a [`Cell`] of the unsigned integer `T`. The Rust\nstandard library guarantees that these types will behave correctly when multiple\nreferences to a single location attempt to read from and write to it.\n\nThe [atomic] and [`Cell`] types stay as themselves when [`BitSlice`] introduces\naliasing conditions, as they are already alias-aware.\n\nLastly, the `bitvec` memory description model as implemented in the [`domain`]\nmodule is able to perform the inverse transition: where it can demonstrate a\nstatic awareness that the `&`/`&mut` exclusion rules are satisfied for a\nparticular element slice `[T]`, it may apply the [`::Unalias`] marker to undo\nany `::Alias`ing, and present a type that has no more aliasing protection than\nthat with which the memory region was initially declared.\n\nNamely, this means that the [atomic] and [`Cell`] wrappers will never be removed\nfrom a region that had them before it was given to `bitvec`, while a region of\nordinary integers may regain the ability to be viewed without synchrony guards\nif `bitvec` can prove safety in the [`domain`] module.\n\nIn order to retain `bitvec`’s promise that an `&mut BitSlice<_, T>` has the sole\nright of observation for all bits in its region, the unsigned integers alias to\na crate-internal wrapper over the alias-capable standard-library types. This\nwrapper forbids mutation through shared references, so two [`BitSlice`]\nreferences that alias a memory location, but do not overlap in bits, may not be\ncoërced to interfere with each other.\n\n[atomic]: core::sync::atomic\n[unsigned integers]: core::primitive\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`Cell`]: core::cell::Cell\n[`UnsafeCell`]: core::cell::UnsafeCell\n[`domain`]: crate::domain\n[`::Alias`]: crate::store::BitStore::Alias\n[`::Unalias`]: crate::store::BitStore::Unalias\n[`.split_at_mut()`]: crate::slice::BitSlice::split_at_mut\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":630358,"byte_end":634702,"line_start":1,"line_end":81,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":3522},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637265,"byte_end":637273,"line_start":149,"line_end":149,"column_start":11,"column_end":19},"name":"BitStore","qualname":"::store::BitStore","value":"BitStore: 'static + seal::Sealed + Debug","parent":null,"children":[{"krate":0,"index":3523},{"krate":0,"index":3524},{"krate":0,"index":3525},{"krate":0,"index":3526},{"krate":0,"index":3527},{"krate":0,"index":3528},{"krate":0,"index":3529},{"krate":0,"index":3531},{"krate":0,"index":3533}],"decl_id":null,"docs":" Common interface for memory regions.","sig":null,"attributes":[{"value":"* Common interface for memory regions.\n\nThis trait is used to describe how [`BitSlice`] regions interact with the memory\nbus when reading to or writing from locations. It manages the behavior required\nwhen locations are contended for write permissions by multiple handles, and\nensures that Rust’s `&`/`&mut` shared/exclusion system, as well as its\n[`UnsafeCell`] shared-mutation system, are upheld for individual bits as well as\nfor the memory operations that power the slice.\n\nThis trait is publicly implemented on the unsigned integers that implement\n[`BitRegister`], their [`Cell`] wrappers, and (if present) their [atomic]\nvariants. You may freely construct [`BitSlice`] regions over elements or slices\nof any of these types.\n\nShared [`BitSlice`] references (`&BitSlice<_, T: BitStore>`) permit multiple\nhandles to view the bits they describe. When `T` is a [`Cell`] or [atom], these\nhandles may use the methods [`.set_aliased()`] and [`.set_aliased_unchecked()`]\nto modify memory; when `T` is an ordinary integer, they may not.\n\nExclusive [`BitSlice`] references (`&mut BitSlice<_, T: BitStore>`) do not allow\nany other handle to view the bits they describe. However, other handles may view\nthe **memory locations** containing their bits! When `T` is a [`Cell`] or\n[atom], no special behavior occurs. When `T` is an ordinary integer, [`bitvec`]\ndetects the creation of multiple `&mut BitSlice<_, T>` handles that do not alias\nbits but *do* alias memory, and enforces that these handles use `Cell` or atomic\nbehavior to access the underlying memory, even though individual bits in the\nslices are not contended.\n\n# Integer Width Restricitons\n\nCurrently, [`bitvec`] is only tested on 32- and 64- bit architectures. This\nmeans that `u8`, `u16`, `u32`, and `usize` unconditionally implement `BitStore`,\nbut `u64` will only do so on 64-bit targets. This is a necessary restriction of\n`bitvec` internals. Please comment on [Issue #76] if this affects you.\n\n[Issue #76]: https://github.com/myrrlyn/bitvec/issues/76\n[atom]: core::sync::atomic\n[atomic]: core::sync::atomic\n[`BitSlice`]: crate::slice::BitSlice\n[`BitRegister`]: crate::mem::BitRegister\n[`Cell`]: core::cell::Cell\n[`UnsafeCell`]: core::cell::UnsafeCell\n[`bitvec`]: crate\n[`.set_aliased()`]: crate::slice::BitSlice::set_aliased\n[`.set_aliased_unchecked()`]: crate::slice::BitSlice::set_aliased_unchecked\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":634885,"byte_end":637254,"line_start":103,"line_end":148,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":3523},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637482,"byte_end":637485,"line_start":154,"line_end":154,"column_start":7,"column_end":10},"name":"Mem","qualname":"::store::BitStore::Mem","value":"type Mem: BitRegister + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":" The register type used in the slice region underlying a [`BitSlice`]\n handle. It is always an unsigned integer.","sig":null,"attributes":[{"value":"/ The register type used in the slice region underlying a [`BitSlice`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637309,"byte_end":637381,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/ handle. It is always an unsigned integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637383,"byte_end":637428,"line_start":151,"line_end":151,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637430,"byte_end":637433,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637435,"byte_end":637475,"line_start":153,"line_end":153,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3524},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637758,"byte_end":637764,"line_start":158,"line_end":158,"column_start":7,"column_end":13},"name":"Access","qualname":"::store::BitStore::Access","value":"type Access: BitAccess<Item = Self::Mem> + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":" A type that selects appropriate load/store instructions used for\n accessing the memory bus. It determines what instructions are used when\n moving a `Self::Mem` value between the processor and the memory system.\n","sig":null,"attributes":[{"value":"/ A type that selects appropriate load/store instructions used for","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637529,"byte_end":637597,"line_start":155,"line_end":155,"column_start":2,"column_end":70}},{"value":"/ accessing the memory bus. It determines what instructions are used when","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637599,"byte_end":637674,"line_start":156,"line_end":156,"column_start":2,"column_end":77}},{"value":"/ moving a `Self::Mem` value between the processor and the memory system.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637676,"byte_end":637751,"line_start":157,"line_end":157,"column_start":2,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":3525},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638073,"byte_end":638078,"line_start":164,"line_end":164,"column_start":7,"column_end":12},"name":"Alias","qualname":"::store::BitStore::Alias","value":"type Alias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":" A sibling `BitStore` implementor. It is used when a [`BitSlice`]\n introduces multiple handles that view the same memory location, and at\n least one of them has write permission to it.","sig":null,"attributes":[{"value":"/ A sibling `BitStore` implementor. It is used when a [`BitSlice`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637824,"byte_end":637892,"line_start":159,"line_end":159,"column_start":2,"column_end":70}},{"value":"/ introduces multiple handles that view the same memory location, and at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637894,"byte_end":637968,"line_start":160,"line_end":160,"column_start":2,"column_end":76}},{"value":"/ least one of them has write permission to it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637970,"byte_end":638019,"line_start":161,"line_end":161,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638021,"byte_end":638024,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638026,"byte_end":638066,"line_start":163,"line_end":163,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3526},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638292,"byte_end":638299,"line_start":169,"line_end":169,"column_start":7,"column_end":14},"name":"Unalias","qualname":"::store::BitStore::Unalias","value":"type Unalias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":" The inverse of `Alias`. It is used when a [`BitSlice`] removes the\n conditions that required a `T -> T::Alias` transition.","sig":null,"attributes":[{"value":"/ The inverse of `Alias`. It is used when a [`BitSlice`] removes the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638108,"byte_end":638178,"line_start":165,"line_end":165,"column_start":2,"column_end":72}},{"value":"/ conditions that required a `T -> T::Alias` transition.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638180,"byte_end":638238,"line_start":166,"line_end":166,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638240,"byte_end":638243,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638245,"byte_end":638285,"line_start":168,"line_end":168,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3527},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638417,"byte_end":638427,"line_start":173,"line_end":173,"column_start":5,"column_end":15},"name":"load_value","qualname":"::store::BitStore::load_value","value":"pub fn load_value(&Self) -> Self::Mem","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":" Loads a value out of the memory system according to the `::Access`\n rules.\n","sig":null,"attributes":[{"value":"/ Loads a value out of the memory system according to the `::Access`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638330,"byte_end":638400,"line_start":171,"line_end":171,"column_start":2,"column_end":72}},{"value":"/ rules.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638402,"byte_end":638412,"line_start":172,"line_end":172,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3528},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638532,"byte_end":638543,"line_start":176,"line_end":176,"column_start":5,"column_end":16},"name":"store_value","qualname":"::store::BitStore::store_value","value":"pub fn store_value(&mut Self, Self::Mem)","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":" Stores a value into the memory system according to the `::Access` rules.\n","sig":null,"attributes":[{"value":"/ Stores a value into the memory system according to the `::Access` rules.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638451,"byte_end":638527,"line_start":175,"line_end":175,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3529},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639144,"byte_end":639151,"line_start":198,"line_end":198,"column_start":5,"column_end":12},"name":"get_bit","qualname":"::store::BitStore::get_bit","value":"pub fn get_bit<O>(&Self, BitIdx<Self::Mem>) -> bool where O: BitOrder","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":" Reads a single bit out of the memory system according to the `::Access`\n rules. This is lifted from [`BitAccess`] so that it can be used\n elsewhere without additional casts.","sig":null,"attributes":[{"value":"/ Reads a single bit out of the memory system according to the `::Access`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638576,"byte_end":638651,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/ rules. This is lifted from [`BitAccess`] so that it can be used","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638653,"byte_end":638720,"line_start":179,"line_end":179,"column_start":2,"column_end":69}},{"value":"/ elsewhere without additional casts.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638722,"byte_end":638761,"line_start":180,"line_end":180,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638763,"byte_end":638766,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638768,"byte_end":638789,"line_start":182,"line_end":182,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638791,"byte_end":638794,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ - `O`: The ordering of bits within `Self::Mem` to use for looking up the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638796,"byte_end":638872,"line_start":184,"line_end":184,"column_start":2,"column_end":78}},{"value":"/   bit at `index`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638874,"byte_end":638895,"line_start":185,"line_end":185,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638897,"byte_end":638900,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638902,"byte_end":638918,"line_start":187,"line_end":187,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638920,"byte_end":638923,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638925,"byte_end":638938,"line_start":189,"line_end":189,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to read.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":638940,"byte_end":639004,"line_start":190,"line_end":190,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639006,"byte_end":639009,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639011,"byte_end":639024,"line_start":192,"line_end":192,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639026,"byte_end":639029,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ The value of the bit in `*self` at `index`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639031,"byte_end":639078,"line_start":194,"line_end":194,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639080,"byte_end":639083,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ [`BitAccess`]: crate::access::BitAccess","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639085,"byte_end":639128,"line_start":196,"line_end":196,"column_start":2,"column_end":45}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639130,"byte_end":639139,"line_start":197,"line_end":197,"column_start":2,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":3531},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639380,"byte_end":639397,"line_start":207,"line_end":207,"column_start":8,"column_end":25},"name":"__ALIGNED_TO_SIZE","qualname":"::store::BitStore::__ALIGNED_TO_SIZE","value":"[(); ]","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":" Require that all implementors are aligned to their width.\n","sig":null,"attributes":[{"value":"/ Require that all implementors are aligned to their width.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639295,"byte_end":639356,"line_start":205,"line_end":205,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":3533},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639529,"byte_end":639542,"line_start":212,"line_end":212,"column_start":8,"column_end":21},"name":"__ALIAS_WIDTH","qualname":"::store::BitStore::__ALIAS_WIDTH","value":"[(); ]","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":" Require that the `::Alias` associated type has the same width and\n alignment as `Self`.\n","sig":null,"attributes":[{"value":"/ Require that the `::Alias` associated type has the same width and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639410,"byte_end":639479,"line_start":209,"line_end":209,"column_start":2,"column_end":71}},{"value":"/ alignment as `Self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":639481,"byte_end":639505,"line_start":210,"line_end":210,"column_start":2,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":3538},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":643518,"byte_end":643524,"line_start":378,"line_end":378,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::store::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to seal `BitStore` against downstream implementation.","sig":null,"attributes":[{"value":"/ Marker trait to seal `BitStore` against downstream implementation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":643150,"byte_end":643220,"line_start":371,"line_end":371,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":643222,"byte_end":643225,"line_start":372,"line_end":372,"column_start":2,"column_end":5}},{"value":"/ This trait is public in the module, so that other modules in the crate","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":643227,"byte_end":643301,"line_start":373,"line_end":373,"column_start":2,"column_end":76}},{"value":"/ can use it, but so long as it is not exported by the crate root and this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":643303,"byte_end":643379,"line_start":374,"line_end":374,"column_start":2,"column_end":78}},{"value":"/ module is private, this trait effectively forbids downstream","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":643381,"byte_end":643445,"line_start":375,"line_end":375,"column_start":2,"column_end":66}},{"value":"/ implementation of the `BitStore` trait.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":643447,"byte_end":643490,"line_start":376,"line_end":376,"column_start":2,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":3539},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"view","qualname":"::view","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","parent":null,"children":[{"krate":0,"index":3540},{"krate":0,"index":3543},{"krate":0,"index":3544},{"krate":0,"index":3547},{"krate":0,"index":3550},{"krate":0,"index":3553},{"krate":0,"index":3559},{"krate":0,"index":3566},{"krate":0,"index":3573},{"krate":0,"index":3582},{"krate":0,"index":3585},{"krate":0,"index":3588},{"krate":0,"index":3593},{"krate":0,"index":3597},{"krate":0,"index":3601},{"krate":0,"index":3606}],"decl_id":null,"docs":" [`BitSlice`] view adapters for memory regions.","sig":null,"attributes":[{"value":"* [`BitSlice`] view adapters for memory regions.\n\nThe [`&BitSlice`][`BitSlice`] type is a referential view over existing memory.\nThe inherent constructor functions are awkward to call, as they require function\nsyntax rather than method syntax, and must provide a token for the memory type\nargument even though this is informed by the already-existing reference being\nused.\n\nThis module provides an extension trait, [`BitView`], which provides methods on\nmany memory types (all [`BitRegister`] integers, and slices and arrays of them)\nto construct [`BitSlice`] over those values.\n\nIn addition, the traits [`AsBits`] and [`AsBitsMut`] are analogues of [`AsRef`]\nand [`AsMut`], respectively. These traits have a blanket implementation for all\n`A: As{Ref,Mut}<[T: BitRegister]>`, so that any type that implements a view to a\nsuitable memory region automatically implements a view to that region’s bits.\n\nThese traits are distinct because [`BitView`] combines the im/mutable view\nfunctions into one trait, and can provide specialized implementations with a\nslight performance increase over the generic, but `AsBits{,Mut}` can fit in the\ngeneric type system of any library without undue effort.\n\n[`AsBits`]: crate::view::AsBits\n[`AsBitsMut`]: crate::view::AsBitsMut\n[`AsMut`]: core::convert::AsMut\n[`AsRef`]: core::convert::AsRef\n[`BitRegister`]: crate::mem::BitRegister\n[`BitSlice`]: crate::slice::BitSlice\n[`BitView`]: crate::view::BitView\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":645953,"byte_end":647396,"line_start":1,"line_end":30,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":3553},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648169,"byte_end":648176,"line_start":56,"line_end":56,"column_start":11,"column_end":18},"name":"BitView","qualname":"::view::BitView","value":"BitView","parent":null,"children":[{"krate":0,"index":3554},{"krate":0,"index":3555},{"krate":0,"index":3557}],"decl_id":null,"docs":" Creates a [`BitSlice`] view over some type that supports it.","sig":null,"attributes":[{"value":"* Creates a [`BitSlice`] view over some type that supports it.\n\nThis trait is implemented on all [`BitRegister`] types, and the arrays and slices\nof them that are supported by the standard library.\n\nThis means that until type-level integers are stabilized, only arrays in\n`[T: BitRegister; 0 ..= 64]` will implement the trait; wider arrays will need to\nreborrow as slices `[T]` in order to use the slice implementation.\n\nIf you have a type that contains a [`BitRegister`] type that can be viewed with\nthis trait, then you can implement this trait by forwarding to the interior\nview.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":647491,"byte_end":648158,"line_start":40,"line_end":55,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":3554},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648219,"byte_end":648224,"line_start":58,"line_end":58,"column_start":7,"column_end":12},"name":"Store","qualname":"::view::BitView::Store","value":"type Store: BitStore;","parent":{"krate":0,"index":3553},"children":[],"decl_id":null,"docs":" The region’s storage type.\n","sig":null,"attributes":[{"value":"/ The region’s storage type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648180,"byte_end":648212,"line_start":57,"line_end":57,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3555},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648577,"byte_end":648586,"line_start":75,"line_end":75,"column_start":5,"column_end":14},"name":"view_bits","qualname":"::view::BitView::view_bits","value":"pub fn view_bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":3553},"children":[],"decl_id":null,"docs":" Views a memory region as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views a memory region as a [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648238,"byte_end":648282,"line_start":60,"line_end":60,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648284,"byte_end":648287,"line_start":61,"line_end":61,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648289,"byte_end":648310,"line_start":62,"line_end":62,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648312,"byte_end":648315,"line_start":63,"line_end":63,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648317,"byte_end":648365,"line_start":64,"line_end":64,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648367,"byte_end":648370,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648372,"byte_end":648388,"line_start":66,"line_end":66,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648390,"byte_end":648393,"line_start":67,"line_end":67,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648395,"byte_end":648448,"line_start":68,"line_end":68,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648450,"byte_end":648453,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648455,"byte_end":648468,"line_start":70,"line_end":70,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648470,"byte_end":648473,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view over the region at `*self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648475,"byte_end":648525,"line_start":72,"line_end":72,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648527,"byte_end":648530,"line_start":73,"line_end":73,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648532,"byte_end":648572,"line_start":74,"line_end":74,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3557},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":649011,"byte_end":649024,"line_start":93,"line_end":93,"column_start":5,"column_end":18},"name":"view_bits_mut","qualname":"::view::BitView::view_bits_mut","value":"pub fn view_bits_mut<O>(&mut Self) -> &mut BitSlice<O, Self::Store> where\nO: BitOrder","parent":{"krate":0,"index":3553},"children":[],"decl_id":null,"docs":" Views a memory region as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views a memory region as a mutable [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648648,"byte_end":648700,"line_start":78,"line_end":78,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648702,"byte_end":648705,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648707,"byte_end":648728,"line_start":80,"line_end":80,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648730,"byte_end":648733,"line_start":81,"line_end":81,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648735,"byte_end":648783,"line_start":82,"line_end":82,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648785,"byte_end":648788,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648790,"byte_end":648806,"line_start":84,"line_end":84,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648808,"byte_end":648811,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The region to view as individual mutable bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648813,"byte_end":648878,"line_start":86,"line_end":86,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648880,"byte_end":648883,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648885,"byte_end":648898,"line_start":88,"line_end":88,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648900,"byte_end":648903,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view over the region at `*self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648905,"byte_end":648959,"line_start":90,"line_end":90,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648961,"byte_end":648964,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":648966,"byte_end":649006,"line_start":92,"line_end":92,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":3582},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650325,"byte_end":650337,"line_start":156,"line_end":156,"column_start":11,"column_end":23},"name":"BitViewSized","qualname":"::view::BitViewSized","value":"BitViewSized: BitView + Sized","parent":null,"children":[{"krate":0,"index":3583},{"krate":0,"index":3584}],"decl_id":null,"docs":" Helper for size awareness on `Sized` storage regions.\n","sig":null,"attributes":[{"value":"/ Helper for size awareness on `Sized` storage regions.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650257,"byte_end":650314,"line_start":155,"line_end":155,"column_start":1,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":3583},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650426,"byte_end":650430,"line_start":158,"line_end":158,"column_start":8,"column_end":12},"name":"ELTS","qualname":"::view::BitViewSized::ELTS","value":"usize","parent":{"krate":0,"index":3582},"children":[],"decl_id":null,"docs":" Counts the number of elements `T` contained in the type.\n","sig":null,"attributes":[{"value":"/ Counts the number of elements `T` contained in the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650358,"byte_end":650418,"line_start":157,"line_end":157,"column_start":2,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":3584},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650500,"byte_end":650504,"line_start":160,"line_end":160,"column_start":8,"column_end":12},"name":"BITS","qualname":"::view::BitViewSized::BITS","value":"usize","parent":{"krate":0,"index":3582},"children":[],"decl_id":null,"docs":" Counts the number of bits contained in the type.\n","sig":null,"attributes":[{"value":"/ Counts the number of bits contained in the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650440,"byte_end":650492,"line_start":159,"line_end":159,"column_start":2,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":3593},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651788,"byte_end":651794,"line_start":204,"line_end":204,"column_start":11,"column_end":17},"name":"AsBits","qualname":"::view::AsBits","value":"AsBits<T>","parent":null,"children":[{"krate":0,"index":3595}],"decl_id":null,"docs":" Views a region as an immutable [`BitSlice`] only.","sig":null,"attributes":[{"value":"* Views a region as an immutable [`BitSlice`] only.\n\nThis trait is an analogue to the [`AsRef`] trait, in that it enables any type to\nprovide an immutable-only view of a bit slice.\n\nIt does not require an `AsRef<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBits<T>` or `AsRef<[T]>`, and gain a [`BitSlice`]\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsRef`]: core::convert::AsRef\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650803,"byte_end":651777,"line_start":177,"line_end":203,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3595},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":652157,"byte_end":652164,"line_start":222,"line_end":222,"column_start":5,"column_end":12},"name":"as_bits","qualname":"::view::AsBits::as_bits","value":"pub fn as_bits<O>(&Self) -> &BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":3593},"children":[],"decl_id":null,"docs":" Views memory as a slice of immutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of immutable bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651819,"byte_end":651865,"line_start":207,"line_end":207,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651867,"byte_end":651870,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651872,"byte_end":651893,"line_start":209,"line_end":209,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651895,"byte_end":651898,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651900,"byte_end":651948,"line_start":211,"line_end":211,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651950,"byte_end":651953,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651955,"byte_end":651971,"line_start":213,"line_end":213,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651973,"byte_end":651976,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The value that is providing a [`BitSlice`] view.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":651978,"byte_end":652041,"line_start":215,"line_end":215,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":652043,"byte_end":652046,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":652048,"byte_end":652061,"line_start":217,"line_end":217,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":652063,"byte_end":652066,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ An immutable view into some bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":652068,"byte_end":652105,"line_start":219,"line_end":219,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":652107,"byte_end":652110,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":652112,"byte_end":652152,"line_start":221,"line_end":221,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":3597},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653189,"byte_end":653198,"line_start":253,"line_end":253,"column_start":11,"column_end":20},"name":"AsBitsMut","qualname":"::view::AsBitsMut","value":"AsBitsMut<T>","parent":null,"children":[{"krate":0,"index":3599}],"decl_id":null,"docs":" Views a region as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"* Views a region as a mutable [`BitSlice`].\n\nThis trait is an analogue to the [`AsMut`] trait, in that it enables any type to\nprovide a mutable view of a bit slice.\n\nIt does not require an `AsMut<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBitsMut<T>` or `AsMut<[T]>`, and gain a [`BitSlice`]\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsMut`]: core::convert::AsMut\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":652217,"byte_end":653178,"line_start":226,"line_end":252,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3599},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653560,"byte_end":653571,"line_start":271,"line_end":271,"column_start":5,"column_end":16},"name":"as_bits_mut","qualname":"::view::AsBitsMut::as_bits_mut","value":"pub fn as_bits_mut<O>(&mut Self) -> &mut BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":3597},"children":[],"decl_id":null,"docs":" Views memory as a slice of mutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of mutable bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653223,"byte_end":653267,"line_start":256,"line_end":256,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653269,"byte_end":653272,"line_start":257,"line_end":257,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653274,"byte_end":653295,"line_start":258,"line_end":258,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653297,"byte_end":653300,"line_start":259,"line_end":259,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653302,"byte_end":653350,"line_start":260,"line_end":260,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653352,"byte_end":653355,"line_start":261,"line_end":261,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653357,"byte_end":653373,"line_start":262,"line_end":262,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653375,"byte_end":653378,"line_start":263,"line_end":263,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The value that is providing a [`BitSlice`] view.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653380,"byte_end":653447,"line_start":264,"line_end":264,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653449,"byte_end":653452,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653454,"byte_end":653467,"line_start":266,"line_end":266,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653469,"byte_end":653472,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ A mutable view into some bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653474,"byte_end":653508,"line_start":268,"line_end":268,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653510,"byte_end":653513,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653515,"byte_end":653555,"line_start":270,"line_end":270,"column_start":2,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":3611},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boxed","qualname":"::boxed","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","parent":null,"children":[{"krate":0,"index":3612},{"krate":0,"index":3615},{"krate":0,"index":3616},{"krate":0,"index":3619},{"krate":0,"index":3622},{"krate":0,"index":3625},{"krate":0,"index":3628},{"krate":0,"index":3629},{"krate":0,"index":3632},{"krate":0,"index":3633},{"krate":0,"index":3636},{"krate":0,"index":3637},{"krate":0,"index":3639},{"krate":0,"index":3640},{"krate":0,"index":3643},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3649},{"krate":0,"index":3652},{"krate":0,"index":3655},{"krate":0,"index":3658},{"krate":0,"index":3701},{"krate":0,"index":3780},{"krate":0,"index":3895},{"krate":0,"index":4113},{"krate":0,"index":4116},{"krate":0,"index":4120}],"decl_id":null,"docs":" A dynamically-allocated, fixed-size, buffer containing a [`BitSlice`]\nregion.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11733,"byte_end":11758,"line_start":300,"line_end":300,"column_start":1,"column_end":26}},{"value":"* A dynamically-allocated, fixed-size, buffer containing a [`BitSlice`]\nregion.\n\nYou can read the standard library’s [`alloc::boxed` module documentation][std]\nhere.\n\nThis module defines the [`BitBox`] buffer, and all of its associated support\ncode.\n\n[`BitBox`] is equivalent to `Box<[bool]>`, in its operation and in its\nrelationship to the [`BitSlice`] and [`BitVec`] types. Most of the interesting\nwork to be done on a bit-sequence is implemented in `BitSlice`, to which\n`BitBox` dereferences, and the box container itself only exists to maintain\nwonership and provide some specializations that cannot safely be done on\n`BitSlice` alone.\n\nThere is almost never a reason to use this type, as it is a mixture of\n[`BitArray`]’s fixed width and [`BitVec`]’s heap allocation. You should only use\nit when you have a bit-sequence whose width is either unknowable at compile-time\nor inexpressable in `BitArray`, and are constructing the sequence in a `BitVec`\nbefore freezing it.\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitSlice`]: crate::slice::BitSlice\n[`BitVec`]: crate::vec::BitVec\n[std]: alloc::boxed\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":654941,"byte_end":656086,"line_start":1,"line_end":28,"column_start":1,"column_end":4}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":656088,"byte_end":656114,"line_start":30,"line_end":30,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3694},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670721,"byte_end":670724,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"new","qualname":"<BitBox<O, T>>::new","value":"pub fn new(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates memory on the heap and then copies `x` into it.","sig":null,"attributes":[{"value":"/ Allocates memory on the heap and then copies `x` into it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670100,"byte_end":670161,"line_start":25,"line_end":25,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670163,"byte_end":670166,"line_start":26,"line_end":26,"column_start":2,"column_end":5}},{"value":"/ This doesn’t actually allocate if `x` is zero-length.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670168,"byte_end":670227,"line_start":27,"line_end":27,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670229,"byte_end":670232,"line_start":28,"line_end":28,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670234,"byte_end":670248,"line_start":29,"line_end":29,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670250,"byte_end":670253,"line_start":30,"line_end":30,"column_start":2,"column_end":5}},{"value":"/ [`Box::new`](alloc::boxed::Box::new)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670255,"byte_end":670295,"line_start":31,"line_end":31,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670297,"byte_end":670300,"line_start":32,"line_end":32,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670302,"byte_end":670323,"line_start":33,"line_end":33,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670325,"byte_end":670328,"line_start":34,"line_end":34,"column_start":2,"column_end":5}},{"value":"/ `Box::<[T]>::new` does not exist, because unsized types cannot be taken","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670330,"byte_end":670405,"line_start":35,"line_end":35,"column_start":2,"column_end":77}},{"value":"/ by value. Instead, this takes a slice reference, and boxes the referent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670407,"byte_end":670482,"line_start":36,"line_end":36,"column_start":2,"column_end":77}},{"value":"/ slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670484,"byte_end":670494,"line_start":37,"line_end":37,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670496,"byte_end":670499,"line_start":38,"line_end":38,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670501,"byte_end":670515,"line_start":39,"line_end":39,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670517,"byte_end":670520,"line_start":40,"line_end":40,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670522,"byte_end":670533,"line_start":41,"line_end":41,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670535,"byte_end":670562,"line_start":42,"line_end":42,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670564,"byte_end":670567,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ let boxed = BitBox::new(bits![0; 5]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670569,"byte_end":670610,"line_start":44,"line_end":44,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670612,"byte_end":670619,"line_start":45,"line_end":45,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670621,"byte_end":670638,"line_start":46,"line_end":46,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670640,"byte_end":670670,"line_start":47,"line_end":47,"column_start":2,"column_end":32}},{"value":"deprecated = \"Prefer `from_bitslice`\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670672,"byte_end":670712,"line_start":48,"line_end":48,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3695},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671297,"byte_end":671300,"line_start":71,"line_end":71,"column_start":9,"column_end":12},"name":"pin","qualname":"<BitBox<O, T>>::pin","value":"pub fn pin(&BitSlice<O, T>) -> Pin<Self> where O: Unpin, T: Unpin","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<BitBox<O, T>>`.","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<BitBox<O, T>>`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670785,"byte_end":670826,"line_start":53,"line_end":53,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670828,"byte_end":670831,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`] is always [`Unpin`], so this has no actual effect.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670833,"byte_end":670900,"line_start":55,"line_end":55,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670902,"byte_end":670905,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670907,"byte_end":670921,"line_start":57,"line_end":57,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670923,"byte_end":670926,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ [`Box::pin`](alloc::boxed::Box::pin)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670928,"byte_end":670968,"line_start":59,"line_end":59,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670970,"byte_end":670973,"line_start":60,"line_end":60,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670975,"byte_end":670996,"line_start":61,"line_end":61,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670998,"byte_end":671001,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ As with [`new`], this only exists on `Box` when `T` is not unsized. This","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671003,"byte_end":671079,"line_start":63,"line_end":63,"column_start":2,"column_end":78}},{"value":"/ takes a slice reference, and pins the referent slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671081,"byte_end":671138,"line_start":64,"line_end":64,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671140,"byte_end":671143,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671145,"byte_end":671185,"line_start":66,"line_end":66,"column_start":2,"column_end":42}},{"value":"/ [`Unpin`]: core::marker::Unpin","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671187,"byte_end":671221,"line_start":67,"line_end":67,"column_start":2,"column_end":36}},{"value":"/ [`new`]: Self::new","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671223,"byte_end":671245,"line_start":68,"line_end":68,"column_start":2,"column_end":24}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671247,"byte_end":671256,"line_start":69,"line_end":69,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671258,"byte_end":671288,"line_start":70,"line_end":70,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3696},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672545,"byte_end":672553,"line_start":113,"line_end":113,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<BitBox<O, T>>::from_raw","value":"pub unsafe fn from_raw(*mut BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a bit-box from a raw bit-slice pointer.","sig":null,"attributes":[{"value":"/ Constructs a bit-box from a raw bit-slice pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671418,"byte_end":671472,"line_start":79,"line_end":79,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671474,"byte_end":671477,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the raw bit-slice pointer is owned by the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671479,"byte_end":671553,"line_start":81,"line_end":81,"column_start":2,"column_end":76}},{"value":"/ resulting `BitBox`. Specifically, the `BitBox` destructor will free the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671555,"byte_end":671630,"line_start":82,"line_end":82,"column_start":2,"column_end":77}},{"value":"/ memory allocation at the bit-slice pointer’s address. For this to be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671632,"byte_end":671706,"line_start":83,"line_end":83,"column_start":2,"column_end":74}},{"value":"/ safe, the bit-slice pointer can only have been produced by a `BitBox`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671708,"byte_end":671781,"line_start":84,"line_end":84,"column_start":2,"column_end":75}},{"value":"/ previously destroyed using [`into_raw`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671783,"byte_end":671827,"line_start":85,"line_end":85,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671829,"byte_end":671832,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671834,"byte_end":671848,"line_start":87,"line_end":87,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671850,"byte_end":671853,"line_start":88,"line_end":88,"column_start":2,"column_end":5}},{"value":"/ [`Box::from_raw`](alloc::boxed::Box::from_raw)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671855,"byte_end":671905,"line_start":89,"line_end":89,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671907,"byte_end":671910,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671912,"byte_end":671924,"line_start":91,"line_end":91,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671926,"byte_end":671929,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ This function is unsafe because improper use may lead to memory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":671931,"byte_end":671998,"line_start":93,"line_end":93,"column_start":2,"column_end":69}},{"value":"/ problems. For example, a double-free may occur if the function is called","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672000,"byte_end":672076,"line_start":94,"line_end":94,"column_start":2,"column_end":78}},{"value":"/ twice on the same raw bit-slice pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672078,"byte_end":672122,"line_start":95,"line_end":95,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672124,"byte_end":672127,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672129,"byte_end":672143,"line_start":97,"line_end":97,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672145,"byte_end":672148,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ Recreate a `BitBox` which was previously converted to a raw bit-slice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672150,"byte_end":672223,"line_start":99,"line_end":99,"column_start":2,"column_end":75}},{"value":"/ pointer using [`BitBox::into_raw`]:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672225,"byte_end":672264,"line_start":100,"line_end":100,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672266,"byte_end":672269,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672271,"byte_end":672282,"line_start":102,"line_end":102,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672284,"byte_end":672311,"line_start":103,"line_end":103,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672313,"byte_end":672316,"line_start":104,"line_end":104,"column_start":2,"column_end":5}},{"value":"/ let x = bitbox![0; 10];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672318,"byte_end":672345,"line_start":105,"line_end":105,"column_start":2,"column_end":29}},{"value":"/ let ptr = BitBox::into_raw(x);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672347,"byte_end":672381,"line_start":106,"line_end":106,"column_start":2,"column_end":36}},{"value":"/ let x = unsafe { BitBox::from_raw(ptr) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672383,"byte_end":672428,"line_start":107,"line_end":107,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672430,"byte_end":672437,"line_start":108,"line_end":108,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672439,"byte_end":672442,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::into_raw`]: Self::into_raw","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672444,"byte_end":672484,"line_start":110,"line_end":110,"column_start":2,"column_end":42}},{"value":"/ [`into_raw`]: Self::into_raw","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672486,"byte_end":672518,"line_start":111,"line_end":111,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672520,"byte_end":672529,"line_start":112,"line_end":112,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3697},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674115,"byte_end":674123,"line_start":160,"line_end":160,"column_start":9,"column_end":17},"name":"into_raw","qualname":"<BitBox<O, T>>::into_raw","value":"pub fn into_raw(Self) -> *mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `BitBox`, returning a raw bit-slice pointer.","sig":null,"attributes":[{"value":"/ Consumes the `BitBox`, returning a raw bit-slice pointer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672657,"byte_end":672718,"line_start":119,"line_end":119,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672720,"byte_end":672723,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ The bit-slice pointer will be properly encoded and non-null.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672725,"byte_end":672789,"line_start":121,"line_end":121,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672791,"byte_end":672794,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the caller is responsible for the memory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672796,"byte_end":672869,"line_start":123,"line_end":123,"column_start":2,"column_end":75}},{"value":"/ previously managed by the `BitBox`. In particular, the caller should","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672871,"byte_end":672943,"line_start":124,"line_end":124,"column_start":2,"column_end":74}},{"value":"/ properly release the memory by converting the bit-slice pointer back","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":672945,"byte_end":673017,"line_start":125,"line_end":125,"column_start":2,"column_end":74}},{"value":"/ into a `BitBox` with the [`from_raw`] function, allowing the `BitBox`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673019,"byte_end":673092,"line_start":126,"line_end":126,"column_start":2,"column_end":75}},{"value":"/ destructor to perform the cleanup.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673094,"byte_end":673132,"line_start":127,"line_end":127,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673134,"byte_end":673137,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ Note: this is an associated function, which means that you have to call","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673139,"byte_end":673214,"line_start":129,"line_end":129,"column_start":2,"column_end":77}},{"value":"/ it as `BitBox::into_raw(b)` instead of `b.into_raw()`. This is to match","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673216,"byte_end":673291,"line_start":130,"line_end":130,"column_start":2,"column_end":77}},{"value":"/ signatures with the standard library’s [`Box`] API; there will never be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673293,"byte_end":673370,"line_start":131,"line_end":131,"column_start":2,"column_end":77}},{"value":"/ a name conflict with [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673372,"byte_end":673410,"line_start":132,"line_end":132,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673412,"byte_end":673415,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673417,"byte_end":673431,"line_start":134,"line_end":134,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673433,"byte_end":673436,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ [`Box::into_raw`](alloc::boxed::Box::into_raw)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673438,"byte_end":673488,"line_start":136,"line_end":136,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673490,"byte_end":673493,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673495,"byte_end":673509,"line_start":138,"line_end":138,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673511,"byte_end":673514,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ Converting the raw bit-slice pointer back into a `BitBox` with","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673516,"byte_end":673582,"line_start":140,"line_end":140,"column_start":2,"column_end":68}},{"value":"/ [`BitBox::from_raw`] for automatic cleanup:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673584,"byte_end":673631,"line_start":141,"line_end":141,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673633,"byte_end":673636,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673638,"byte_end":673649,"line_start":143,"line_end":143,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673651,"byte_end":673678,"line_start":144,"line_end":144,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673680,"byte_end":673683,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ let x = bitbox![0; 50];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673685,"byte_end":673712,"line_start":146,"line_end":146,"column_start":2,"column_end":29}},{"value":"/ let p = BitBox::into_raw(x);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673714,"byte_end":673746,"line_start":147,"line_end":147,"column_start":2,"column_end":34}},{"value":"/ let x = unsafe { BitBox::from_raw(p) };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673748,"byte_end":673791,"line_start":148,"line_end":148,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673793,"byte_end":673800,"line_start":149,"line_end":149,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673802,"byte_end":673805,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ You may not deällocate pointers produced by this function through any","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673807,"byte_end":673881,"line_start":151,"line_end":151,"column_start":2,"column_end":75}},{"value":"/ other manner.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673883,"byte_end":673900,"line_start":152,"line_end":152,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673902,"byte_end":673905,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::from_raw`]: Self::from_raw","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673907,"byte_end":673947,"line_start":154,"line_end":154,"column_start":2,"column_end":42}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673949,"byte_end":673989,"line_start":155,"line_end":155,"column_start":2,"column_end":42}},{"value":"/ [`Box`]: alloc::boxed::Box","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":673991,"byte_end":674021,"line_start":156,"line_end":156,"column_start":2,"column_end":32}},{"value":"/ [`from_raw`]: Self::from_raw","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674023,"byte_end":674055,"line_start":157,"line_end":157,"column_start":2,"column_end":34}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674057,"byte_end":674074,"line_start":158,"line_end":158,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674076,"byte_end":674106,"line_start":159,"line_end":159,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3698},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675599,"byte_end":675603,"line_start":206,"line_end":206,"column_start":9,"column_end":13},"name":"leak","qualname":"<BitBox<O, T>>::leak","value":"pub fn leak<'a>(Self) -> &'a mut BitSlice<O, T> where T: 'a","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `BitBox`, returning a mutable reference, `&'a mut\n BitSlice<O, T>`. This is eligible to be promoted to the `'static`\n lifetime.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `BitBox`, returning a mutable reference, `&'a mut","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674185,"byte_end":674261,"line_start":164,"line_end":164,"column_start":2,"column_end":78}},{"value":"/ BitSlice<O, T>`. This is eligible to be promoted to the `'static`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674263,"byte_end":674332,"line_start":165,"line_end":165,"column_start":2,"column_end":71}},{"value":"/ lifetime.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674334,"byte_end":674347,"line_start":166,"line_end":166,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674349,"byte_end":674352,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674354,"byte_end":674368,"line_start":168,"line_end":168,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674370,"byte_end":674373,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ [`Box::leak`](alloc::boxed::Box::leak)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674375,"byte_end":674417,"line_start":170,"line_end":170,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674419,"byte_end":674422,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ This function is mainly useful for data that lives for the remainder","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674424,"byte_end":674496,"line_start":172,"line_end":172,"column_start":2,"column_end":74}},{"value":"/ of the program’s life. Dropping the returned reference will cause a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674498,"byte_end":674571,"line_start":173,"line_end":173,"column_start":2,"column_end":73}},{"value":"/ memory leak. If this is not acceptable, the reference should first be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674573,"byte_end":674646,"line_start":174,"line_end":174,"column_start":2,"column_end":75}},{"value":"/ wrapped with the [`BitBox::from_raw`] function producing a `BitBox`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674648,"byte_end":674720,"line_start":175,"line_end":175,"column_start":2,"column_end":74}},{"value":"/ This `BitBox` can then be dropped which will properly deällocate the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674722,"byte_end":674795,"line_start":176,"line_end":176,"column_start":2,"column_end":74}},{"value":"/ memory.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674797,"byte_end":674808,"line_start":177,"line_end":177,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674810,"byte_end":674813,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ Note: this is an associated function, which means that you have to call","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674815,"byte_end":674890,"line_start":179,"line_end":179,"column_start":2,"column_end":77}},{"value":"/ it as `BitBox::leak(b)` instead of `b.leak()`. This is to match","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674892,"byte_end":674959,"line_start":180,"line_end":180,"column_start":2,"column_end":69}},{"value":"/ signatures with the standard library’s [`Box`] API; there will never be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":674961,"byte_end":675038,"line_start":181,"line_end":181,"column_start":2,"column_end":77}},{"value":"/ a name conflict with [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675040,"byte_end":675078,"line_start":182,"line_end":182,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675080,"byte_end":675083,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675085,"byte_end":675099,"line_start":184,"line_end":184,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675101,"byte_end":675104,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ [`Box::leak`](alloc::boxed::Box::leak)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675106,"byte_end":675148,"line_start":186,"line_end":186,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675150,"byte_end":675153,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675155,"byte_end":675169,"line_start":188,"line_end":188,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675171,"byte_end":675174,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ Simple usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675176,"byte_end":675193,"line_start":190,"line_end":190,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675195,"byte_end":675198,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675200,"byte_end":675211,"line_start":192,"line_end":192,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675213,"byte_end":675240,"line_start":193,"line_end":193,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675242,"byte_end":675245,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ let b = bitbox![0; 50];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675247,"byte_end":675274,"line_start":195,"line_end":195,"column_start":2,"column_end":29}},{"value":"/ let static_ref: &'static mut BitSlice = BitBox::leak(b);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675276,"byte_end":675336,"line_start":196,"line_end":196,"column_start":2,"column_end":62}},{"value":"/ static_ref.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675338,"byte_end":675366,"line_start":197,"line_end":197,"column_start":2,"column_end":30}},{"value":"/ assert!(static_ref[0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675368,"byte_end":675395,"line_start":198,"line_end":198,"column_start":2,"column_end":29}},{"value":"/ # drop(unsafe { BitBox::from_raw(static_ref) });","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675397,"byte_end":675449,"line_start":199,"line_end":199,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675451,"byte_end":675458,"line_start":200,"line_end":200,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675460,"byte_end":675463,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::from_raw`]: Self::from_raw","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675465,"byte_end":675505,"line_start":202,"line_end":202,"column_start":2,"column_end":42}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675507,"byte_end":675547,"line_start":203,"line_end":203,"column_start":2,"column_end":42}},{"value":"/ [`Box`]: alloc::boxed::Box","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675549,"byte_end":675579,"line_start":204,"line_end":204,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675581,"byte_end":675590,"line_start":205,"line_end":205,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3700},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675851,"byte_end":675859,"line_start":217,"line_end":217,"column_start":9,"column_end":17},"name":"into_vec","qualname":"<BitBox<O, T>>::into_vec","value":"pub fn into_vec(Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675753,"byte_end":675770,"line_start":214,"line_end":214,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675772,"byte_end":675802,"line_start":215,"line_end":215,"column_start":2,"column_end":32}},{"value":"deprecated = \"Prefer `into_bitvec`\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":675804,"byte_end":675842,"line_start":216,"line_end":216,"column_start":2,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":3742},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":676853,"byte_end":676861,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::boxed::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":3745},{"krate":0,"index":3746}],"decl_id":null,"docs":" An iterator that moves out of a [`BitVec`].","sig":null,"attributes":[{"value":"* An iterator that moves out of a [`BitVec`].\n\nThis `struct` is created by the [`into_iter`] method on [`BitVec`] (provided by\nthe [`IntoIterator`] trait).\n\n# Original\n\n[`vec::IntoIter`](alloc::vec::IntoIter)\n\n[`BitVec`]: crate::vec::BitVec\n[`IntoIterator`]: core::iter::IntoIterator\n[`into_iter`]: core::iter::IntoIterator::into_iter\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":676501,"byte_end":676841,"line_start":39,"line_end":51,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3751},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677911,"byte_end":677922,"line_start":98,"line_end":98,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677365,"byte_end":677431,"line_start":77,"line_end":77,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677433,"byte_end":677436,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677438,"byte_end":677452,"line_start":79,"line_end":79,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677454,"byte_end":677457,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ [`vec::IntoIter::as_slice`](alloc::vec::IntoIter::as_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677459,"byte_end":677522,"line_start":81,"line_end":81,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677524,"byte_end":677527,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677529,"byte_end":677543,"line_start":83,"line_end":83,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677545,"byte_end":677548,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677550,"byte_end":677561,"line_start":85,"line_end":85,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677563,"byte_end":677590,"line_start":86,"line_end":86,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677592,"byte_end":677595,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677597,"byte_end":677630,"line_start":88,"line_end":88,"column_start":2,"column_end":35}},{"value":"/ let mut into_iter = bv.into_iter();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677632,"byte_end":677671,"line_start":89,"line_end":89,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677673,"byte_end":677676,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![0, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677678,"byte_end":677737,"line_start":91,"line_end":91,"column_start":2,"column_end":61}},{"value":"/ let _ = into_iter.next().unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677739,"byte_end":677777,"line_start":92,"line_end":92,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677779,"byte_end":677835,"line_start":93,"line_end":93,"column_start":2,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677837,"byte_end":677844,"line_start":94,"line_end":94,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677846,"byte_end":677849,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677851,"byte_end":677891,"line_start":96,"line_end":96,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677893,"byte_end":677902,"line_start":97,"line_end":97,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3752},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678148,"byte_end":678156,"line_start":106,"line_end":106,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678025,"byte_end":678042,"line_start":103,"line_end":103,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpalin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678044,"byte_end":678073,"line_start":104,"line_end":104,"column_start":2,"column_end":31}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678075,"byte_end":678139,"line_start":105,"line_end":105,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3753},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678846,"byte_end":678861,"line_start":133,"line_end":133,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a mutable [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678211,"byte_end":678285,"line_start":110,"line_end":110,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678287,"byte_end":678290,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678292,"byte_end":678306,"line_start":112,"line_end":112,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678308,"byte_end":678311,"line_start":113,"line_end":113,"column_start":2,"column_end":5}},{"value":"/ [`vec::IntoIter::as_mut_slice`](alloc::vec::IntoIter::as_mut_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678313,"byte_end":678384,"line_start":114,"line_end":114,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678386,"byte_end":678389,"line_start":115,"line_end":115,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678391,"byte_end":678405,"line_start":116,"line_end":116,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678407,"byte_end":678410,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678412,"byte_end":678423,"line_start":118,"line_end":118,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678425,"byte_end":678452,"line_start":119,"line_end":119,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678454,"byte_end":678457,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678459,"byte_end":678492,"line_start":121,"line_end":121,"column_start":2,"column_end":35}},{"value":"/ let mut into_iter = bv.into_iter();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678494,"byte_end":678533,"line_start":122,"line_end":122,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678535,"byte_end":678538,"line_start":123,"line_end":123,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![0, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678540,"byte_end":678599,"line_start":124,"line_end":124,"column_start":2,"column_end":61}},{"value":"/ into_iter.as_mut_bitslice().set(2, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678601,"byte_end":678646,"line_start":125,"line_end":125,"column_start":2,"column_end":47}},{"value":"/ assert!(!into_iter.next().unwrap());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678648,"byte_end":678688,"line_start":126,"line_end":126,"column_start":2,"column_end":42}},{"value":"/ assert!(into_iter.next().unwrap());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678690,"byte_end":678729,"line_start":127,"line_end":127,"column_start":2,"column_end":41}},{"value":"/ assert!(into_iter.next().unwrap());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678731,"byte_end":678770,"line_start":128,"line_end":128,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678772,"byte_end":678779,"line_start":129,"line_end":129,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678781,"byte_end":678784,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678786,"byte_end":678826,"line_start":131,"line_end":131,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678828,"byte_end":678837,"line_start":132,"line_end":132,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3754},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":679100,"byte_end":679112,"line_start":141,"line_end":141,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678972,"byte_end":678989,"line_start":138,"line_end":138,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":678991,"byte_end":679021,"line_start":139,"line_end":139,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitslice` to view the underlying slice\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":679023,"byte_end":679091,"line_start":140,"line_end":140,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":4116},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659250,"byte_end":659256,"line_start":132,"line_end":132,"column_start":12,"column_end":18},"name":"BitBox","qualname":"::boxed::BitBox","value":"BitBox {  }","parent":null,"children":[{"krate":0,"index":4119}],"decl_id":null,"docs":" A frozen heap-allocated buffer of individual bits.","sig":null,"attributes":[{"value":"* A frozen heap-allocated buffer of individual bits.\n\nThis is essentially a [`BitVec`] that has frozen its allocation, and given up\nthe ability to change size. It is analagous to `Box<[bool]>`. You should prefer\n[`BitArray`] over `BitBox` where possible, and may freely box it if you need the\nindirection.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`Box<[T]>`](alloc::boxed::Box)\n\n# API Differences\n\nThe buffer type `Box<[bool]>` has no type parameters. `BitBox<O, T>` has the\nsame two type parameters as `BitSlice<O, T>`. Otherwise, `BitBox` is able to\nimplement the full API surface of `Box<[bool]>`.\n\n# Behavior\n\nBecause `BitBox` is a fully-owned buffer, it is able to operate on its memory\nwithout concern for any other views that may alias. This enables it to\nspecialize some [`BitSlice`] behavior to be faster or more efficient.\n\n# Type Parameters\n\nThis takes the same [`BitOrder`] and [`BitStore`] parameters as [`BitSlice`].\nUnlike `BitSlice`, it is restricted to only accept the fundamental integers as\nits `BitStore` arguments; `BitBox` buffers can never be aliased by other\n`BitBox`es, and do not need to share memory access.\n\n# Safety\n\n`BitBox` is a wrapper over a `NonNull<BitSlice<O, T>>` pointer; this allows it\nto remain exactly two words in size, and means that it is subject to the same\nrepresentational incompatibility restrictions as [`BitSlice`] references. You\nmust never attempt to type-cast between `Box<[bool]>` and `BitBox` in any way,\nnor may you attempt to modify the memory value of a `BitBox` handle. Doing so\nwill cause allocator and memory errors in your program, likely inducing a panic.\n\nEverything in the `BitBox` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety or potential for incorrectness than their equivalent\nitems in the standard library. All `unsafe` APIs will have documentation\nexplicitly detailing what the API requires you to uphold in order for it to\nfunction safely and correctly. All safe APIs will do so themselves.\n\n# Macro Construction\n\nHeap allocation can only occur at runtime, but the [`bitbox!`] macro will\nconstruct an appropriate [`BitSlice`] buffer at compile-time, and at run-time,\nonly copy the buffer into a heap allocation.\n\n[`BitArray`]: crate::array::BitArray\n[`BitOrder`]: crate::order::BitOrder\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`bitbox!`]: macro@crate::bitbox\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":656449,"byte_end":659217,"line_start":64,"line_end":130,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659218,"byte_end":659238,"line_start":131,"line_end":131,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":4123},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660000,"byte_end":660013,"line_start":166,"line_end":166,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitBox<O, T>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Copies a [`BitSlice`] region into a new `BitBox` allocation.","sig":null,"attributes":[{"value":"/ Copies a [`BitSlice`] region into a new `BitBox` allocation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659465,"byte_end":659529,"line_start":146,"line_end":146,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659531,"byte_end":659534,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659536,"byte_end":659549,"line_start":148,"line_end":148,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659551,"byte_end":659554,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ This delegates to [`BitVec::from_bitslice`], then discards the excess","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659556,"byte_end":659629,"line_start":150,"line_end":150,"column_start":2,"column_end":75}},{"value":"/ capacity.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659631,"byte_end":659644,"line_start":151,"line_end":151,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659646,"byte_end":659649,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659651,"byte_end":659665,"line_start":153,"line_end":153,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659667,"byte_end":659670,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659672,"byte_end":659683,"line_start":155,"line_end":155,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659685,"byte_end":659712,"line_start":156,"line_end":156,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659714,"byte_end":659717,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1, 1, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659719,"byte_end":659764,"line_start":158,"line_end":158,"column_start":2,"column_end":47}},{"value":"/ let bb = BitBox::from_bitslice(&bits[2 ..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659766,"byte_end":659814,"line_start":159,"line_end":159,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bb, bits[2 ..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659816,"byte_end":659847,"line_start":160,"line_end":160,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bb.as_slice(), bits.as_raw_slice());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659849,"byte_end":659900,"line_start":161,"line_end":161,"column_start":2,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659902,"byte_end":659909,"line_start":162,"line_end":162,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659911,"byte_end":659914,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ [`BitVec::from_bitslice`]: crate::vec::BitVec::from_bitslice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659916,"byte_end":659980,"line_start":164,"line_end":164,"column_start":2,"column_end":66}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659982,"byte_end":659991,"line_start":165,"line_end":165,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4124},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660840,"byte_end":660856,"line_start":199,"line_end":199,"column_start":9,"column_end":25},"name":"from_boxed_slice","qualname":"<BitBox<O, T>>::from_boxed_slice","value":"pub fn from_boxed_slice(Box<[T]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `BitBox`<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `BitBox`<O, T>` without copying its buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660106,"byte_end":660182,"line_start":170,"line_end":170,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660184,"byte_end":660187,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660189,"byte_end":660205,"line_start":172,"line_end":172,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660207,"byte_end":660210,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ - `boxed`: A boxed slice to view as bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660212,"byte_end":660257,"line_start":174,"line_end":174,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660259,"byte_end":660262,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660264,"byte_end":660277,"line_start":176,"line_end":176,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660279,"byte_end":660282,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ A `BitBox` over the `boxed` buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660284,"byte_end":660323,"line_start":178,"line_end":178,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660325,"byte_end":660328,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660330,"byte_end":660342,"line_start":180,"line_end":180,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660344,"byte_end":660347,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ This panics if `boxed` is too long to convert into a `BitBox`. See","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660349,"byte_end":660419,"line_start":182,"line_end":182,"column_start":2,"column_end":72}},{"value":"/ [`BitSlice::MAX_ELTS`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660421,"byte_end":660448,"line_start":183,"line_end":183,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660450,"byte_end":660453,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660455,"byte_end":660469,"line_start":185,"line_end":185,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660471,"byte_end":660474,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660476,"byte_end":660487,"line_start":187,"line_end":187,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660489,"byte_end":660516,"line_start":188,"line_end":188,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660518,"byte_end":660521,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0; 4]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660523,"byte_end":660567,"line_start":190,"line_end":190,"column_start":2,"column_end":46}},{"value":"/ let addr = boxed.as_ptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660569,"byte_end":660599,"line_start":191,"line_end":191,"column_start":2,"column_end":32}},{"value":"/ let bb = BitBox::<LocalBits, _>::from_boxed_slice(boxed);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660601,"byte_end":660662,"line_start":192,"line_end":192,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(bb, bits![0; 32]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660664,"byte_end":660697,"line_start":193,"line_end":193,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(addr, bb.as_slice().as_ptr());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660699,"byte_end":660744,"line_start":194,"line_end":194,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660746,"byte_end":660753,"line_start":195,"line_end":195,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660755,"byte_end":660758,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::MAX_ELTS`]: crate::slice::BitSlice::MAX_ELTS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660760,"byte_end":660820,"line_start":197,"line_end":197,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660822,"byte_end":660831,"line_start":198,"line_end":198,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4125},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661966,"byte_end":661986,"line_start":233,"line_end":233,"column_start":9,"column_end":29},"name":"try_from_boxed_slice","qualname":"<BitBox<O, T>>::try_from_boxed_slice","value":"pub fn try_from_boxed_slice(Box<[T]>) -> Result<Self, Box<[T]>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `BitBox<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `BitBox<O, T>` without copying its buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":660990,"byte_end":661065,"line_start":204,"line_end":204,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661067,"byte_end":661070,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ This method takes ownership of a memory buffer and enables it to be used","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661072,"byte_end":661148,"line_start":206,"line_end":206,"column_start":2,"column_end":78}},{"value":"/ as a bit-box. Because `Box<[T]>` can be longer than `BitBox`es, this is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661150,"byte_end":661225,"line_start":207,"line_end":207,"column_start":2,"column_end":77}},{"value":"/ a fallible method, and the original box will be returned if it cannot be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661227,"byte_end":661303,"line_start":208,"line_end":208,"column_start":2,"column_end":78}},{"value":"/ converted.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661305,"byte_end":661319,"line_start":209,"line_end":209,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661321,"byte_end":661324,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661326,"byte_end":661342,"line_start":211,"line_end":211,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661344,"byte_end":661347,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ - `boxed`: Some boxed slice of memory, to be viewed as bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661349,"byte_end":661413,"line_start":213,"line_end":213,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661415,"byte_end":661418,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661420,"byte_end":661433,"line_start":215,"line_end":215,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661435,"byte_end":661438,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ If `boxed` is short enough to be viewed as a `BitBox`, then this returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661440,"byte_end":661516,"line_start":217,"line_end":217,"column_start":2,"column_end":78}},{"value":"/ a `BitBox` over the `boxed` buffer. If `boxed` is too long, then this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661518,"byte_end":661591,"line_start":218,"line_end":218,"column_start":2,"column_end":75}},{"value":"/ returns `boxed` unmodified.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661593,"byte_end":661624,"line_start":219,"line_end":219,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661626,"byte_end":661629,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661631,"byte_end":661645,"line_start":221,"line_end":221,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661647,"byte_end":661650,"line_start":222,"line_end":222,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661652,"byte_end":661663,"line_start":223,"line_end":223,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661665,"byte_end":661692,"line_start":224,"line_end":224,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661694,"byte_end":661697,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0; 4]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661699,"byte_end":661743,"line_start":226,"line_end":226,"column_start":2,"column_end":46}},{"value":"/ let addr = boxed.as_ptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661745,"byte_end":661775,"line_start":227,"line_end":227,"column_start":2,"column_end":32}},{"value":"/ let bb = BitBox::<LocalBits, _>::try_from_boxed_slice(boxed).unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661777,"byte_end":661851,"line_start":228,"line_end":228,"column_start":2,"column_end":76}},{"value":"/ assert_eq!(bb[..], bits![0; 32]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661853,"byte_end":661890,"line_start":229,"line_end":229,"column_start":2,"column_end":39}},{"value":"/ assert_eq!(addr, bb.as_slice().as_ptr());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661892,"byte_end":661937,"line_start":230,"line_end":230,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661939,"byte_end":661946,"line_start":231,"line_end":231,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":661948,"byte_end":661957,"line_start":232,"line_end":232,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4128},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662849,"byte_end":662865,"line_start":267,"line_end":267,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitBox<O, T>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice back into an ordinary slice of memory elements.","sig":null,"attributes":[{"value":"/ Converts the slice back into an ordinary slice of memory elements.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662254,"byte_end":662324,"line_start":242,"line_end":242,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662326,"byte_end":662329,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ This does not affect the slice’s buffer, only the handle used to control","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662331,"byte_end":662409,"line_start":244,"line_end":244,"column_start":2,"column_end":78}},{"value":"/ it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662411,"byte_end":662418,"line_start":245,"line_end":245,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662420,"byte_end":662423,"line_start":246,"line_end":246,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662425,"byte_end":662441,"line_start":247,"line_end":247,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662443,"byte_end":662446,"line_start":248,"line_end":248,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662448,"byte_end":662460,"line_start":249,"line_end":249,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662462,"byte_end":662465,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662467,"byte_end":662480,"line_start":251,"line_end":251,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662482,"byte_end":662485,"line_start":252,"line_end":252,"column_start":2,"column_end":5}},{"value":"/ An ordinary boxed slice containing all the bit-slice’s memory buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662487,"byte_end":662562,"line_start":253,"line_end":253,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662564,"byte_end":662567,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662569,"byte_end":662583,"line_start":255,"line_end":255,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662585,"byte_end":662588,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662590,"byte_end":662601,"line_start":257,"line_end":257,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662603,"byte_end":662630,"line_start":258,"line_end":258,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662632,"byte_end":662635,"line_start":259,"line_end":259,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0; 5];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662637,"byte_end":662664,"line_start":260,"line_end":260,"column_start":2,"column_end":29}},{"value":"/ let addr = bb.as_slice().as_ptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662666,"byte_end":662704,"line_start":261,"line_end":261,"column_start":2,"column_end":40}},{"value":"/ let boxed = bb.into_boxed_slice();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662706,"byte_end":662744,"line_start":262,"line_end":262,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(boxed[..], [0][..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662746,"byte_end":662781,"line_start":263,"line_end":263,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(addr, boxed.as_ptr());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662783,"byte_end":662820,"line_start":264,"line_end":264,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662822,"byte_end":662829,"line_start":265,"line_end":265,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662831,"byte_end":662840,"line_start":266,"line_end":266,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4130},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":664155,"byte_end":664166,"line_start":313,"line_end":313,"column_start":9,"column_end":20},"name":"into_bitvec","qualname":"<BitBox<O, T>>::into_bitvec","value":"pub fn into_bitvec(Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a vector without clones or allocation.","sig":null,"attributes":[{"value":"/ Converts `self` into a vector without clones or allocation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":662991,"byte_end":663054,"line_start":273,"line_end":273,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663056,"byte_end":663059,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ The resulting vector can be converted back into a box via [`BitVec<O,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663061,"byte_end":663134,"line_start":275,"line_end":275,"column_start":2,"column_end":75}},{"value":"/ T>`]’s [`.into_boxed_bitslice()`] method.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663136,"byte_end":663183,"line_start":276,"line_end":276,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663185,"byte_end":663188,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663190,"byte_end":663204,"line_start":278,"line_end":278,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663206,"byte_end":663209,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ [`slice::into_vec`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.into_vec)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663211,"byte_end":663309,"line_start":280,"line_end":280,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663311,"byte_end":663314,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663316,"byte_end":663337,"line_start":282,"line_end":282,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663339,"byte_end":663342,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ Despite taking a `Box<[T]>` receiver, this function is written in an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663344,"byte_end":663416,"line_start":284,"line_end":284,"column_start":2,"column_end":74}},{"value":"/ `impl<T> [T]` block.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663418,"byte_end":663442,"line_start":285,"line_end":285,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663444,"byte_end":663447,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ Rust does not allow the text","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663449,"byte_end":663481,"line_start":287,"line_end":287,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663483,"byte_end":663486,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663488,"byte_end":663506,"line_start":289,"line_end":289,"column_start":2,"column_end":20}},{"value":"/ impl<O, T> BitSlice<O, T> {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663508,"byte_end":663539,"line_start":290,"line_end":290,"column_start":2,"column_end":33}},{"value":"/   fn into_bitvec(self: BitBox<O, T>);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663541,"byte_end":663582,"line_start":291,"line_end":291,"column_start":2,"column_end":43}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663584,"byte_end":663589,"line_start":292,"line_end":292,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663591,"byte_end":663598,"line_start":293,"line_end":293,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663600,"byte_end":663603,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ to be written, and `BitBox` exists specifically because","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663605,"byte_end":663664,"line_start":295,"line_end":295,"column_start":2,"column_end":61}},{"value":"/ `Box<BitSlice<>>` cannot be written either, so this function must be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663666,"byte_end":663738,"line_start":296,"line_end":296,"column_start":2,"column_end":74}},{"value":"/ implemented directly on `BitBox` rather than on `BitSlice` with a boxed","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663740,"byte_end":663815,"line_start":297,"line_end":297,"column_start":2,"column_end":77}},{"value":"/ receiver.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663817,"byte_end":663830,"line_start":298,"line_end":298,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663832,"byte_end":663835,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663837,"byte_end":663851,"line_start":300,"line_end":300,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663853,"byte_end":663856,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663858,"byte_end":663869,"line_start":302,"line_end":302,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663871,"byte_end":663898,"line_start":303,"line_end":303,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663900,"byte_end":663903,"line_start":304,"line_end":304,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663905,"byte_end":663938,"line_start":305,"line_end":305,"column_start":2,"column_end":35}},{"value":"/ let bv = bb.into_bitvec();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663940,"byte_end":663970,"line_start":306,"line_end":306,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663972,"byte_end":663975,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv, bitvec![0, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":663977,"byte_end":664017,"line_start":308,"line_end":308,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":664019,"byte_end":664026,"line_start":309,"line_end":309,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":664028,"byte_end":664031,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ [`BitVec<O, T>`]: crate::vec::BitVec","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":664033,"byte_end":664073,"line_start":311,"line_end":311,"column_start":2,"column_end":42}},{"value":"/ [`.into_boxed_bitslice()`]: crate::vec::BitVec::into_boxed_bitslice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":664075,"byte_end":664146,"line_start":312,"line_end":312,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":4132},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665709,"byte_end":665720,"line_start":355,"line_end":355,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitBox<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the buffer’s contents as a `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the buffer’s contents as a `BitSlice`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665403,"byte_end":665453,"line_start":342,"line_end":342,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665455,"byte_end":665458,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&bb[..]`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665460,"byte_end":665496,"line_start":344,"line_end":344,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665498,"byte_end":665501,"line_start":345,"line_end":345,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665503,"byte_end":665517,"line_start":346,"line_end":346,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665519,"byte_end":665522,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665524,"byte_end":665535,"line_start":348,"line_end":348,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665537,"byte_end":665564,"line_start":349,"line_end":349,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665566,"byte_end":665569,"line_start":350,"line_end":350,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0, 1, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665571,"byte_end":665604,"line_start":351,"line_end":351,"column_start":2,"column_end":35}},{"value":"/ let bits = bb.as_bitslice();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665606,"byte_end":665638,"line_start":352,"line_end":352,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665640,"byte_end":665647,"line_start":353,"line_end":353,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665684,"byte_end":665698,"line_start":354,"line_end":354,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4133},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666125,"byte_end":666140,"line_start":373,"line_end":373,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitBox<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable bit-slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable bit-slice of the entire vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665787,"byte_end":665841,"line_start":359,"line_end":359,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665843,"byte_end":665846,"line_start":360,"line_end":360,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&mut bv[..]`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665848,"byte_end":665880,"line_start":361,"line_end":361,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665882,"byte_end":665885,"line_start":362,"line_end":362,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665887,"byte_end":665901,"line_start":363,"line_end":363,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665903,"byte_end":665906,"line_start":364,"line_end":364,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665908,"byte_end":665919,"line_start":365,"line_end":365,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665921,"byte_end":665948,"line_start":366,"line_end":366,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665950,"byte_end":665953,"line_start":367,"line_end":367,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665955,"byte_end":665992,"line_start":368,"line_end":368,"column_start":2,"column_end":39}},{"value":"/ let bits = bv.as_mut_bitslice();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":665994,"byte_end":666030,"line_start":369,"line_end":369,"column_start":2,"column_end":38}},{"value":"/ bits.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666032,"byte_end":666054,"line_start":370,"line_end":370,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666056,"byte_end":666063,"line_start":371,"line_end":371,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666100,"byte_end":666114,"line_start":372,"line_end":372,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4134},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666697,"byte_end":666705,"line_start":396,"line_end":396,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitBox<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts an element slice containing the entire box.","sig":null,"attributes":[{"value":"/ Extracts an element slice containing the entire box.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666215,"byte_end":666271,"line_start":377,"line_end":377,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666273,"byte_end":666276,"line_start":378,"line_end":378,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666278,"byte_end":666292,"line_start":379,"line_end":379,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666294,"byte_end":666297,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ See [`.as_bitslice()`] for a `&BitBox -> &BitSlice` transform.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666299,"byte_end":666365,"line_start":381,"line_end":381,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666367,"byte_end":666370,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666372,"byte_end":666386,"line_start":383,"line_end":383,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666388,"byte_end":666391,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666393,"byte_end":666404,"line_start":385,"line_end":385,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666406,"byte_end":666437,"line_start":386,"line_end":386,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666439,"byte_end":666466,"line_start":387,"line_end":387,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666468,"byte_end":666499,"line_start":388,"line_end":388,"column_start":2,"column_end":33}},{"value":"/ let buffer = bitbox![Msb0, u8; 0, 1, 0, 1, 1, 0, 0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666501,"byte_end":666560,"line_start":389,"line_end":389,"column_start":2,"column_end":61}},{"value":"/ io::sink().write(buffer.as_slice()).unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666562,"byte_end":666611,"line_start":390,"line_end":390,"column_start":2,"column_end":51}},{"value":"/ # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666613,"byte_end":666620,"line_start":391,"line_end":391,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666622,"byte_end":666629,"line_start":392,"line_end":392,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666631,"byte_end":666634,"line_start":393,"line_end":393,"column_start":2,"column_end":5}},{"value":"/ [`.as_bitslice()`]: Self::as_bitslice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666636,"byte_end":666677,"line_start":394,"line_end":394,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666679,"byte_end":666688,"line_start":395,"line_end":395,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4135},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667359,"byte_end":667371,"line_start":422,"line_end":422,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitBox<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice of the entire box.","sig":null,"attributes":[{"value":"/ Extracts a mutable slice of the entire box.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666859,"byte_end":666906,"line_start":402,"line_end":402,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666908,"byte_end":666911,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666913,"byte_end":666927,"line_start":404,"line_end":404,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666929,"byte_end":666932,"line_start":405,"line_end":405,"column_start":2,"column_end":5}},{"value":"/ See [`.as_mut_bitslice()`] for a `&mut BitBox -> &mut BitSlice`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":666934,"byte_end":667001,"line_start":406,"line_end":406,"column_start":2,"column_end":69}},{"value":"/ transform.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667003,"byte_end":667017,"line_start":407,"line_end":407,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667019,"byte_end":667022,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667024,"byte_end":667038,"line_start":409,"line_end":409,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667040,"byte_end":667043,"line_start":410,"line_end":410,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667045,"byte_end":667056,"line_start":411,"line_end":411,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667058,"byte_end":667089,"line_start":412,"line_end":412,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667091,"byte_end":667118,"line_start":413,"line_end":413,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Read};","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667120,"byte_end":667150,"line_start":414,"line_end":414,"column_start":2,"column_end":32}},{"value":"/ let mut buffer = bitbox![Msb0, u8; 0; 24];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667152,"byte_end":667198,"line_start":415,"line_end":415,"column_start":2,"column_end":48}},{"value":"/ io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667200,"byte_end":667265,"line_start":416,"line_end":416,"column_start":2,"column_end":67}},{"value":"/ # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667267,"byte_end":667274,"line_start":417,"line_end":417,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667276,"byte_end":667283,"line_start":418,"line_end":418,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667285,"byte_end":667288,"line_start":419,"line_end":419,"column_start":2,"column_end":5}},{"value":"/ [`.as_mut_bitslice()`]: Self::as_mut_bitslice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667290,"byte_end":667339,"line_start":420,"line_end":420,"column_start":2,"column_end":51}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667341,"byte_end":667350,"line_start":421,"line_end":421,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4136},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668304,"byte_end":668321,"line_start":450,"line_end":450,"column_start":9,"column_end":26},"name":"set_uninitialized","qualname":"<BitBox<O, T>>::set_uninitialized","value":"pub fn set_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the uninitialized bits of the vector to a fixed value.","sig":null,"attributes":[{"value":"/ Sets the uninitialized bits of the vector to a fixed value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667535,"byte_end":667598,"line_start":428,"line_end":428,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667600,"byte_end":667603,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits in the allocated buffer that are outside","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667605,"byte_end":667679,"line_start":430,"line_end":430,"column_start":2,"column_end":76}},{"value":"/ the `self.as_bitslice()` view so that they have a consistent value. This","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667681,"byte_end":667757,"line_start":431,"line_end":431,"column_start":2,"column_end":78}},{"value":"/ can be used to zero the uninitialized memory so that when viewed as a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667759,"byte_end":667832,"line_start":432,"line_end":432,"column_start":2,"column_end":75}},{"value":"/ raw memory slice, bits outside the live region have a predictable value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667834,"byte_end":667910,"line_start":433,"line_end":433,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667912,"byte_end":667915,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667917,"byte_end":667931,"line_start":435,"line_end":435,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667933,"byte_end":667936,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667938,"byte_end":667949,"line_start":437,"line_end":437,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667951,"byte_end":667978,"line_start":438,"line_end":438,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667980,"byte_end":667983,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ let mut bb = BitBox::new(&220u8.view_bits::<Lsb0>()[.. 4]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":667985,"byte_end":668048,"line_start":440,"line_end":440,"column_start":2,"column_end":65}},{"value":"/ assert_eq!(bb.count_ones(), 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668050,"byte_end":668085,"line_start":441,"line_end":441,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(bb.as_slice(), &[220u8]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668087,"byte_end":668127,"line_start":442,"line_end":442,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668129,"byte_end":668132,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ bb.set_uninitialized(false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668134,"byte_end":668166,"line_start":444,"line_end":444,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bb.as_slice(), &[12u8]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668168,"byte_end":668207,"line_start":445,"line_end":445,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668209,"byte_end":668212,"line_start":446,"line_end":446,"column_start":2,"column_end":5}},{"value":"/ bb.set_uninitialized(true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668214,"byte_end":668245,"line_start":447,"line_end":447,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bb.as_slice(), &[!3u8]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668247,"byte_end":668286,"line_start":448,"line_end":448,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":668288,"byte_end":668295,"line_start":449,"line_end":449,"column_start":2,"column_end":9}}]},{"kind":"Mod","id":{"krate":0,"index":4141},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","parent":null,"children":[{"krate":0,"index":4142},{"krate":0,"index":4145},{"krate":0,"index":4146},{"krate":0,"index":4149},{"krate":0,"index":4150},{"krate":0,"index":4153},{"krate":0,"index":4156},{"krate":0,"index":4159},{"krate":0,"index":4160},{"krate":0,"index":4163},{"krate":0,"index":4166},{"krate":0,"index":4167},{"krate":0,"index":4170},{"krate":0,"index":4173},{"krate":0,"index":4174},{"krate":0,"index":4177},{"krate":0,"index":4180},{"krate":0,"index":4183},{"krate":0,"index":4184},{"krate":0,"index":4187},{"krate":0,"index":4190},{"krate":0,"index":4193},{"krate":0,"index":4196},{"krate":0,"index":4197},{"krate":0,"index":4200},{"krate":0,"index":4201},{"krate":0,"index":4203},{"krate":0,"index":4204},{"krate":0,"index":4207},{"krate":0,"index":4210},{"krate":0,"index":4213},{"krate":0,"index":4214},{"krate":0,"index":4216},{"krate":0,"index":4217},{"krate":0,"index":4219},{"krate":0,"index":4222},{"krate":0,"index":4225},{"krate":0,"index":4340},{"krate":0,"index":4602},{"krate":0,"index":4717},{"krate":0,"index":4928},{"krate":0,"index":4933}],"decl_id":null,"docs":" A dynamically-allocated buffer containing a [`BitSlice`] region.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11775,"byte_end":11800,"line_start":303,"line_end":303,"column_start":1,"column_end":26}},{"value":"* A dynamically-allocated buffer containing a [`BitSlice`] region.\n\nYou can read the standard library’s [`alloc::vec` module documentation][std]\nhere.\n\nThis module defines the [`BitVec`] buffer, and all of its associated support\ncode.\n\n[`BitVec`] is equivalent to [`Vec<bool>`], in its operation and in its\nrelationship to the [`BitSlice`] type. Most of the interesting work to be done\non a bit-sequence is implemented in `BitSlice`, to which `BitVec` dereferences,\nand the vector container itself only exists to maintain ownership, implement\ndynamic resizing, and provide some specializations that cannot safely be done on\n`BitSlice` alone.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitVec`]: crate::vec::BitVec\n[`Vec<bool>`]: alloc::vec::Vec\n[std]: mod@alloc::vec\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":690931,"byte_end":691702,"line_start":1,"line_end":20,"column_start":1,"column_end":4}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":691704,"byte_end":691730,"line_start":22,"line_end":22,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":4292},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723893,"byte_end":723896,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"name":"new","qualname":"<BitVec<O, T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty, `BitVec<O, T>`.","sig":null,"attributes":[{"value":"/ Constructs a new, empty, `BitVec<O, T>`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723524,"byte_end":723568,"line_start":43,"line_end":43,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723570,"byte_end":723573,"line_start":44,"line_end":44,"column_start":2,"column_end":5}},{"value":"/ The bit-vector will not allocate until bits are pushed onto it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723575,"byte_end":723642,"line_start":45,"line_end":45,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723644,"byte_end":723647,"line_start":46,"line_end":46,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723649,"byte_end":723663,"line_start":47,"line_end":47,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723665,"byte_end":723668,"line_start":48,"line_end":48,"column_start":2,"column_end":5}},{"value":"/ [`Vec::new`](alloc::vec::Vec::new)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723670,"byte_end":723708,"line_start":49,"line_end":49,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723710,"byte_end":723713,"line_start":50,"line_end":50,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723715,"byte_end":723729,"line_start":51,"line_end":51,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723731,"byte_end":723734,"line_start":52,"line_end":52,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723736,"byte_end":723747,"line_start":53,"line_end":53,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723749,"byte_end":723776,"line_start":54,"line_end":54,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723778,"byte_end":723781,"line_start":55,"line_end":55,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::new();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723783,"byte_end":723822,"line_start":56,"line_end":56,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723824,"byte_end":723831,"line_start":57,"line_end":57,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723868,"byte_end":723882,"line_start":58,"line_end":58,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4293},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725395,"byte_end":725408,"line_start":114,"line_end":114,"column_start":9,"column_end":22},"name":"with_capacity","qualname":"<BitVec<O, T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty, `BitVec<O, T>` with the specified capacity (in\n bits).","sig":null,"attributes":[{"value":"/ Constructs a new, empty, `BitVec<O, T>` with the specified capacity (in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723971,"byte_end":724046,"line_start":66,"line_end":66,"column_start":2,"column_end":77}},{"value":"/ bits).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724048,"byte_end":724058,"line_start":67,"line_end":67,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724060,"byte_end":724063,"line_start":68,"line_end":68,"column_start":2,"column_end":5}},{"value":"/ The bit-vector will be able to hold at least `capacity` bits without","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724065,"byte_end":724137,"line_start":69,"line_end":69,"column_start":2,"column_end":74}},{"value":"/ reällocating. If `capacity` is 0, the bit-vector will not allocate.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724139,"byte_end":724211,"line_start":70,"line_end":70,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724213,"byte_end":724216,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ It is important to note that although the returned bit-vector has the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724218,"byte_end":724291,"line_start":72,"line_end":72,"column_start":2,"column_end":75}},{"value":"/ *capacity* specified, the bit-vector will have a zero *length*. For an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724293,"byte_end":724367,"line_start":73,"line_end":73,"column_start":2,"column_end":76}},{"value":"/ explanation of the difference between length and capacity, see","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724369,"byte_end":724435,"line_start":74,"line_end":74,"column_start":2,"column_end":68}},{"value":"/ *[Capacity and reällocation]*.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724437,"byte_end":724472,"line_start":75,"line_end":75,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724474,"byte_end":724477,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724479,"byte_end":724493,"line_start":77,"line_end":77,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724495,"byte_end":724498,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ [`Vec::with_capacity`](alloc::vec::Vec::with_capacity)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724500,"byte_end":724558,"line_start":79,"line_end":79,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724560,"byte_end":724563,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724565,"byte_end":724577,"line_start":81,"line_end":81,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724579,"byte_end":724582,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ Panics if the requested capacity exceeds the bit-vector’s limits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724584,"byte_end":724655,"line_start":83,"line_end":83,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724657,"byte_end":724660,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724662,"byte_end":724676,"line_start":85,"line_end":85,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724678,"byte_end":724681,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724683,"byte_end":724694,"line_start":87,"line_end":87,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724696,"byte_end":724723,"line_start":88,"line_end":88,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724725,"byte_end":724728,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(128);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724730,"byte_end":724782,"line_start":90,"line_end":90,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724784,"byte_end":724787,"line_start":91,"line_end":91,"column_start":2,"column_end":5}},{"value":"/ // The bit-vector contains no bits, even","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724789,"byte_end":724833,"line_start":92,"line_end":92,"column_start":2,"column_end":46}},{"value":"/ // though it has the capacity for more.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724835,"byte_end":724878,"line_start":93,"line_end":93,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bv.len(), 0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724880,"byte_end":724908,"line_start":94,"line_end":94,"column_start":2,"column_end":30}},{"value":"/ assert!(bv.capacity() >= 128);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724910,"byte_end":724944,"line_start":95,"line_end":95,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724946,"byte_end":724949,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ // These are all done","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724951,"byte_end":724976,"line_start":97,"line_end":97,"column_start":2,"column_end":27}},{"value":"/ // without reällocating…","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":724978,"byte_end":725009,"line_start":98,"line_end":98,"column_start":2,"column_end":30}},{"value":"/ for i in 0 .. 128 {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725011,"byte_end":725034,"line_start":99,"line_end":99,"column_start":2,"column_end":25}},{"value":"/   bv.push(i & 0xC0 == i);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725036,"byte_end":725065,"line_start":100,"line_end":100,"column_start":2,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725067,"byte_end":725072,"line_start":101,"line_end":101,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bv.len(), 128);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725074,"byte_end":725104,"line_start":102,"line_end":102,"column_start":2,"column_end":32}},{"value":"/ assert!(bv.capacity() >= 128);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725106,"byte_end":725140,"line_start":103,"line_end":103,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725142,"byte_end":725145,"line_start":104,"line_end":104,"column_start":2,"column_end":5}},{"value":"/ // …but this may make the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725147,"byte_end":725178,"line_start":105,"line_end":105,"column_start":2,"column_end":31}},{"value":"/ // bit-vector reällocate.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725180,"byte_end":725210,"line_start":106,"line_end":106,"column_start":2,"column_end":31}},{"value":"/ bv.push(false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725212,"byte_end":725231,"line_start":107,"line_end":107,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 129);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725233,"byte_end":725263,"line_start":108,"line_end":108,"column_start":2,"column_end":32}},{"value":"/ assert!(bv.capacity() >= 129);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725265,"byte_end":725299,"line_start":109,"line_end":109,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725301,"byte_end":725308,"line_start":110,"line_end":110,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725310,"byte_end":725313,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ [Capacity and reällocation]: #capacity-and-reallocation","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725315,"byte_end":725375,"line_start":112,"line_end":112,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725377,"byte_end":725386,"line_start":113,"line_end":113,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4294},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727382,"byte_end":727396,"line_start":175,"line_end":175,"column_start":9,"column_end":23},"name":"into_raw_parts","qualname":"<BitVec<O, T>>::into_raw_parts","value":"pub fn into_raw_parts(Self) -> (BitPtr<Mut, O, T>, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes a `BitVec<O, T>` into its raw components.","sig":null,"attributes":[{"value":"/ Decomposes a `BitVec<O, T>` into its raw components.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725867,"byte_end":725923,"line_start":131,"line_end":131,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725925,"byte_end":725928,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ Returns the raw bit-pointer to the underlying data, the length of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":725930,"byte_end":726003,"line_start":133,"line_end":133,"column_start":2,"column_end":75}},{"value":"/ bit-vector (in bits), and the allocated capacity of the buffer (in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726005,"byte_end":726075,"line_start":134,"line_end":134,"column_start":2,"column_end":72}},{"value":"/ bits). These are the same arguments in the same order as the arguments","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726077,"byte_end":726151,"line_start":135,"line_end":135,"column_start":2,"column_end":76}},{"value":"/ to [`from_raw_parts`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726153,"byte_end":726179,"line_start":136,"line_end":136,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726181,"byte_end":726184,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the caller is responsible for the memory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726186,"byte_end":726259,"line_start":138,"line_end":138,"column_start":2,"column_end":75}},{"value":"/ previously managed by the `BitVec`. The only way to do this is to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726261,"byte_end":726330,"line_start":139,"line_end":139,"column_start":2,"column_end":71}},{"value":"/ convert the raw bit-pointer, length, and capacity back into a `BitVec`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726332,"byte_end":726406,"line_start":140,"line_end":140,"column_start":2,"column_end":76}},{"value":"/ with the [`from_raw_parts`] function, allowing the destructor to perform","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726408,"byte_end":726484,"line_start":141,"line_end":141,"column_start":2,"column_end":78}},{"value":"/ the cleanup.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726486,"byte_end":726502,"line_start":142,"line_end":142,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726504,"byte_end":726507,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726509,"byte_end":726523,"line_start":144,"line_end":144,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726525,"byte_end":726528,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_raw_parts`](alloc::vec::Vec::into_raw_parts)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726530,"byte_end":726590,"line_start":146,"line_end":146,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726592,"byte_end":726595,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726597,"byte_end":726618,"line_start":148,"line_end":148,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726620,"byte_end":726623,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ This returns a `BitPtr`, rather than a `*mut T`. If you need the actual","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726625,"byte_end":726700,"line_start":150,"line_end":150,"column_start":2,"column_end":77}},{"value":"/ memory address, [`BitPtr::pointer`] will produce it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726702,"byte_end":726758,"line_start":151,"line_end":151,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726760,"byte_end":726763,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726765,"byte_end":726779,"line_start":153,"line_end":153,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726781,"byte_end":726784,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726786,"byte_end":726797,"line_start":155,"line_end":155,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726799,"byte_end":726826,"line_start":156,"line_end":156,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726828,"byte_end":726853,"line_start":157,"line_end":157,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726855,"byte_end":726858,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ let bv: BitVec = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726860,"byte_end":726904,"line_start":159,"line_end":159,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726906,"byte_end":726909,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ let (ptr, len, cap) = bv.into_raw_parts();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726911,"byte_end":726957,"line_start":161,"line_end":161,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726959,"byte_end":726962,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ let rebuilt = unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726964,"byte_end":726990,"line_start":163,"line_end":163,"column_start":2,"column_end":28}},{"value":"/   // We can now make changes to the components, such","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":726992,"byte_end":727048,"line_start":164,"line_end":164,"column_start":2,"column_end":58}},{"value":"/   // as casting the pointer to a compatible type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727050,"byte_end":727103,"line_start":165,"line_end":165,"column_start":2,"column_end":55}},{"value":"/   let ptr = ptr.cast::<Cell<usize>>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727105,"byte_end":727147,"line_start":166,"line_end":166,"column_start":2,"column_end":44}},{"value":"/   BitVec::from_raw_parts(ptr, len, cap)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727149,"byte_end":727192,"line_start":167,"line_end":167,"column_start":2,"column_end":45}},{"value":"/ };","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727194,"byte_end":727200,"line_start":168,"line_end":168,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(rebuilt, bits![0, 1, 0, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727202,"byte_end":727248,"line_start":169,"line_end":169,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727250,"byte_end":727257,"line_start":170,"line_end":170,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727259,"byte_end":727262,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr::pointer`]: crate::ptr::BitPtr::pointer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727264,"byte_end":727316,"line_start":172,"line_end":172,"column_start":2,"column_end":54}},{"value":"/ [`from_raw_parts`]: Self::from_raw_parts","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727318,"byte_end":727362,"line_start":173,"line_end":173,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727364,"byte_end":727373,"line_start":174,"line_end":174,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4295},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730404,"byte_end":730418,"line_start":253,"line_end":253,"column_start":16,"column_end":30},"name":"from_raw_parts","qualname":"<BitVec<O, T>>::from_raw_parts","value":"pub unsafe fn from_raw_parts(BitPtr<Mut, O, T>, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitVec<O, T>` directly from the raw components of another\n bit-vector.","sig":null,"attributes":[{"value":"/ Creates a `BitVec<O, T>` directly from the raw components of another","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727578,"byte_end":727650,"line_start":181,"line_end":181,"column_start":2,"column_end":74}},{"value":"/ bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727652,"byte_end":727667,"line_start":182,"line_end":182,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727669,"byte_end":727672,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727674,"byte_end":727688,"line_start":184,"line_end":184,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727690,"byte_end":727693,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ [`Vec::from_raw_parts`](alloc::vec::Vec::from_raw_parts)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727695,"byte_end":727755,"line_start":186,"line_end":186,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727757,"byte_end":727760,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727762,"byte_end":727783,"line_start":188,"line_end":188,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727785,"byte_end":727788,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ This takes a `BitPtr`, rather than a `*mut T`. If you only have a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727790,"byte_end":727859,"line_start":190,"line_end":190,"column_start":2,"column_end":71}},{"value":"/ pointer, you can construct a `BitPtr` to its zeroth bit before calling","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727861,"byte_end":727935,"line_start":191,"line_end":191,"column_start":2,"column_end":76}},{"value":"/ this.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727937,"byte_end":727946,"line_start":192,"line_end":192,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727948,"byte_end":727951,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727953,"byte_end":727965,"line_start":194,"line_end":194,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727967,"byte_end":727970,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ This is highly unsafe, due to the number of invariants that aren’t","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":727972,"byte_end":728044,"line_start":196,"line_end":196,"column_start":2,"column_end":72}},{"value":"/ checked:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728046,"byte_end":728058,"line_start":197,"line_end":197,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728060,"byte_end":728063,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ - `bitptr` needs to have been previously allocated by `BitVec<O, T>`, or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728065,"byte_end":728141,"line_start":199,"line_end":199,"column_start":2,"column_end":78}},{"value":"/   constructed from a pointer allocated by [`Vec<T>`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728143,"byte_end":728200,"line_start":200,"line_end":200,"column_start":2,"column_end":59}},{"value":"/ - `T` needs to have the same size and alignment as what `bitptr` was","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728202,"byte_end":728274,"line_start":201,"line_end":201,"column_start":2,"column_end":74}},{"value":"/   allocated with. (`T` having a less strict alignment is not sufficient;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728276,"byte_end":728352,"line_start":202,"line_end":202,"column_start":2,"column_end":78}},{"value":"/   the alignment really needs to be equal to satisfy the [`dealloc`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728354,"byte_end":728425,"line_start":203,"line_end":203,"column_start":2,"column_end":73}},{"value":"/   requirement that memory must be allocated and deällocated with the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728427,"byte_end":728500,"line_start":204,"line_end":204,"column_start":2,"column_end":74}},{"value":"/   same layout.) However, you can safely cast between bare integers,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728502,"byte_end":728573,"line_start":205,"line_end":205,"column_start":2,"column_end":73}},{"value":"/   `BitSafe` integers, `Cell` wrappers, and atomic integers, as long as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728575,"byte_end":728649,"line_start":206,"line_end":206,"column_start":2,"column_end":76}},{"value":"/   they all have the same width.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728651,"byte_end":728686,"line_start":207,"line_end":207,"column_start":2,"column_end":37}},{"value":"/ - `length` needs to be less than or equal to capacity.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728688,"byte_end":728746,"line_start":208,"line_end":208,"column_start":2,"column_end":60}},{"value":"/ - `capacity` needs to be the capacity (in bits) that the bit-pointer was","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728748,"byte_end":728824,"line_start":209,"line_end":209,"column_start":2,"column_end":78}},{"value":"/   allocated with (less any head offset in `bitptr`).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728826,"byte_end":728882,"line_start":210,"line_end":210,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728884,"byte_end":728887,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ Violating these **will** cause problems. For example, it is **not** safe","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728889,"byte_end":728965,"line_start":212,"line_end":212,"column_start":2,"column_end":78}},{"value":"/ to build a `BitVec<_, u8>` from a pointer to a `u16` sequence and twice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":728967,"byte_end":729042,"line_start":213,"line_end":213,"column_start":2,"column_end":77}},{"value":"/ its original length, because the allocator cares about the alignment,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729044,"byte_end":729117,"line_start":214,"line_end":214,"column_start":2,"column_end":75}},{"value":"/ and these two types have different alignments. The buffer was allocated","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729119,"byte_end":729194,"line_start":215,"line_end":215,"column_start":2,"column_end":77}},{"value":"/ with alignment 2 (for `u16`), but after turning it into a `BitVec<_,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729196,"byte_end":729268,"line_start":216,"line_end":216,"column_start":2,"column_end":74}},{"value":"/ u8>`, it’ll be deällocated with alignment 1.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729270,"byte_end":729321,"line_start":217,"line_end":217,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729323,"byte_end":729326,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ The ownership of `bitptr`is effectively transferred to the `BitVec<O,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729328,"byte_end":729401,"line_start":219,"line_end":219,"column_start":2,"column_end":75}},{"value":"/ T>` which may then deällocate, reällocate, or change the contents of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729403,"byte_end":729477,"line_start":220,"line_end":220,"column_start":2,"column_end":74}},{"value":"/ memory pointed to by the bit-pointer at will. Ensure that nothing else","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729479,"byte_end":729553,"line_start":221,"line_end":221,"column_start":2,"column_end":76}},{"value":"/ uses the pointer after calling this function.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729555,"byte_end":729604,"line_start":222,"line_end":222,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729606,"byte_end":729609,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729611,"byte_end":729625,"line_start":224,"line_end":224,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729627,"byte_end":729630,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729632,"byte_end":729643,"line_start":226,"line_end":226,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729645,"byte_end":729672,"line_start":227,"line_end":227,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr as bv_ptr;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729674,"byte_end":729704,"line_start":228,"line_end":228,"column_start":2,"column_end":32}},{"value":"/ use core::mem::ManuallyDrop;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729706,"byte_end":729738,"line_start":229,"line_end":229,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729740,"byte_end":729743,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729745,"byte_end":729781,"line_start":231,"line_end":231,"column_start":2,"column_end":38}},{"value":"/ let mut bv = ManuallyDrop::new(bv);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729783,"byte_end":729822,"line_start":232,"line_end":232,"column_start":2,"column_end":41}},{"value":"/ let bp = bv.as_mut_bitptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729824,"byte_end":729856,"line_start":233,"line_end":233,"column_start":2,"column_end":34}},{"value":"/ let len = bv.len();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729858,"byte_end":729881,"line_start":234,"line_end":234,"column_start":2,"column_end":25}},{"value":"/ let cap = bv.capacity();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729883,"byte_end":729911,"line_start":235,"line_end":235,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729913,"byte_end":729916,"line_start":236,"line_end":236,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729918,"byte_end":729930,"line_start":237,"line_end":237,"column_start":2,"column_end":14}},{"value":"/   // Overwrite memory with the inverse bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729932,"byte_end":729980,"line_start":238,"line_end":238,"column_start":2,"column_end":50}},{"value":"/   for i in 0 .. len {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":729982,"byte_end":730007,"line_start":239,"line_end":239,"column_start":2,"column_end":27}},{"value":"/     let bp = bp.add(i);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730009,"byte_end":730036,"line_start":240,"line_end":240,"column_start":2,"column_end":29}},{"value":"/     bv_ptr::write(bp, !bv_ptr::read(bp.immut()));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730038,"byte_end":730091,"line_start":241,"line_end":241,"column_start":2,"column_end":55}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730093,"byte_end":730100,"line_start":242,"line_end":242,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730102,"byte_end":730105,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/   // Put everything back together into a `BitVec`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730107,"byte_end":730161,"line_start":244,"line_end":244,"column_start":2,"column_end":56}},{"value":"/   let rebuilt = BitVec::from_raw_parts(bp, len, cap);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730163,"byte_end":730220,"line_start":245,"line_end":245,"column_start":2,"column_end":59}},{"value":"/   assert_eq!(rebuilt, bits![1, 0, 1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730222,"byte_end":730270,"line_start":246,"line_end":246,"column_start":2,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730272,"byte_end":730277,"line_start":247,"line_end":247,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730279,"byte_end":730286,"line_start":248,"line_end":248,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730288,"byte_end":730291,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ [`Vec<T>`]: alloc::vec::Vec","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730293,"byte_end":730324,"line_start":250,"line_end":250,"column_start":2,"column_end":33}},{"value":"/ [`dealloc`]: alloc::alloc::GlobalAlloc::dealloc","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730326,"byte_end":730377,"line_start":251,"line_end":251,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730379,"byte_end":730388,"line_start":252,"line_end":252,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4296},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731061,"byte_end":731069,"line_start":282,"line_end":282,"column_start":9,"column_end":17},"name":"capacity","qualname":"<BitVec<O, T>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits the bit-vector can hold without reällocating.","sig":null,"attributes":[{"value":"/ Returns the number of bits the bit-vector can hold without reällocating.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730720,"byte_end":730797,"line_start":267,"line_end":267,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730799,"byte_end":730802,"line_start":268,"line_end":268,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730804,"byte_end":730818,"line_start":269,"line_end":269,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730820,"byte_end":730823,"line_start":270,"line_end":270,"column_start":2,"column_end":5}},{"value":"/ [`Vec::capacity`](alloc::vec::Vec::capacity)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730825,"byte_end":730873,"line_start":271,"line_end":271,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730875,"byte_end":730878,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730880,"byte_end":730894,"line_start":273,"line_end":273,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730896,"byte_end":730899,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730901,"byte_end":730912,"line_start":275,"line_end":275,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730914,"byte_end":730941,"line_start":276,"line_end":276,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730943,"byte_end":730946,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ let bv: BitVec = BitVec::with_capacity(100);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730948,"byte_end":730996,"line_start":278,"line_end":278,"column_start":2,"column_end":50}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":730998,"byte_end":731032,"line_start":279,"line_end":279,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731034,"byte_end":731041,"line_start":280,"line_end":280,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731043,"byte_end":731052,"line_start":281,"line_end":281,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4297},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732154,"byte_end":732161,"line_start":316,"line_end":316,"column_start":9,"column_end":16},"name":"reserve","qualname":"<BitVec<O, T>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more bits to be inserted in\n the given `BitVec<O, T>`. The collection may reserve more space to avoid\n frequent reällocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more bits to be inserted in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731422,"byte_end":731497,"line_start":292,"line_end":292,"column_start":2,"column_end":77}},{"value":"/ the given `BitVec<O, T>`. The collection may reserve more space to avoid","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731499,"byte_end":731575,"line_start":293,"line_end":293,"column_start":2,"column_end":78}},{"value":"/ frequent reällocations. After calling `reserve`, capacity will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731577,"byte_end":731647,"line_start":294,"line_end":294,"column_start":2,"column_end":71}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731649,"byte_end":731720,"line_start":295,"line_end":295,"column_start":2,"column_end":73}},{"value":"/ capacity is already sufficient.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731722,"byte_end":731757,"line_start":296,"line_end":296,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731759,"byte_end":731762,"line_start":297,"line_end":297,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731764,"byte_end":731778,"line_start":298,"line_end":298,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731780,"byte_end":731783,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve`](alloc::vec::Vec::reserve)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731785,"byte_end":731831,"line_start":300,"line_end":300,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731833,"byte_end":731836,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731838,"byte_end":731850,"line_start":302,"line_end":302,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731852,"byte_end":731855,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds the bit-vector’s limits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731857,"byte_end":731922,"line_start":304,"line_end":304,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731924,"byte_end":731927,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731929,"byte_end":731943,"line_start":306,"line_end":306,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731945,"byte_end":731948,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731950,"byte_end":731961,"line_start":308,"line_end":308,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731963,"byte_end":731990,"line_start":309,"line_end":309,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731992,"byte_end":731995,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":731997,"byte_end":732025,"line_start":311,"line_end":311,"column_start":2,"column_end":30}},{"value":"/ bv.reserve(100);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732027,"byte_end":732047,"line_start":312,"line_end":312,"column_start":2,"column_end":22}},{"value":"/ assert!(bv.capacity() >= 101);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732049,"byte_end":732083,"line_start":313,"line_end":313,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732085,"byte_end":732092,"line_start":314,"line_end":314,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732129,"byte_end":732143,"line_start":315,"line_end":315,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4298},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733160,"byte_end":733173,"line_start":347,"line_end":347,"column_start":9,"column_end":22},"name":"reserve_exact","qualname":"<BitVec<O, T>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more bits to be\n inserted in the given `BitVec<O, T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more bits to be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732253,"byte_end":732327,"line_start":320,"line_end":320,"column_start":2,"column_end":76}},{"value":"/ inserted in the given `BitVec<O, T>`. After calling `reserve_exact`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732329,"byte_end":732401,"line_start":321,"line_end":321,"column_start":2,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732403,"byte_end":732475,"line_start":322,"line_end":322,"column_start":2,"column_end":74}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732477,"byte_end":732532,"line_start":323,"line_end":323,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732534,"byte_end":732537,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732539,"byte_end":732609,"line_start":325,"line_end":325,"column_start":2,"column_end":72}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732611,"byte_end":732683,"line_start":326,"line_end":326,"column_start":2,"column_end":74}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732685,"byte_end":732749,"line_start":327,"line_end":327,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732751,"byte_end":732754,"line_start":328,"line_end":328,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732756,"byte_end":732770,"line_start":329,"line_end":329,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732772,"byte_end":732775,"line_start":330,"line_end":330,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve_exact`](alloc::vec::Vec::reserve_exact)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732777,"byte_end":732835,"line_start":331,"line_end":331,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732837,"byte_end":732840,"line_start":332,"line_end":332,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732842,"byte_end":732854,"line_start":333,"line_end":333,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732856,"byte_end":732859,"line_start":334,"line_end":334,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds the vector’s limits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732861,"byte_end":732922,"line_start":335,"line_end":335,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732924,"byte_end":732927,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732929,"byte_end":732943,"line_start":337,"line_end":337,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732945,"byte_end":732948,"line_start":338,"line_end":338,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732950,"byte_end":732961,"line_start":339,"line_end":339,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732963,"byte_end":732990,"line_start":340,"line_end":340,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732992,"byte_end":732995,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":732997,"byte_end":733025,"line_start":342,"line_end":342,"column_start":2,"column_end":30}},{"value":"/ bv.reserve_exact(100);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733027,"byte_end":733053,"line_start":343,"line_end":343,"column_start":2,"column_end":28}},{"value":"/ assert!(bv.capacity() >= 101);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733055,"byte_end":733089,"line_start":344,"line_end":344,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733091,"byte_end":733098,"line_start":345,"line_end":345,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733135,"byte_end":733149,"line_start":346,"line_end":346,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4299},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733927,"byte_end":733940,"line_start":372,"line_end":372,"column_start":9,"column_end":22},"name":"shrink_to_fit","qualname":"<BitVec<O, T>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the bit-vector as much as possible.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the bit-vector as much as possible.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733271,"byte_end":733334,"line_start":351,"line_end":351,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733336,"byte_end":733339,"line_start":352,"line_end":352,"column_start":2,"column_end":5}},{"value":"/ It will drop down as close as possible to the length, but the allocator","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733341,"byte_end":733416,"line_start":353,"line_end":353,"column_start":2,"column_end":77}},{"value":"/ may still inform the bit-vector that there is space for a few more bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733418,"byte_end":733494,"line_start":354,"line_end":354,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733496,"byte_end":733499,"line_start":355,"line_end":355,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733501,"byte_end":733515,"line_start":356,"line_end":356,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733517,"byte_end":733520,"line_start":357,"line_end":357,"column_start":2,"column_end":5}},{"value":"/ [`Vec::shrink_to_fit`](alloc::vec::Vec::shrink_to_fit)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733522,"byte_end":733580,"line_start":358,"line_end":358,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733582,"byte_end":733585,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733587,"byte_end":733601,"line_start":360,"line_end":360,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733603,"byte_end":733606,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733608,"byte_end":733619,"line_start":362,"line_end":362,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733621,"byte_end":733648,"line_start":363,"line_end":363,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733650,"byte_end":733653,"line_start":364,"line_end":364,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(100);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733655,"byte_end":733707,"line_start":365,"line_end":365,"column_start":2,"column_end":54}},{"value":"/ bv.extend([false, true, false].iter().copied());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733709,"byte_end":733761,"line_start":366,"line_end":366,"column_start":2,"column_end":54}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733763,"byte_end":733797,"line_start":367,"line_end":367,"column_start":2,"column_end":36}},{"value":"/ bv.shrink_to_fit();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733799,"byte_end":733822,"line_start":368,"line_end":368,"column_start":2,"column_end":25}},{"value":"/ assert!(bv.capacity() >= 3);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733824,"byte_end":733856,"line_start":369,"line_end":369,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733858,"byte_end":733865,"line_start":370,"line_end":370,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":733902,"byte_end":733916,"line_start":371,"line_end":371,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4301},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734125,"byte_end":734141,"line_start":380,"line_end":380,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitVec<O, T>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> BitBox<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734019,"byte_end":734036,"line_start":377,"line_end":377,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734038,"byte_end":734068,"line_start":378,"line_end":378,"column_start":2,"column_end":32}},{"value":"deprecated = \"Prefer `into_boxed_bitslice`\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734070,"byte_end":734116,"line_start":379,"line_end":379,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":4302},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735737,"byte_end":735745,"line_start":441,"line_end":441,"column_start":9,"column_end":17},"name":"truncate","qualname":"<BitVec<O, T>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the bit-vector, keeping the first `len` bits and dropping the\n rest.","sig":null,"attributes":[{"value":"/ Shortens the bit-vector, keeping the first `len` bits and dropping the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734200,"byte_end":734274,"line_start":384,"line_end":384,"column_start":2,"column_end":76}},{"value":"/ rest.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734276,"byte_end":734285,"line_start":385,"line_end":385,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734287,"byte_end":734290,"line_start":386,"line_end":386,"column_start":2,"column_end":5}},{"value":"/ If `len` is greater than the bit-vector’s current length, this has no","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734292,"byte_end":734367,"line_start":387,"line_end":387,"column_start":2,"column_end":75}},{"value":"/ effect.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734369,"byte_end":734380,"line_start":388,"line_end":388,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734382,"byte_end":734385,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ The [`drain`] method can emulate `truncate`, but causes the excess bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734387,"byte_end":734462,"line_start":390,"line_end":390,"column_start":2,"column_end":77}},{"value":"/ to be returned instead of dropped.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734464,"byte_end":734502,"line_start":391,"line_end":391,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734504,"byte_end":734507,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ Note that this method has no effect on the allocated capacity of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734509,"byte_end":734581,"line_start":393,"line_end":393,"column_start":2,"column_end":74}},{"value":"/ bit-vector, **nor does it erase truncated memory**. Bits in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734583,"byte_end":734650,"line_start":394,"line_end":394,"column_start":2,"column_end":69}},{"value":"/ allocated memory that are outside of the [`as_bitslice`] view always","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734652,"byte_end":734724,"line_start":395,"line_end":395,"column_start":2,"column_end":74}},{"value":"/ have **unspecified** values, and cannot be relied upon to be zero.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734726,"byte_end":734796,"line_start":396,"line_end":396,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734798,"byte_end":734801,"line_start":397,"line_end":397,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734803,"byte_end":734817,"line_start":398,"line_end":398,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734819,"byte_end":734822,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ [`Vec::truncate`](alloc::vec::Vec::truncate)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734824,"byte_end":734872,"line_start":400,"line_end":400,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734874,"byte_end":734877,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734879,"byte_end":734893,"line_start":402,"line_end":402,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734895,"byte_end":734898,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ Truncating a five-bit vector to two bits:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734900,"byte_end":734945,"line_start":404,"line_end":404,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734947,"byte_end":734950,"line_start":405,"line_end":405,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734952,"byte_end":734963,"line_start":406,"line_end":406,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734965,"byte_end":734992,"line_start":407,"line_end":407,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734994,"byte_end":734997,"line_start":408,"line_end":408,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 5];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":734999,"byte_end":735030,"line_start":409,"line_end":409,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735032,"byte_end":735051,"line_start":410,"line_end":410,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735053,"byte_end":735081,"line_start":411,"line_end":411,"column_start":2,"column_end":30}},{"value":"/ assert!(bv.as_raw_slice()[0].count_ones() >= 5);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735083,"byte_end":735135,"line_start":412,"line_end":412,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735137,"byte_end":735144,"line_start":413,"line_end":413,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735146,"byte_end":735149,"line_start":414,"line_end":414,"column_start":2,"column_end":5}},{"value":"/ No truncation occurs when `len` is greater than the vector’s current","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735151,"byte_end":735225,"line_start":415,"line_end":415,"column_start":2,"column_end":74}},{"value":"/ length:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735227,"byte_end":735238,"line_start":416,"line_end":416,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735240,"byte_end":735243,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735245,"byte_end":735256,"line_start":418,"line_end":418,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735258,"byte_end":735285,"line_start":419,"line_end":419,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735287,"byte_end":735290,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735292,"byte_end":735323,"line_start":421,"line_end":421,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(8);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735325,"byte_end":735344,"line_start":422,"line_end":422,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 3);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735346,"byte_end":735374,"line_start":423,"line_end":423,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735376,"byte_end":735383,"line_start":424,"line_end":424,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735385,"byte_end":735388,"line_start":425,"line_end":425,"column_start":2,"column_end":5}},{"value":"/ Truncating when `len == 0` is equivalent to calling the [`clear`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735390,"byte_end":735459,"line_start":426,"line_end":426,"column_start":2,"column_end":71}},{"value":"/ method.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735461,"byte_end":735472,"line_start":427,"line_end":427,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735474,"byte_end":735477,"line_start":428,"line_end":428,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735479,"byte_end":735490,"line_start":429,"line_end":429,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735492,"byte_end":735519,"line_start":430,"line_end":430,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735521,"byte_end":735524,"line_start":431,"line_end":431,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735526,"byte_end":735557,"line_start":432,"line_end":432,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735559,"byte_end":735578,"line_start":433,"line_end":433,"column_start":2,"column_end":21}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735580,"byte_end":735607,"line_start":434,"line_end":434,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735609,"byte_end":735616,"line_start":435,"line_end":435,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735618,"byte_end":735621,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ [`as_bitslice`]: Self::as_bitslice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735623,"byte_end":735661,"line_start":437,"line_end":437,"column_start":2,"column_end":40}},{"value":"/ [`clear`]: Self::clear","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735663,"byte_end":735689,"line_start":438,"line_end":438,"column_start":2,"column_end":28}},{"value":"/ [`drain`]: Self::drain","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735691,"byte_end":735717,"line_start":439,"line_end":439,"column_start":2,"column_end":28}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735719,"byte_end":735728,"line_start":440,"line_end":440,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4303},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736028,"byte_end":736036,"line_start":452,"line_end":452,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitVec<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735862,"byte_end":735879,"line_start":448,"line_end":448,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735881,"byte_end":735911,"line_start":449,"line_end":449,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `as_bitslice`, or `as_raw_slice` to view the \\\n\t                underlying memory\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":735913,"byte_end":736019,"line_start":450,"line_end":451,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4304},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736281,"byte_end":736293,"line_start":461,"line_end":461,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitVec<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736107,"byte_end":736124,"line_start":457,"line_end":457,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736126,"byte_end":736156,"line_start":458,"line_end":458,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `as_mut_bitslice`, or `as_mut_raw_slice` to view the \\\n\t                underlying memory\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736158,"byte_end":736272,"line_start":459,"line_end":460,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4305},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736553,"byte_end":736559,"line_start":470,"line_end":470,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitVec<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736376,"byte_end":736393,"line_start":466,"line_end":466,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736395,"byte_end":736425,"line_start":467,"line_end":467,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `as_bitptr`, or `as_raw_ptr` to take the address of \\\n\t                the underlying memory\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736427,"byte_end":736544,"line_start":468,"line_end":469,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":4306},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736817,"byte_end":736827,"line_start":479,"line_end":479,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitVec<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736632,"byte_end":736649,"line_start":475,"line_end":475,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736651,"byte_end":736681,"line_start":476,"line_end":476,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `as_mut_bitptr`, or `as_mut_raw_ptr` to take the \\\n\t                address of the underlying memory\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736683,"byte_end":736808,"line_start":477,"line_end":478,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4307},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738894,"byte_end":738901,"line_start":545,"line_end":545,"column_start":16,"column_end":23},"name":"set_len","qualname":"<BitVec<O, T>>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Forces the length of the bit-vector to `new_len`.","sig":null,"attributes":[{"value":"/ Forces the length of the bit-vector to `new_len`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736890,"byte_end":736943,"line_start":483,"line_end":483,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736945,"byte_end":736948,"line_start":484,"line_end":484,"column_start":2,"column_end":5}},{"value":"/ This is a low-level operation that maintains none of the normal","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":736950,"byte_end":737017,"line_start":485,"line_end":485,"column_start":2,"column_end":69}},{"value":"/ invariants of the type. Normally changing the length of a bit-vector is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737019,"byte_end":737094,"line_start":486,"line_end":486,"column_start":2,"column_end":77}},{"value":"/ done using one of the safe operations instead, such as [`truncate`],","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737096,"byte_end":737168,"line_start":487,"line_end":487,"column_start":2,"column_end":74}},{"value":"/ [`resize`], [`extend`], or [`clear`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737170,"byte_end":737211,"line_start":488,"line_end":488,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737213,"byte_end":737216,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737218,"byte_end":737232,"line_start":490,"line_end":490,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737234,"byte_end":737237,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ [`Vec::set_len`](alloc::vec::Vec::set_len)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737239,"byte_end":737285,"line_start":492,"line_end":492,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737287,"byte_end":737290,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737292,"byte_end":737304,"line_start":494,"line_end":494,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737306,"byte_end":737309,"line_start":495,"line_end":495,"column_start":2,"column_end":5}},{"value":"/ - `new_len` must be less than or equal to [`self.capacity()`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737311,"byte_end":737377,"line_start":496,"line_end":496,"column_start":2,"column_end":68}},{"value":"/ - The memory elements underlying `old_len .. new_len` must be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737379,"byte_end":737444,"line_start":497,"line_end":497,"column_start":2,"column_end":67}},{"value":"/   initialized.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737446,"byte_end":737464,"line_start":498,"line_end":498,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737466,"byte_end":737469,"line_start":499,"line_end":499,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737471,"byte_end":737485,"line_start":500,"line_end":500,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737487,"byte_end":737490,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ This method can be useful for situations in which the bit-vector is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737492,"byte_end":737563,"line_start":502,"line_end":502,"column_start":2,"column_end":73}},{"value":"/ serving as a buffer for other code, particularly over FFI:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737565,"byte_end":737627,"line_start":503,"line_end":503,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737629,"byte_end":737632,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737634,"byte_end":737645,"line_start":505,"line_end":505,"column_start":2,"column_end":13}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737647,"byte_end":737673,"line_start":506,"line_end":506,"column_start":2,"column_end":28}},{"value":"/ # #![allow(improper_ctypes)]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737675,"byte_end":737707,"line_start":507,"line_end":507,"column_start":2,"column_end":34}},{"value":"/ # const ERL_OK: i32 = 0;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737709,"byte_end":737737,"line_start":508,"line_end":508,"column_start":2,"column_end":30}},{"value":"/ # extern \"C\" {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737739,"byte_end":737757,"line_start":509,"line_end":509,"column_start":2,"column_end":20}},{"value":"/ #   fn erl_read_bits(","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737759,"byte_end":737784,"line_start":510,"line_end":510,"column_start":2,"column_end":27}},{"value":"/ #     bv: *mut BitVec<Msb0, u8>,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737786,"byte_end":737822,"line_start":511,"line_end":511,"column_start":2,"column_end":38}},{"value":"/ #     bits_reqd: usize,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737824,"byte_end":737851,"line_start":512,"line_end":512,"column_start":2,"column_end":29}},{"value":"/ #     bits_read: *mut usize,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737853,"byte_end":737885,"line_start":513,"line_end":513,"column_start":2,"column_end":34}},{"value":"/ #   ) -> i32;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737887,"byte_end":737904,"line_start":514,"line_end":514,"column_start":2,"column_end":19}},{"value":"/ # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737906,"byte_end":737913,"line_start":515,"line_end":515,"column_start":2,"column_end":9}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737915,"byte_end":737942,"line_start":516,"line_end":516,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737944,"byte_end":737947,"line_start":517,"line_end":517,"column_start":2,"column_end":5}},{"value":"/ // `bitvec` could pair with `rustler` for a better bitstream","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":737949,"byte_end":738013,"line_start":518,"line_end":518,"column_start":2,"column_end":66}},{"value":"/ type ErlBitstring = BitVec<Msb0, u8>;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738015,"byte_end":738056,"line_start":519,"line_end":519,"column_start":2,"column_end":43}},{"value":"/ # pub fn _test() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738058,"byte_end":738080,"line_start":520,"line_end":520,"column_start":2,"column_end":24}},{"value":"/ let mut bits_read = 0;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738082,"byte_end":738108,"line_start":521,"line_end":521,"column_start":2,"column_end":28}},{"value":"/ // An imaginary Erlang function wants a large bit buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738110,"byte_end":738171,"line_start":522,"line_end":522,"column_start":2,"column_end":63}},{"value":"/ let mut buf = ErlBitstring::with_capacity(32_768);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738173,"byte_end":738227,"line_start":523,"line_end":523,"column_start":2,"column_end":56}},{"value":"/ // SAFETY: When `erl_read_bits` returns `ERL_OK`, it holds that:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738229,"byte_end":738297,"line_start":524,"line_end":524,"column_start":2,"column_end":70}},{"value":"/ // 1. `bits_read` bits were initialized.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738299,"byte_end":738343,"line_start":525,"line_end":525,"column_start":2,"column_end":46}},{"value":"/ // 2. `bits_read` <= the capacity (32_768)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738345,"byte_end":738391,"line_start":526,"line_end":526,"column_start":2,"column_end":48}},{"value":"/ // which makes `set_len` safe to call.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738393,"byte_end":738435,"line_start":527,"line_end":527,"column_start":2,"column_end":44}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738437,"byte_end":738449,"line_start":528,"line_end":528,"column_start":2,"column_end":14}},{"value":"/   // Make the FFI call…","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738451,"byte_end":738480,"line_start":529,"line_end":529,"column_start":2,"column_end":29}},{"value":"/   let status = erl_read_bits(&mut buf, 10, &mut bits_read);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738482,"byte_end":738545,"line_start":530,"line_end":530,"column_start":2,"column_end":65}},{"value":"/   if status == ERL_OK {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738547,"byte_end":738574,"line_start":531,"line_end":531,"column_start":2,"column_end":29}},{"value":"/     // …and update the length to what was read in.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738576,"byte_end":738632,"line_start":532,"line_end":532,"column_start":2,"column_end":56}},{"value":"/     buf.set_len(bits_read);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738634,"byte_end":738665,"line_start":533,"line_end":533,"column_start":2,"column_end":33}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738667,"byte_end":738674,"line_start":534,"line_end":534,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738676,"byte_end":738681,"line_start":535,"line_end":535,"column_start":2,"column_end":7}},{"value":"/ # }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738683,"byte_end":738690,"line_start":536,"line_end":536,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738692,"byte_end":738699,"line_start":537,"line_end":537,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738701,"byte_end":738704,"line_start":538,"line_end":538,"column_start":2,"column_end":5}},{"value":"/ [`clear`]: Self::clear","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738706,"byte_end":738732,"line_start":539,"line_end":539,"column_start":2,"column_end":28}},{"value":"/ [`extend`]: Self::extend","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738734,"byte_end":738762,"line_start":540,"line_end":540,"column_start":2,"column_end":30}},{"value":"/ [`resize`]: Self::resize","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738764,"byte_end":738792,"line_start":541,"line_end":541,"column_start":2,"column_end":30}},{"value":"/ [`self.capacity()`]: Self::capacity","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738794,"byte_end":738833,"line_start":542,"line_end":542,"column_start":2,"column_end":41}},{"value":"/ [`truncate`]: Self::truncate","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738835,"byte_end":738867,"line_start":543,"line_end":543,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":738869,"byte_end":738878,"line_start":544,"line_end":544,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4308},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739867,"byte_end":739878,"line_start":589,"line_end":589,"column_start":9,"column_end":20},"name":"swap_remove","qualname":"<BitVec<O, T>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a bit from the bit-vector and returns it.","sig":null,"attributes":[{"value":"/ Removes a bit from the bit-vector and returns it.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739244,"byte_end":739297,"line_start":562,"line_end":562,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739299,"byte_end":739302,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ The removed bit is replaced by the last bit of the bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739304,"byte_end":739370,"line_start":564,"line_end":564,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739372,"byte_end":739375,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739377,"byte_end":739426,"line_start":566,"line_end":566,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739428,"byte_end":739431,"line_start":567,"line_end":567,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739433,"byte_end":739447,"line_start":568,"line_end":568,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739449,"byte_end":739452,"line_start":569,"line_end":569,"column_start":2,"column_end":5}},{"value":"/ [`Vec::swap_remove`](alloc::vec::Vec::swap_remove)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739454,"byte_end":739508,"line_start":570,"line_end":570,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739510,"byte_end":739513,"line_start":571,"line_end":571,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739515,"byte_end":739527,"line_start":572,"line_end":572,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739529,"byte_end":739532,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739534,"byte_end":739573,"line_start":574,"line_end":574,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739575,"byte_end":739578,"line_start":575,"line_end":575,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739580,"byte_end":739594,"line_start":576,"line_end":576,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739596,"byte_end":739599,"line_start":577,"line_end":577,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739601,"byte_end":739612,"line_start":578,"line_end":578,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739614,"byte_end":739641,"line_start":579,"line_end":579,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739643,"byte_end":739646,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739648,"byte_end":739688,"line_start":581,"line_end":581,"column_start":2,"column_end":42}},{"value":"/ assert!(!bv.swap_remove(1));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739690,"byte_end":739722,"line_start":582,"line_end":582,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits![0, 1, 1, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739724,"byte_end":739762,"line_start":583,"line_end":583,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739764,"byte_end":739767,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ assert!(!bv.swap_remove(0));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739769,"byte_end":739801,"line_start":585,"line_end":585,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits![0, 1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739803,"byte_end":739838,"line_start":586,"line_end":586,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739840,"byte_end":739847,"line_start":587,"line_end":587,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":739849,"byte_end":739858,"line_start":588,"line_end":588,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4309},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740613,"byte_end":740619,"line_start":622,"line_end":622,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitVec<O, T>>::insert","value":"pub fn insert(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a bit at position `index` within the bit-vector, shifting all\n bits after it to the right.","sig":null,"attributes":[{"value":"/ Inserts a bit at position `index` within the bit-vector, shifting all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740101,"byte_end":740174,"line_start":599,"line_end":599,"column_start":2,"column_end":75}},{"value":"/ bits after it to the right.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740176,"byte_end":740207,"line_start":600,"line_end":600,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740209,"byte_end":740212,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740214,"byte_end":740228,"line_start":602,"line_end":602,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740230,"byte_end":740233,"line_start":603,"line_end":603,"column_start":2,"column_end":5}},{"value":"/ [`Vec::insert`](alloc::vec::Vec::insert)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740235,"byte_end":740279,"line_start":604,"line_end":604,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740281,"byte_end":740284,"line_start":605,"line_end":605,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740286,"byte_end":740298,"line_start":606,"line_end":606,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740300,"byte_end":740303,"line_start":607,"line_end":607,"column_start":2,"column_end":5}},{"value":"/ Panics if `index > len`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740305,"byte_end":740333,"line_start":608,"line_end":608,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740335,"byte_end":740338,"line_start":609,"line_end":609,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740340,"byte_end":740354,"line_start":610,"line_end":610,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740356,"byte_end":740359,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740361,"byte_end":740372,"line_start":612,"line_end":612,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740374,"byte_end":740401,"line_start":613,"line_end":613,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740403,"byte_end":740406,"line_start":614,"line_end":614,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 5];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740408,"byte_end":740439,"line_start":615,"line_end":615,"column_start":2,"column_end":33}},{"value":"/ bv.insert(5, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740441,"byte_end":740464,"line_start":616,"line_end":616,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bv, bits![0, 0, 0, 0, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740466,"byte_end":740510,"line_start":617,"line_end":617,"column_start":2,"column_end":46}},{"value":"/ bv.insert(2, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740512,"byte_end":740535,"line_start":618,"line_end":618,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bv, bits![0, 0, 1, 0, 0, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740537,"byte_end":740584,"line_start":619,"line_end":619,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740586,"byte_end":740593,"line_start":620,"line_end":620,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740595,"byte_end":740604,"line_start":621,"line_end":621,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4310},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741254,"byte_end":741260,"line_start":649,"line_end":649,"column_start":9,"column_end":15},"name":"remove","qualname":"<BitVec<O, T>>::remove","value":"pub fn remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the bit at position `index` within the bit-vector,\n shifting all bits after it to the left.","sig":null,"attributes":[{"value":"/ Removes and returns the bit at position `index` within the bit-vector,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740798,"byte_end":740872,"line_start":628,"line_end":628,"column_start":2,"column_end":76}},{"value":"/ shifting all bits after it to the left.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740874,"byte_end":740917,"line_start":629,"line_end":629,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740919,"byte_end":740922,"line_start":630,"line_end":630,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740924,"byte_end":740938,"line_start":631,"line_end":631,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740940,"byte_end":740943,"line_start":632,"line_end":632,"column_start":2,"column_end":5}},{"value":"/ [`Vec::remove`](alloc::vec::Vec::remove)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740945,"byte_end":740989,"line_start":633,"line_end":633,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740991,"byte_end":740994,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":740996,"byte_end":741008,"line_start":635,"line_end":635,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741010,"byte_end":741013,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741015,"byte_end":741054,"line_start":637,"line_end":637,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741056,"byte_end":741059,"line_start":638,"line_end":638,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741061,"byte_end":741075,"line_start":639,"line_end":639,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741077,"byte_end":741080,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741082,"byte_end":741093,"line_start":641,"line_end":641,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741095,"byte_end":741122,"line_start":642,"line_end":642,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741124,"byte_end":741127,"line_start":643,"line_end":643,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741129,"byte_end":741163,"line_start":644,"line_end":644,"column_start":2,"column_end":36}},{"value":"/ assert!(bv.remove(1));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741165,"byte_end":741191,"line_start":645,"line_end":645,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(bv, bits![0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741193,"byte_end":741225,"line_start":646,"line_end":646,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741227,"byte_end":741234,"line_start":647,"line_end":647,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741236,"byte_end":741245,"line_start":648,"line_end":648,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4311},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742279,"byte_end":742285,"line_start":685,"line_end":685,"column_start":9,"column_end":15},"name":"retain","qualname":"<BitVec<O, T>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the bits specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the bits specified by the predicate.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741498,"byte_end":741551,"line_start":659,"line_end":659,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741553,"byte_end":741556,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ In other words, remove all bits `b` such that `func(idx(b), &b)` returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741558,"byte_end":741634,"line_start":661,"line_end":661,"column_start":2,"column_end":78}},{"value":"/ `false`. This method operates in place, visiting each bit exactly once","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741636,"byte_end":741710,"line_start":662,"line_end":662,"column_start":2,"column_end":76}},{"value":"/ in the original order, and preserves the order of the retained bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741712,"byte_end":741784,"line_start":663,"line_end":663,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741786,"byte_end":741789,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741791,"byte_end":741805,"line_start":665,"line_end":665,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741807,"byte_end":741810,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ [`Vec::retain`](alloc::vec::Vec::retain)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741812,"byte_end":741856,"line_start":667,"line_end":667,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741858,"byte_end":741861,"line_start":668,"line_end":668,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741863,"byte_end":741884,"line_start":669,"line_end":669,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741886,"byte_end":741889,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the retention","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741891,"byte_end":741963,"line_start":671,"line_end":671,"column_start":2,"column_end":74}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":741965,"byte_end":742039,"line_start":672,"line_end":672,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742041,"byte_end":742051,"line_start":673,"line_end":673,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742053,"byte_end":742056,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742058,"byte_end":742072,"line_start":675,"line_end":675,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742074,"byte_end":742077,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742079,"byte_end":742090,"line_start":677,"line_end":677,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742092,"byte_end":742119,"line_start":678,"line_end":678,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742121,"byte_end":742124,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742126,"byte_end":742169,"line_start":680,"line_end":680,"column_start":2,"column_end":45}},{"value":"/ bv.retain(|i, b| (i % 2 == 0) ^ b);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742171,"byte_end":742210,"line_start":681,"line_end":681,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742212,"byte_end":742250,"line_start":682,"line_end":682,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742252,"byte_end":742259,"line_start":683,"line_end":683,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":742261,"byte_end":742270,"line_start":684,"line_end":684,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4313},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743440,"byte_end":743444,"line_start":730,"line_end":730,"column_start":9,"column_end":13},"name":"push","qualname":"<BitVec<O, T>>::push","value":"pub fn push(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Appends a bit to the back of a collection.","sig":null,"attributes":[{"value":"/ Appends a bit to the back of a collection.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743012,"byte_end":743058,"line_start":709,"line_end":709,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743060,"byte_end":743063,"line_start":710,"line_end":710,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743065,"byte_end":743079,"line_start":711,"line_end":711,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743081,"byte_end":743084,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ [`Vec::push`](alloc::vec::Vec::push)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743086,"byte_end":743126,"line_start":713,"line_end":713,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743128,"byte_end":743131,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743133,"byte_end":743145,"line_start":715,"line_end":715,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743147,"byte_end":743150,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ Panics if the number of bits in the bit-vector exceeds the maximum","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743152,"byte_end":743222,"line_start":717,"line_end":717,"column_start":2,"column_end":72}},{"value":"/ bit-vector capacity.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743224,"byte_end":743248,"line_start":718,"line_end":718,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743250,"byte_end":743253,"line_start":719,"line_end":719,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743255,"byte_end":743269,"line_start":720,"line_end":720,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743271,"byte_end":743274,"line_start":721,"line_end":721,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743276,"byte_end":743287,"line_start":722,"line_end":722,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743289,"byte_end":743316,"line_start":723,"line_end":723,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743318,"byte_end":743321,"line_start":724,"line_end":724,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743323,"byte_end":743354,"line_start":725,"line_end":725,"column_start":2,"column_end":33}},{"value":"/ bv.push(true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743356,"byte_end":743374,"line_start":726,"line_end":726,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(bv.count_ones(), 1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743376,"byte_end":743411,"line_start":727,"line_end":727,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743413,"byte_end":743420,"line_start":728,"line_end":728,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743422,"byte_end":743431,"line_start":729,"line_end":729,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4315},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744383,"byte_end":744386,"line_start":768,"line_end":768,"column_start":9,"column_end":12},"name":"pop","qualname":"<BitVec<O, T>>::pop","value":"pub fn pop(&mut Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last bit from a bit-vector and returns it, or [`None`] if it\n is empty.","sig":null,"attributes":[{"value":"/ Removes the last bit from a bit-vector and returns it, or [`None`] if it","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":743968,"byte_end":744044,"line_start":749,"line_end":749,"column_start":2,"column_end":78}},{"value":"/ is empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744046,"byte_end":744059,"line_start":750,"line_end":750,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744061,"byte_end":744064,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744066,"byte_end":744080,"line_start":752,"line_end":752,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744082,"byte_end":744085,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ [`Vec::pop`](alloc::vec::Vec::pop)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744087,"byte_end":744125,"line_start":754,"line_end":754,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744127,"byte_end":744130,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744132,"byte_end":744146,"line_start":756,"line_end":756,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744148,"byte_end":744151,"line_start":757,"line_end":757,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744153,"byte_end":744164,"line_start":758,"line_end":758,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744166,"byte_end":744193,"line_start":759,"line_end":759,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744195,"byte_end":744198,"line_start":760,"line_end":760,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744200,"byte_end":744234,"line_start":761,"line_end":761,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(bv.pop(), Some(true));","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744236,"byte_end":744273,"line_start":762,"line_end":762,"column_start":2,"column_end":39}},{"value":"/ assert_eq!(bv, bits![0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744275,"byte_end":744307,"line_start":763,"line_end":763,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744309,"byte_end":744316,"line_start":764,"line_end":764,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744318,"byte_end":744321,"line_start":765,"line_end":765,"column_start":2,"column_end":5}},{"value":"/ [`None`]: core::option::Option::None","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744323,"byte_end":744363,"line_start":766,"line_end":766,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744365,"byte_end":744374,"line_start":767,"line_end":767,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4316},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745290,"byte_end":745296,"line_start":808,"line_end":808,"column_start":9,"column_end":15},"name":"append","qualname":"<BitVec<O, T>>::append","value":"pub fn append<O2, T2>(&mut Self, &mut BitVec<O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Moves all the bits of `other` into `self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the bits of `other` into `self`, leaving `other` empty.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744584,"byte_end":744653,"line_start":779,"line_end":779,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744655,"byte_end":744658,"line_start":780,"line_end":780,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744660,"byte_end":744674,"line_start":781,"line_end":781,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744676,"byte_end":744679,"line_start":782,"line_end":782,"column_start":2,"column_end":5}},{"value":"/ [`Vec::append`](alloc::vec::Vec::append)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744681,"byte_end":744725,"line_start":783,"line_end":783,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744727,"byte_end":744730,"line_start":784,"line_end":784,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744732,"byte_end":744753,"line_start":785,"line_end":785,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744755,"byte_end":744758,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ This permits `other` to have different type parameters than `self`, and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744760,"byte_end":744835,"line_start":787,"line_end":787,"column_start":2,"column_end":77}},{"value":"/ does not require that it be of literally `Self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744837,"byte_end":744889,"line_start":788,"line_end":788,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744891,"byte_end":744894,"line_start":789,"line_end":789,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744896,"byte_end":744908,"line_start":790,"line_end":790,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744910,"byte_end":744913,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ Panics if the number of bits overflows the maximum bit-vector capacity.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744915,"byte_end":744990,"line_start":792,"line_end":792,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744992,"byte_end":744995,"line_start":793,"line_end":793,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":744997,"byte_end":745011,"line_start":794,"line_end":794,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745013,"byte_end":745016,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745018,"byte_end":745029,"line_start":796,"line_end":796,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745031,"byte_end":745058,"line_start":797,"line_end":797,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745060,"byte_end":745063,"line_start":798,"line_end":798,"column_start":2,"column_end":5}},{"value":"/ let mut bv1 = bitvec![Msb0, u16; 0; 10];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745065,"byte_end":745109,"line_start":799,"line_end":799,"column_start":2,"column_end":46}},{"value":"/ let mut bv2 = bitvec![Lsb0, u32; 1; 10];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745111,"byte_end":745155,"line_start":800,"line_end":800,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745157,"byte_end":745160,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ bv1.append(&mut bv2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745162,"byte_end":745187,"line_start":802,"line_end":802,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745189,"byte_end":745192,"line_start":803,"line_end":803,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv1.count_ones(), 10);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745194,"byte_end":745231,"line_start":804,"line_end":804,"column_start":2,"column_end":39}},{"value":"/ assert!(bv2.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745233,"byte_end":745261,"line_start":805,"line_end":805,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745263,"byte_end":745270,"line_start":806,"line_end":806,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745272,"byte_end":745281,"line_start":807,"line_end":807,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4319},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746641,"byte_end":746646,"line_start":854,"line_end":854,"column_start":9,"column_end":14},"name":"drain","qualname":"<BitVec<O, T>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, O, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the\n bit-vector and yields the removed bits.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745611,"byte_end":745682,"line_start":821,"line_end":821,"column_start":2,"column_end":73}},{"value":"/ bit-vector and yields the removed bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745684,"byte_end":745727,"line_start":822,"line_end":822,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745729,"byte_end":745732,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ When the iterator **is** dropped, all bits in the range are removed from","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745734,"byte_end":745810,"line_start":824,"line_end":824,"column_start":2,"column_end":78}},{"value":"/ the bit-vector, even if the iterator was not fully consumed. If the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745812,"byte_end":745883,"line_start":825,"line_end":825,"column_start":2,"column_end":73}},{"value":"/ iterator **is not** dropped (with [`mem::forget`] for example), it is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745885,"byte_end":745958,"line_start":826,"line_end":826,"column_start":2,"column_end":75}},{"value":"/ unspecified how many bits are removed.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":745960,"byte_end":746002,"line_start":827,"line_end":827,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746004,"byte_end":746007,"line_start":828,"line_end":828,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746009,"byte_end":746023,"line_start":829,"line_end":829,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746025,"byte_end":746028,"line_start":830,"line_end":830,"column_start":2,"column_end":5}},{"value":"/ [`Vec::drain`](alloc::vec::Vec::drain)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746030,"byte_end":746072,"line_start":831,"line_end":831,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746074,"byte_end":746077,"line_start":832,"line_end":832,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746079,"byte_end":746091,"line_start":833,"line_end":833,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746093,"byte_end":746096,"line_start":834,"line_end":834,"column_start":2,"column_end":5}},{"value":"/ Panics if the starting point is greater than the end point or if the end","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746098,"byte_end":746174,"line_start":835,"line_end":835,"column_start":2,"column_end":78}},{"value":"/ point is greater than the length of the bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746176,"byte_end":746231,"line_start":836,"line_end":836,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746233,"byte_end":746236,"line_start":837,"line_end":837,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746238,"byte_end":746249,"line_start":838,"line_end":838,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746251,"byte_end":746278,"line_start":839,"line_end":839,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746280,"byte_end":746283,"line_start":840,"line_end":840,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746285,"byte_end":746319,"line_start":841,"line_end":841,"column_start":2,"column_end":36}},{"value":"/ let bv2: BitVec = bv.drain(1 ..).collect();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746321,"byte_end":746368,"line_start":842,"line_end":842,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(bv, bits![0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746370,"byte_end":746399,"line_start":843,"line_end":843,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bv2, bits![1, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746401,"byte_end":746434,"line_start":844,"line_end":844,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746436,"byte_end":746439,"line_start":845,"line_end":845,"column_start":2,"column_end":5}},{"value":"/ // A full range clears the vector","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746441,"byte_end":746478,"line_start":846,"line_end":846,"column_start":2,"column_end":39}},{"value":"/ bv.drain(..);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746480,"byte_end":746497,"line_start":847,"line_end":847,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(bv, bits![]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746499,"byte_end":746527,"line_start":848,"line_end":848,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746529,"byte_end":746536,"line_start":849,"line_end":849,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746538,"byte_end":746541,"line_start":850,"line_end":850,"column_start":2,"column_end":5}},{"value":"/ [`mem::forget`]: core::mem::forget","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746543,"byte_end":746581,"line_start":851,"line_end":851,"column_start":2,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746583,"byte_end":746600,"line_start":852,"line_end":852,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746602,"byte_end":746632,"line_start":853,"line_end":853,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4321},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747097,"byte_end":747102,"line_start":873,"line_end":873,"column_start":9,"column_end":14},"name":"clear","qualname":"<BitVec<O, T>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the bit-vector, removing all values.","sig":null,"attributes":[{"value":"/ Clears the bit-vector, removing all values.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746748,"byte_end":746795,"line_start":859,"line_end":859,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746797,"byte_end":746800,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ Note that this method has no effect on the allocated capacity of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746802,"byte_end":746874,"line_start":861,"line_end":861,"column_start":2,"column_end":74}},{"value":"/ bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746876,"byte_end":746891,"line_start":862,"line_end":862,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746893,"byte_end":746896,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746898,"byte_end":746909,"line_start":864,"line_end":864,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746911,"byte_end":746938,"line_start":865,"line_end":865,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746940,"byte_end":746943,"line_start":866,"line_end":866,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746945,"byte_end":746982,"line_start":867,"line_end":867,"column_start":2,"column_end":39}},{"value":"/ bv.clear();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":746984,"byte_end":746999,"line_start":868,"line_end":868,"column_start":2,"column_end":17}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747001,"byte_end":747028,"line_start":869,"line_end":869,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747030,"byte_end":747037,"line_start":870,"line_end":870,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747039,"byte_end":747056,"line_start":871,"line_end":871,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747058,"byte_end":747088,"line_start":872,"line_end":872,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4322},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747503,"byte_end":747506,"line_start":894,"line_end":894,"column_start":9,"column_end":12},"name":"len","qualname":"<BitVec<O, T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the bit-vector, also referred to as its\n ‘length’.","sig":null,"attributes":[{"value":"/ Returns the number of bits in the bit-vector, also referred to as its","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747141,"byte_end":747214,"line_start":877,"line_end":877,"column_start":2,"column_end":75}},{"value":"/ ‘length’.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747216,"byte_end":747233,"line_start":878,"line_end":878,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747235,"byte_end":747238,"line_start":879,"line_end":879,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747240,"byte_end":747254,"line_start":880,"line_end":880,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747256,"byte_end":747259,"line_start":881,"line_end":881,"column_start":2,"column_end":5}},{"value":"/ [`Vec::len`](alloc::vec::Vec::len)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747261,"byte_end":747299,"line_start":882,"line_end":882,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747301,"byte_end":747304,"line_start":883,"line_end":883,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747306,"byte_end":747320,"line_start":884,"line_end":884,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747322,"byte_end":747325,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747327,"byte_end":747338,"line_start":886,"line_end":886,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747340,"byte_end":747367,"line_start":887,"line_end":887,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747369,"byte_end":747372,"line_start":888,"line_end":888,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747374,"byte_end":747404,"line_start":889,"line_end":889,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bv.len(), 3);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747406,"byte_end":747434,"line_start":890,"line_end":890,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747436,"byte_end":747443,"line_start":891,"line_end":891,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747445,"byte_end":747462,"line_start":892,"line_end":892,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747464,"byte_end":747494,"line_start":893,"line_end":893,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4323},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747948,"byte_end":747956,"line_start":917,"line_end":917,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitVec<O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the bit-vector contains no bits.","sig":null,"attributes":[{"value":"/ Returns `true` if the bit-vector contains no bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747551,"byte_end":747605,"line_start":898,"line_end":898,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747607,"byte_end":747610,"line_start":899,"line_end":899,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747612,"byte_end":747626,"line_start":900,"line_end":900,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747628,"byte_end":747631,"line_start":901,"line_end":901,"column_start":2,"column_end":5}},{"value":"/ [`Vec::is_empty`](alloc::vec::Vec::is_empty)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747633,"byte_end":747681,"line_start":902,"line_end":902,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747683,"byte_end":747686,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747688,"byte_end":747702,"line_start":904,"line_end":904,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747704,"byte_end":747707,"line_start":905,"line_end":905,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747709,"byte_end":747720,"line_start":906,"line_end":906,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747722,"byte_end":747749,"line_start":907,"line_end":907,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747751,"byte_end":747754,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::new();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747756,"byte_end":747795,"line_start":909,"line_end":909,"column_start":2,"column_end":41}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747797,"byte_end":747824,"line_start":910,"line_end":910,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747826,"byte_end":747829,"line_start":911,"line_end":911,"column_start":2,"column_end":5}},{"value":"/ bv.push(true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747831,"byte_end":747849,"line_start":912,"line_end":912,"column_start":2,"column_end":20}},{"value":"/ assert!(!bv.is_empty());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747851,"byte_end":747879,"line_start":913,"line_end":913,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747881,"byte_end":747888,"line_start":914,"line_end":914,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747890,"byte_end":747907,"line_start":915,"line_end":915,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":747909,"byte_end":747939,"line_start":916,"line_end":916,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4324},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748714,"byte_end":748723,"line_start":947,"line_end":947,"column_start":9,"column_end":18},"name":"split_off","qualname":"<BitVec<O, T>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748005,"byte_end":748059,"line_start":921,"line_end":921,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748061,"byte_end":748064,"line_start":922,"line_end":922,"column_start":2,"column_end":5}},{"value":"/ Returns a newly allocated bit-vector containing the bits in range `[at,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748066,"byte_end":748141,"line_start":923,"line_end":923,"column_start":2,"column_end":77}},{"value":"/ len)`. After the call, the original bit-vector will be left containing","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748143,"byte_end":748217,"line_start":924,"line_end":924,"column_start":2,"column_end":76}},{"value":"/ the bits `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748219,"byte_end":748279,"line_start":925,"line_end":925,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748281,"byte_end":748284,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748286,"byte_end":748300,"line_start":927,"line_end":927,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748302,"byte_end":748305,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ [`Vec::split_off`](alloc::vec::Vec::split_off)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748307,"byte_end":748357,"line_start":929,"line_end":929,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748359,"byte_end":748362,"line_start":930,"line_end":930,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748364,"byte_end":748376,"line_start":931,"line_end":931,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748378,"byte_end":748381,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ Panics if `at > len`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748383,"byte_end":748408,"line_start":933,"line_end":933,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748410,"byte_end":748413,"line_start":934,"line_end":934,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748415,"byte_end":748429,"line_start":935,"line_end":935,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748431,"byte_end":748434,"line_start":936,"line_end":936,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748436,"byte_end":748447,"line_start":937,"line_end":937,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748449,"byte_end":748476,"line_start":938,"line_end":938,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748478,"byte_end":748481,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748483,"byte_end":748517,"line_start":940,"line_end":940,"column_start":2,"column_end":36}},{"value":"/ let bv2 = bv.split_off(1);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748519,"byte_end":748549,"line_start":941,"line_end":941,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bv, bits![0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748551,"byte_end":748580,"line_start":942,"line_end":942,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bv2, bits![0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748582,"byte_end":748615,"line_start":943,"line_end":943,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748617,"byte_end":748624,"line_start":944,"line_end":944,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748626,"byte_end":748635,"line_start":945,"line_end":945,"column_start":2,"column_end":11}},{"value":"must_use = \"use `.truncate()` if you don’t need the other half\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":748637,"byte_end":748705,"line_start":946,"line_end":946,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":4325},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750382,"byte_end":750393,"line_start":1000,"line_end":1000,"column_start":9,"column_end":20},"name":"resize_with","qualname":"<BitVec<O, T>>::resize_with","value":"pub fn resize_with<F>(&mut Self, usize, F) where F: FnMut() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749066,"byte_end":749136,"line_start":962,"line_end":962,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749138,"byte_end":749141,"line_start":963,"line_end":963,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is greater than `len`, the `BitVec` is extended by the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749143,"byte_end":749214,"line_start":964,"line_end":964,"column_start":2,"column_end":73}},{"value":"/ difference, with each additional slot filled with the result of calling","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749216,"byte_end":749291,"line_start":965,"line_end":965,"column_start":2,"column_end":77}},{"value":"/ the closure `func`. The return values from `func` will end up in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749293,"byte_end":749365,"line_start":966,"line_end":966,"column_start":2,"column_end":74}},{"value":"/ `BitVec` in the order they have been generated.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749367,"byte_end":749418,"line_start":967,"line_end":967,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749420,"byte_end":749423,"line_start":968,"line_end":968,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is less than `len`, the `BitVec` is simply truncated.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749425,"byte_end":749495,"line_start":969,"line_end":969,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749497,"byte_end":749500,"line_start":970,"line_end":970,"column_start":2,"column_end":5}},{"value":"/ This method uses a closure to create new values on every push. If you’d","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749502,"byte_end":749579,"line_start":971,"line_end":971,"column_start":2,"column_end":77}},{"value":"/ rather [`Clone`] a given value, use [`resize`]. If you want to use the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749581,"byte_end":749655,"line_start":972,"line_end":972,"column_start":2,"column_end":76}},{"value":"/ [`Default`] trait to generate values, you can pass","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749657,"byte_end":749711,"line_start":973,"line_end":973,"column_start":2,"column_end":56}},{"value":"/ [`Default::default()`] as the second argument.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749713,"byte_end":749763,"line_start":974,"line_end":974,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749765,"byte_end":749768,"line_start":975,"line_end":975,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749770,"byte_end":749784,"line_start":976,"line_end":976,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749786,"byte_end":749789,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize_with`](alloc::vec::Vec::resize_with)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749791,"byte_end":749845,"line_start":978,"line_end":978,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749847,"byte_end":749850,"line_start":979,"line_end":979,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749852,"byte_end":749866,"line_start":980,"line_end":980,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749868,"byte_end":749871,"line_start":981,"line_end":981,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749873,"byte_end":749884,"line_start":982,"line_end":982,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749886,"byte_end":749913,"line_start":983,"line_end":983,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749915,"byte_end":749918,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749920,"byte_end":749951,"line_start":985,"line_end":985,"column_start":2,"column_end":33}},{"value":"/ bv.resize_with(5, Default::default);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749953,"byte_end":749993,"line_start":986,"line_end":986,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(bv, bits![1, 1, 1, 0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":749995,"byte_end":750036,"line_start":987,"line_end":987,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750038,"byte_end":750041,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750043,"byte_end":750070,"line_start":989,"line_end":989,"column_start":2,"column_end":29}},{"value":"/ let mut p = 0;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750072,"byte_end":750090,"line_start":990,"line_end":990,"column_start":2,"column_end":20}},{"value":"/ bv.resize_with(4, || { p += 1; p % 2 == 0 });","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750092,"byte_end":750141,"line_start":991,"line_end":991,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750143,"byte_end":750181,"line_start":992,"line_end":992,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750183,"byte_end":750190,"line_start":993,"line_end":993,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750192,"byte_end":750195,"line_start":994,"line_end":994,"column_start":2,"column_end":5}},{"value":"/ [`Clone`]: core::clone::Clone","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750197,"byte_end":750230,"line_start":995,"line_end":995,"column_start":2,"column_end":35}},{"value":"/ [`Default`]: core::default::Default","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750232,"byte_end":750271,"line_start":996,"line_end":996,"column_start":2,"column_end":41}},{"value":"/ [`Default::default()`]: core::default::Default::default","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750273,"byte_end":750332,"line_start":997,"line_end":997,"column_start":2,"column_end":61}},{"value":"/ [`resize`]: Self::resize","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750334,"byte_end":750362,"line_start":998,"line_end":998,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750364,"byte_end":750373,"line_start":999,"line_end":999,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4327},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751447,"byte_end":751451,"line_start":1041,"line_end":1041,"column_start":9,"column_end":13},"name":"leak","qualname":"<BitVec<O, T>>::leak","value":"pub fn leak<'a>(Self) -> &'a mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `BitVec`, returning a mutable reference to the\n contents, `&'a mut BitSlice<O, T>`. This lifetime may be chosen to be\n `'static`.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `BitVec`, returning a mutable reference to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750596,"byte_end":750669,"line_start":1011,"line_end":1011,"column_start":2,"column_end":75}},{"value":"/ contents, `&'a mut BitSlice<O, T>`. This lifetime may be chosen to be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750671,"byte_end":750744,"line_start":1012,"line_end":1012,"column_start":2,"column_end":75}},{"value":"/ `'static`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750746,"byte_end":750760,"line_start":1013,"line_end":1013,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750762,"byte_end":750765,"line_start":1014,"line_end":1014,"column_start":2,"column_end":5}},{"value":"/ This function is similar to the [`leak`] function on [`BitBox`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750767,"byte_end":750835,"line_start":1015,"line_end":1015,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750837,"byte_end":750840,"line_start":1016,"line_end":1016,"column_start":2,"column_end":5}},{"value":"/ This function is mainly useful for data that lives for the remainder of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750842,"byte_end":750917,"line_start":1017,"line_end":1017,"column_start":2,"column_end":77}},{"value":"/ the program’s life. Dropping the returned reference will cause a memory","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750919,"byte_end":750996,"line_start":1018,"line_end":1018,"column_start":2,"column_end":77}},{"value":"/ leak.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":750998,"byte_end":751007,"line_start":1019,"line_end":1019,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751009,"byte_end":751012,"line_start":1020,"line_end":1020,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751014,"byte_end":751028,"line_start":1021,"line_end":1021,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751030,"byte_end":751033,"line_start":1022,"line_end":1022,"column_start":2,"column_end":5}},{"value":"/ [`Vec::leak`](alloc::vec::Vec::leak)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751035,"byte_end":751075,"line_start":1023,"line_end":1023,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751077,"byte_end":751080,"line_start":1024,"line_end":1024,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751082,"byte_end":751096,"line_start":1025,"line_end":1025,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751098,"byte_end":751101,"line_start":1026,"line_end":1026,"column_start":2,"column_end":5}},{"value":"/ Simple usage:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751103,"byte_end":751120,"line_start":1027,"line_end":1027,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751122,"byte_end":751125,"line_start":1028,"line_end":1028,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751127,"byte_end":751138,"line_start":1029,"line_end":1029,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751140,"byte_end":751167,"line_start":1030,"line_end":1030,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751169,"byte_end":751172,"line_start":1031,"line_end":1031,"column_start":2,"column_end":5}},{"value":"/ let x = bitvec![0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751174,"byte_end":751203,"line_start":1032,"line_end":1032,"column_start":2,"column_end":31}},{"value":"/ let static_ref: &'static mut BitSlice = x.leak();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751205,"byte_end":751258,"line_start":1033,"line_end":1033,"column_start":2,"column_end":55}},{"value":"/ static_ref.set(0, true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751260,"byte_end":751288,"line_start":1034,"line_end":1034,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(static_ref, bits![1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751290,"byte_end":751333,"line_start":1035,"line_end":1035,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751335,"byte_end":751342,"line_start":1036,"line_end":1036,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751344,"byte_end":751347,"line_start":1037,"line_end":1037,"column_start":2,"column_end":5}},{"value":"/ [`BitBox`]: crate::boxed::BitBox","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751349,"byte_end":751385,"line_start":1038,"line_end":1038,"column_start":2,"column_end":38}},{"value":"/ [`leak`]: crate::boxed::BitBox::leak","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751387,"byte_end":751427,"line_start":1039,"line_end":1039,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751429,"byte_end":751438,"line_start":1040,"line_end":1040,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4329},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752347,"byte_end":752353,"line_start":1074,"line_end":1074,"column_start":9,"column_end":15},"name":"resize","qualname":"<BitVec<O, T>>::resize","value":"pub fn resize(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751543,"byte_end":751613,"line_start":1045,"line_end":1045,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751615,"byte_end":751618,"line_start":1046,"line_end":1046,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is greater than `len`, the `BitVec` is extended by the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751620,"byte_end":751691,"line_start":1047,"line_end":1047,"column_start":2,"column_end":73}},{"value":"/ difference, with each additional slot filled with `value`. If `new_len`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751693,"byte_end":751768,"line_start":1048,"line_end":1048,"column_start":2,"column_end":77}},{"value":"/ is less than `len`, the `BitVec` is simply truncated.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751770,"byte_end":751827,"line_start":1049,"line_end":1049,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751829,"byte_end":751832,"line_start":1050,"line_end":1050,"column_start":2,"column_end":5}},{"value":"/ This method requires a single `bool` value. If you need more","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751834,"byte_end":751898,"line_start":1051,"line_end":1051,"column_start":2,"column_end":66}},{"value":"/ flexibility, use [`resize_with`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751900,"byte_end":751937,"line_start":1052,"line_end":1052,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751939,"byte_end":751942,"line_start":1053,"line_end":1053,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751944,"byte_end":751958,"line_start":1054,"line_end":1054,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751960,"byte_end":751963,"line_start":1055,"line_end":1055,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize`](alloc::vec::Vec::resize)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":751965,"byte_end":752009,"line_start":1056,"line_end":1056,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752011,"byte_end":752014,"line_start":1057,"line_end":1057,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752016,"byte_end":752030,"line_start":1058,"line_end":1058,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752032,"byte_end":752035,"line_start":1059,"line_end":1059,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752037,"byte_end":752048,"line_start":1060,"line_end":1060,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752050,"byte_end":752077,"line_start":1061,"line_end":1061,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752079,"byte_end":752082,"line_start":1062,"line_end":1062,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752084,"byte_end":752112,"line_start":1063,"line_end":1063,"column_start":2,"column_end":30}},{"value":"/ bv.resize(3, false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752114,"byte_end":752138,"line_start":1064,"line_end":1064,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bv, bits![1, 0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752140,"byte_end":752175,"line_start":1065,"line_end":1065,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752177,"byte_end":752180,"line_start":1066,"line_end":1066,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 4];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752182,"byte_end":752213,"line_start":1067,"line_end":1067,"column_start":2,"column_end":33}},{"value":"/ bv.resize(2, false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752215,"byte_end":752239,"line_start":1068,"line_end":1068,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bv, bits![1; 2]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752241,"byte_end":752273,"line_start":1069,"line_end":1069,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752275,"byte_end":752282,"line_start":1070,"line_end":1070,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752284,"byte_end":752287,"line_start":1071,"line_end":1071,"column_start":2,"column_end":5}},{"value":"/ [`resize_with`]: Self::resize_with","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752289,"byte_end":752327,"line_start":1072,"line_end":1072,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752329,"byte_end":752338,"line_start":1073,"line_end":1073,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4331},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752758,"byte_end":752775,"line_start":1089,"line_end":1089,"column_start":9,"column_end":26},"name":"extend_from_slice","qualname":"<BitVec<O, T>>::extend_from_slice","value":"pub fn extend_from_slice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752551,"byte_end":752568,"line_start":1085,"line_end":1085,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752570,"byte_end":752600,"line_start":1086,"line_end":1086,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `extend_from_bitslice`. If you need to extend from a \\\n\t                slice of `T` elements, use `extend_from_raw_slice`\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752602,"byte_end":752749,"line_start":1087,"line_end":1088,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":4334},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753049,"byte_end":753063,"line_start":1100,"line_end":1100,"column_start":9,"column_end":23},"name":"resize_default","qualname":"<BitVec<O, T>>::resize_default","value":"pub fn resize_default(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.\n","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752904,"byte_end":752974,"line_start":1097,"line_end":1097,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752976,"byte_end":752985,"line_start":1098,"line_end":1098,"column_start":2,"column_end":11}},{"value":"deprecated = \"`Vec::resize_default` is deprecated\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":752987,"byte_end":753040,"line_start":1099,"line_end":1099,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4335},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754743,"byte_end":754749,"line_start":1156,"line_end":1156,"column_start":9,"column_end":15},"name":"splice","qualname":"<BitVec<O, T>>::splice","value":"pub fn splice<R, I>(&mut Self, R, I) -> Splice<, O, T, I::IntoIter> where\nR: RangeBounds<usize>, I: IntoIterator<Item = bool>","parent":null,"children":[],"decl_id":null,"docs":" Creates a splicing iterator that replaces the specified range in the\n bit-vector with the given `replace_with` iterator and yields the removed\n items. `replace_with` does not need to be the same length as `range`.","sig":null,"attributes":[{"value":"/ Creates a splicing iterator that replaces the specified range in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753240,"byte_end":753312,"line_start":1110,"line_end":1110,"column_start":2,"column_end":74}},{"value":"/ bit-vector with the given `replace_with` iterator and yields the removed","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753314,"byte_end":753390,"line_start":1111,"line_end":1111,"column_start":2,"column_end":78}},{"value":"/ items. `replace_with` does not need to be the same length as `range`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753392,"byte_end":753465,"line_start":1112,"line_end":1112,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753467,"byte_end":753470,"line_start":1113,"line_end":1113,"column_start":2,"column_end":5}},{"value":"/ `range` is removed even if the iterator is not consumed until the end.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753472,"byte_end":753546,"line_start":1114,"line_end":1114,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753548,"byte_end":753551,"line_start":1115,"line_end":1115,"column_start":2,"column_end":5}},{"value":"/ It is unspecified how many bits are removed from the vector if the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753553,"byte_end":753623,"line_start":1116,"line_end":1116,"column_start":2,"column_end":72}},{"value":"/ [`Splice`] value is leaked.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753625,"byte_end":753656,"line_start":1117,"line_end":1117,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753658,"byte_end":753661,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ The input iterator `replace_with` is only consumed when the [`Splice`]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753663,"byte_end":753737,"line_start":1119,"line_end":1119,"column_start":2,"column_end":76}},{"value":"/ value is dropped.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753739,"byte_end":753760,"line_start":1120,"line_end":1120,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753762,"byte_end":753765,"line_start":1121,"line_end":1121,"column_start":2,"column_end":5}},{"value":"/ This is optimal if:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753767,"byte_end":753790,"line_start":1122,"line_end":1122,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753792,"byte_end":753795,"line_start":1123,"line_end":1123,"column_start":2,"column_end":5}},{"value":"/ - the tail (bits in the vector after `range`) is empty","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753797,"byte_end":753855,"line_start":1124,"line_end":1124,"column_start":2,"column_end":60}},{"value":"/ - or `replace_with` yields fewer bits than `range`’s length","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753857,"byte_end":753922,"line_start":1125,"line_end":1125,"column_start":2,"column_end":65}},{"value":"/ - or the lower bound of its [`size_hint`] is exact.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753924,"byte_end":753979,"line_start":1126,"line_end":1126,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753981,"byte_end":753984,"line_start":1127,"line_end":1127,"column_start":2,"column_end":5}},{"value":"/ Otherwise, a temporary bit-vector is allocated and the tail is moved","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":753986,"byte_end":754058,"line_start":1128,"line_end":1128,"column_start":2,"column_end":74}},{"value":"/ twice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754060,"byte_end":754070,"line_start":1129,"line_end":1129,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754072,"byte_end":754075,"line_start":1130,"line_end":1130,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754077,"byte_end":754091,"line_start":1131,"line_end":1131,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754093,"byte_end":754096,"line_start":1132,"line_end":1132,"column_start":2,"column_end":5}},{"value":"/ [`Vec::splice`](alloc::vec::Vec::splice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754098,"byte_end":754142,"line_start":1133,"line_end":1133,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754144,"byte_end":754147,"line_start":1134,"line_end":1134,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754149,"byte_end":754161,"line_start":1135,"line_end":1135,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754163,"byte_end":754166,"line_start":1136,"line_end":1136,"column_start":2,"column_end":5}},{"value":"/ Panics if the starting point is greater than the end point or if the end","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754168,"byte_end":754244,"line_start":1137,"line_end":1137,"column_start":2,"column_end":78}},{"value":"/ point is greater than the length of the bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754246,"byte_end":754301,"line_start":1138,"line_end":1138,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754303,"byte_end":754306,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754308,"byte_end":754322,"line_start":1140,"line_end":1140,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754324,"byte_end":754327,"line_start":1141,"line_end":1141,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754329,"byte_end":754340,"line_start":1142,"line_end":1142,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754342,"byte_end":754369,"line_start":1143,"line_end":1143,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754371,"byte_end":754374,"line_start":1144,"line_end":1144,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754376,"byte_end":754410,"line_start":1145,"line_end":1145,"column_start":2,"column_end":36}},{"value":"/ let new = bits![1, 0];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754412,"byte_end":754438,"line_start":1146,"line_end":1146,"column_start":2,"column_end":28}},{"value":"/ let old: BitVec = bv.splice(.. 2, new.iter().by_val()).collect();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754440,"byte_end":754509,"line_start":1147,"line_end":1147,"column_start":2,"column_end":71}},{"value":"/ assert_eq!(bv, bits![1, 0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754511,"byte_end":754546,"line_start":1148,"line_end":1148,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(old, bits![0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754548,"byte_end":754581,"line_start":1149,"line_end":1149,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754583,"byte_end":754590,"line_start":1150,"line_end":1150,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754592,"byte_end":754595,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ [`Splice`]: crate::vec::Splice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754597,"byte_end":754631,"line_start":1152,"line_end":1152,"column_start":2,"column_end":36}},{"value":"/ [`size_hint`]: core::iter::Iterator::size_hint","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754633,"byte_end":754683,"line_start":1153,"line_end":1153,"column_start":2,"column_end":52}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754685,"byte_end":754702,"line_start":1154,"line_end":1154,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":754704,"byte_end":754734,"line_start":1155,"line_end":1155,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4507},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":761504,"byte_end":761509,"line_start":290,"line_end":290,"column_start":12,"column_end":17},"name":"Drain","qualname":"::vec::iter::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":4511},{"krate":0,"index":4512},{"krate":0,"index":4513}],"decl_id":null,"docs":" A draining iterator for [`BitVec`].","sig":null,"attributes":[{"value":"* A draining iterator for [`BitVec`].\n\nThis `struct` is created by the [`.drain()`] method on [`BitVec`].\n\n# Original\n\n[`vec::Drain`](alloc::vec::Drain)\n\n[`BitVec`]: crate::vec::BitVec\n[`.drain()`]: crate::vec::BitVec::drain\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":761262,"byte_end":761492,"line_start":279,"line_end":289,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":4520},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763189,"byte_end":763200,"line_start":350,"line_end":350,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Drain>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a [`BitSlice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":762846,"byte_end":762912,"line_start":337,"line_end":337,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":762914,"byte_end":762917,"line_start":338,"line_end":338,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":762919,"byte_end":762933,"line_start":339,"line_end":339,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":762935,"byte_end":762938,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ [`Drain::as_slice`](alloc::vec::Drain::as_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":762940,"byte_end":762992,"line_start":341,"line_end":341,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":762994,"byte_end":762997,"line_start":342,"line_end":342,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":762999,"byte_end":763020,"line_start":343,"line_end":343,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763022,"byte_end":763025,"line_start":344,"line_end":344,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it operates on a [`BitSlice`] rather than an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763027,"byte_end":763102,"line_start":345,"line_end":345,"column_start":2,"column_end":77}},{"value":"/ element slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763104,"byte_end":763122,"line_start":346,"line_end":346,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763124,"byte_end":763127,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763129,"byte_end":763169,"line_start":348,"line_end":348,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763171,"byte_end":763180,"line_start":349,"line_end":349,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4521},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763431,"byte_end":763439,"line_start":358,"line_end":358,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Drain>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763307,"byte_end":763324,"line_start":355,"line_end":355,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763326,"byte_end":763356,"line_start":356,"line_end":356,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":763358,"byte_end":763422,"line_start":357,"line_end":357,"column_start":2,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":7396},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":769895,"byte_end":769901,"line_start":625,"line_end":625,"column_start":12,"column_end":18},"name":"Splice","qualname":"::vec::iter::Splice","value":"Splice {  }","parent":null,"children":[{"krate":0,"index":7401},{"krate":0,"index":7402}],"decl_id":null,"docs":" A splicing iterator for [`BitVec`].","sig":null,"attributes":[{"value":"* A splicing iterator for [`BitVec`].\n\nThis struct is created by the [`.splice()`] method on [`BitVec`]. See its\ndocumentation for more.\n\n# Original\n\n[`vec::Splice`](alloc::vec::Splice)\n\n[`BitVec`]: crate::vec::BitVec\n[`.splice()`]: crate::vec::BitVec::splice\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":769601,"byte_end":769866,"line_start":612,"line_end":623,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4928},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699049,"byte_end":699055,"line_start":263,"line_end":263,"column_start":12,"column_end":18},"name":"BitVec","qualname":"::vec::BitVec","value":"BitVec {  }","parent":null,"children":[{"krate":0,"index":4931},{"krate":0,"index":4932}],"decl_id":null,"docs":" A contiguous growable array of bits.","sig":null,"attributes":[{"value":"* A contiguous growable array of bits.\n\nThis is a managed, heap-allocated, buffer that contains a [`BitSlice`] region.\nIt is analagous to [`Vec<bool>`], and is written to be very nearly a drop-in\nreplacement for it. This type contains little interesting behavior in its own\nright; most of its behavior is provided by dereferencing to its managed\n[`BitSlice`] buffer. It instead serves primarily as an interface to the\nallocator, and has some specialized behaviors for its fully-owned memory buffer.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`Vec<T>`](alloc::vec::Vec)\n\n# API Differences\n\nThe buffer type [`Vec<bool>`] has no type parameters. `BitVec<O, T>` has the\nsame two type parameters as [`BitSlice<O, T>`][`BitSlice`]. Otherwise, `BitVec`\nis able to implement the full API surface of `Vec<bool>`.\n\n# Examples\n\nBecause `BitVec` takes type parameters, but has default type arguments for them,\nyou will need to specify its type parameters when using its associated\nfunctions. The easiest way to do this is to declare bindings type as `: BitVec`,\nwhich uses the default type arguments.\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut bv: BitVec = BitVec::new();\nbv.push(false);\nbv.push(true);\n\nassert_eq!(bv.len(), 2);\nassert_eq!(bv[0], false);\n\nassert_eq!(bv.pop(), Some(true));\nassert_eq!(bv.len(), 1);\n\n// `BitVec` cannot yet support `[]=` write indexing.\n*bv.get_mut(0).unwrap() = true;\nassert_eq!(bv[0], true);\n\nbv.extend(bits![0, 1, 0]);\n\nfor bit in &bv {\n  println!(\"{}\", bit);\n}\nassert_eq!(bv, bits![1, 0, 1, 0]);\n```\n\nThe [`bitvec!`] macro is provided to make initialization more convenient:\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut bv = bitvec![0, 0, 1];\nbv.push(true);\nassert_eq!(bv, bits![0, 0, 1, 1]);\n```\n\nIt has the same argument syntax as [`vec!`]. In addition, it can take type\narguments for ordering and storage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bv = bitvec![Msb0, u16; 1; 30];\nassert!(bv.all());\nassert_eq!(bv.len(), 30);\n```\n\n# Indexing\n\nThe `BitVec` type allows you to access bits by index, because it implements the\n[`Index`] trait. However, because [`IndexMut`] requires producing an `&mut bool`\nreference, it cannot implement `[]=` index assignment syntax. Instead, you must\nuse [`get_mut`] or [`get_unchecked_mut`] to produce proxy types that can serve\nthe same purpose.\n\n# Slicing\n\nA `BitVec` is resizable, while [`BitSlice`] is a fixed-size view of a buffer.\nJust as with ordinary [`Vec`]s and slices, you can get a `BitSlice` from a\n`BitVec` by borrowing it:\n\n```rust\nuse bitvec::prelude::*;\n\nfn read_bitslice(slice: &BitSlice) {\n  // …\n}\n\nlet bv = bitvec![0; 30];\nread_bitslice(&bv);\n\n// … and that’s all!\n// you can also do it like this:\nlet x: &BitSlice = &bv;\n```\n\nAs with ordinary Rust types, you should prefer passing bit-slices rather than\nbuffers when you just want to inspect the data, and not manage the underlying\nmemory region.\n\n# Behavior\n\nBecause `BitVec` is a fully-owned buffer, it is able to operate on its memory\nwithout concern for any other views that may alias. This enables it to\nspecialize some [`BitSlice`] behavior to be faster or more efficient. However,\n`BitVec` is *not* restricted to only using unaliased integer storage, and\ntechnically permits the construction of `BitVec<_, AtomicType>`.\n\nThis restriction is extremely awkward and constraining to write in the library,\nand clients will probably never attempt to construct them, but the possibility\nis still present. Be aware of this possibility when using generic code to\nconvert from `BitSlice` to `BitVec`. Fully-typed code does not need to be\nconcerned with this possibility.\n\n# Capacity and Reällocation\n\nThe capacity of a bit-vector is the amount of space allocated for any future\nbits that will be added onto the vector. This is not to be confused with the\n*length* of a vector, which specifies the number of actual bits within the\nvector. If a vector’s length exceeds its capacity, its capacity will\nautomatically be increased, but its buffer will have to be reällocated\n\nFor example, a bit-vector with capacity 64 and length 0 would be an empty vector\nwith space for 64 more bits. Pushing 64 or fewer bits onto the vector will not\nchange its capacity or cause reällocation to occur. However, if the vector’s\nlength is increased to 65, it *may* have to reällocate, which can be slow. For\nthis reason, it is recommended to use [`BitVec::with_capacity`] whenever\npossible to specify how big the vector is expected to get.\n\n# Safety\n\nLike [`BitSlice`], `BitVec` is exactly equal in size to [`Vec`], and is also\nabsolutely representation-incompatible with it. You must never attempt to\ntype-cast between `Vec<T>` and `BitVec` in any way, nor attempt to modify the\nmemory value of a `BitVec` handle. Doing so will cause allocator and memory\nerrors in your program, likely inducing a panic.\n\nEverything in the `BitVec` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent items in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nThe choice of [`BitStore`] type parameter can impact your vector’s performance,\nas the allocator operates in units of `T` rather than in bits. This means that\nlarger register types will increase the amount of memory reserved in each call\nto the allocator, meaning fewer calls to [`push`] will actually cause a\nreällocation. In addition, iteration over the vector is governed by the\n[`BitSlice`] characteristics on the type parameter. You are generally better off\nusing larger types when your vector is a data collection rather than a specific\nI/O protocol buffer.\n\n# Macro Construction\n\nHeap allocation can only occur at runtime, but the [`bitvec!`] macro will\nconstruct an appropriate [`BitSlice`] buffer at compile-time, and at run-time,\nonly copy the buffer into a heap allocation.\n\n[`BitStore`]: crate::store::BitStore\n[`BitSlice`]: crate::slice::BitSlice\n[`BitVec::with_capacity`]: Self::with_capacity\n[`Index`]: core::ops::Index\n[`IndexMut`]: core::ops::IndexMut\n[`Vec`]: alloc::vec::Vec\n[`Vec<bool>`]: alloc::vec::Vec\n[`bitvec!`]: macro@crate::bitvec\n[`vec!`]: macro@alloc::vec\n[`get_mut`]: crate::slice::BitSlice::get_mut\n[`get_unchecked_mut`]: crate::slice::BitSlice::get_unchecked_mut\n[`push`]: Self::push\n**/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":692290,"byte_end":699026,"line_start":75,"line_end":261,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699027,"byte_end":699037,"line_start":262,"line_end":262,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4936},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700096,"byte_end":700102,"line_start":305,"line_end":305,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitVec<O, T>>::repeat","value":"pub fn repeat(bool, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitVec` from a value repeated many times.","sig":null,"attributes":[{"value":"/ Constructs a `BitVec` from a value repeated many times.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699412,"byte_end":699471,"line_start":280,"line_end":280,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699473,"byte_end":699476,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ This function is equivalent to the `bitvec![O, T; bit; len]` [macro]","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699478,"byte_end":699550,"line_start":282,"line_end":282,"column_start":2,"column_end":74}},{"value":"/ call, and is in fact the implementation of that macro syntax.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699552,"byte_end":699617,"line_start":283,"line_end":283,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699619,"byte_end":699622,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699624,"byte_end":699640,"line_start":285,"line_end":285,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699642,"byte_end":699645,"line_start":286,"line_end":286,"column_start":2,"column_end":5}},{"value":"/ - `bit`: The bit value to which all `len` allocated bits will be set.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699647,"byte_end":699720,"line_start":287,"line_end":287,"column_start":2,"column_end":75}},{"value":"/ - `len`: The number of live bits in the constructed `BitVec`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699722,"byte_end":699787,"line_start":288,"line_end":288,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699789,"byte_end":699792,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699794,"byte_end":699807,"line_start":290,"line_end":290,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699809,"byte_end":699812,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ A `BitVec` with `len` live bits, all set to `bit`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699814,"byte_end":699868,"line_start":292,"line_end":292,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699870,"byte_end":699873,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699875,"byte_end":699889,"line_start":294,"line_end":294,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699891,"byte_end":699894,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699896,"byte_end":699907,"line_start":296,"line_end":296,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699909,"byte_end":699936,"line_start":297,"line_end":297,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699938,"byte_end":699941,"line_start":298,"line_end":298,"column_start":2,"column_end":5}},{"value":"/ let bv = BitVec::<Msb0, u8>::repeat(true, 20);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699943,"byte_end":699993,"line_start":299,"line_end":299,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(bv, bits![1; 20]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699995,"byte_end":700028,"line_start":300,"line_end":300,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700030,"byte_end":700037,"line_start":301,"line_end":301,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700039,"byte_end":700042,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ [macro]: macro@crate::bitvec","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700044,"byte_end":700076,"line_start":303,"line_end":303,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700078,"byte_end":700087,"line_start":304,"line_end":304,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4937},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":701170,"byte_end":701183,"line_start":338,"line_end":338,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitVec<O, T>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Copies the contents of a [`BitSlice`] into a new allocation.","sig":null,"attributes":[{"value":"/ Copies the contents of a [`BitSlice`] into a new allocation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700291,"byte_end":700355,"line_start":314,"line_end":314,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700357,"byte_end":700360,"line_start":315,"line_end":315,"column_start":2,"column_end":5}},{"value":"/ This is an exact copy: the newly-created bit-vector is initialized with","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700362,"byte_end":700437,"line_start":316,"line_end":316,"column_start":2,"column_end":77}},{"value":"/ a direct copy of the `slice`’s underlying contents, and its handle is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700439,"byte_end":700514,"line_start":317,"line_end":317,"column_start":2,"column_end":75}},{"value":"/ set to use `slice`’s head index. Slices that do not begin at the zeroth","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700516,"byte_end":700593,"line_start":318,"line_end":318,"column_start":2,"column_end":77}},{"value":"/ bit of the base element will thus create misaligned vectors.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700595,"byte_end":700659,"line_start":319,"line_end":319,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700661,"byte_end":700664,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ You can move the bit-vector contents down to begin at the zero index of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700666,"byte_end":700741,"line_start":321,"line_end":321,"column_start":2,"column_end":77}},{"value":"/ the bit-vector’s buffer with [`force_align`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700743,"byte_end":700794,"line_start":322,"line_end":322,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700796,"byte_end":700799,"line_start":323,"line_end":323,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700801,"byte_end":700815,"line_start":324,"line_end":324,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700817,"byte_end":700820,"line_start":325,"line_end":325,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700822,"byte_end":700833,"line_start":326,"line_end":326,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700835,"byte_end":700862,"line_start":327,"line_end":327,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700864,"byte_end":700867,"line_start":328,"line_end":328,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1, 1, 0, 1, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700869,"byte_end":700914,"line_start":329,"line_end":329,"column_start":2,"column_end":47}},{"value":"/ let bv = BitVec::from_bitslice(&bits[2 ..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700916,"byte_end":700964,"line_start":330,"line_end":330,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bv, bits[2 ..]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700966,"byte_end":700997,"line_start":331,"line_end":331,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bits.as_raw_slice(), bv.as_raw_slice());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":700999,"byte_end":701054,"line_start":332,"line_end":332,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":701056,"byte_end":701063,"line_start":333,"line_end":333,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":701065,"byte_end":701068,"line_start":334,"line_end":334,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":701070,"byte_end":701110,"line_start":335,"line_end":335,"column_start":2,"column_end":42}},{"value":"/ [`force_align`]: Self::force_align","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":701112,"byte_end":701150,"line_start":336,"line_end":336,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":701152,"byte_end":701161,"line_start":337,"line_end":337,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4939},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702408,"byte_end":702420,"line_start":392,"line_end":392,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitVec<O, T>>::from_element","value":"pub fn from_element(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitVec` from the bit-pattern of a single element.","sig":null,"attributes":[{"value":"/ Constructs a new `BitVec` from the bit-pattern of a single element.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702063,"byte_end":702134,"line_start":379,"line_end":379,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702136,"byte_end":702139,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ This function copies `elem` into a new vector, then views that vector as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702141,"byte_end":702217,"line_start":381,"line_end":381,"column_start":2,"column_end":78}},{"value":"/ bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702219,"byte_end":702228,"line_start":382,"line_end":382,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702230,"byte_end":702233,"line_start":383,"line_end":383,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702235,"byte_end":702249,"line_start":384,"line_end":384,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702251,"byte_end":702254,"line_start":385,"line_end":385,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702256,"byte_end":702267,"line_start":386,"line_end":386,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702269,"byte_end":702296,"line_start":387,"line_end":387,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702298,"byte_end":702301,"line_start":388,"line_end":388,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(BitVec::<Msb0, _>::from_element(0xABBAu16).count_ones(), 10);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702303,"byte_end":702379,"line_start":389,"line_end":389,"column_start":2,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702381,"byte_end":702388,"line_start":390,"line_end":390,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702390,"byte_end":702399,"line_start":391,"line_end":391,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4940},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703343,"byte_end":703353,"line_start":425,"line_end":425,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitVec<O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Result<Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitVec` from the bit-pattern of an element slice.","sig":null,"attributes":[{"value":"/ Constructs a new `BitVec` from the bit-pattern of an element slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702479,"byte_end":702550,"line_start":396,"line_end":396,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702552,"byte_end":702555,"line_start":397,"line_end":397,"column_start":2,"column_end":5}},{"value":"/ This function copies `slice` into a new vector, then views that vector","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702557,"byte_end":702631,"line_start":398,"line_end":398,"column_start":2,"column_end":76}},{"value":"/ as bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702633,"byte_end":702645,"line_start":399,"line_end":399,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702647,"byte_end":702650,"line_start":400,"line_end":400,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702652,"byte_end":702668,"line_start":401,"line_end":401,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702670,"byte_end":702673,"line_start":402,"line_end":402,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A slice of elements. It should not exceed [`BitSlice::<O,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702675,"byte_end":702747,"line_start":403,"line_end":403,"column_start":2,"column_end":74}},{"value":"/   T>::MAX_ELTS`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702749,"byte_end":702770,"line_start":404,"line_end":404,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702772,"byte_end":702775,"line_start":405,"line_end":405,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702777,"byte_end":702790,"line_start":406,"line_end":406,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702792,"byte_end":702795,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ This returns an error if [`BitSlice::<O, T>::from_slice`] fails;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702797,"byte_end":702865,"line_start":408,"line_end":408,"column_start":2,"column_end":70}},{"value":"/ otherwise, it returns the newly allocated and initialized bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702867,"byte_end":702940,"line_start":409,"line_end":409,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702942,"byte_end":702945,"line_start":410,"line_end":410,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702947,"byte_end":702961,"line_start":411,"line_end":411,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702963,"byte_end":702966,"line_start":412,"line_end":412,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702968,"byte_end":702979,"line_start":413,"line_end":413,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":702981,"byte_end":703008,"line_start":414,"line_end":414,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703010,"byte_end":703013,"line_start":415,"line_end":415,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1, 2, 3];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703015,"byte_end":703047,"line_start":416,"line_end":416,"column_start":2,"column_end":34}},{"value":"/ let bv = BitVec::<Lsb0, _>::from_slice(slice);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703049,"byte_end":703099,"line_start":417,"line_end":417,"column_start":2,"column_end":52}},{"value":"/ assert!(bv.is_ok());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703101,"byte_end":703125,"line_start":418,"line_end":418,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bv.unwrap().len(), 32);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703127,"byte_end":703165,"line_start":419,"line_end":419,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703167,"byte_end":703174,"line_start":420,"line_end":420,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703176,"byte_end":703179,"line_start":421,"line_end":421,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::<O, T>::MAX_ELTS`]: crate::slice::BitSlice::MAX_ELTS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703181,"byte_end":703249,"line_start":422,"line_end":422,"column_start":2,"column_end":70}},{"value":"/ [`BitSlice::<O, T>::from_slice`]: crate::slice::BitSlice::from_slice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703251,"byte_end":703323,"line_start":423,"line_end":423,"column_start":2,"column_end":74}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703325,"byte_end":703334,"line_start":424,"line_end":424,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4941},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704116,"byte_end":704124,"line_start":457,"line_end":457,"column_start":9,"column_end":17},"name":"from_vec","qualname":"<BitVec<O, T>>::from_vec","value":"pub fn from_vec(Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`Vec<T>`] into a `BitVec<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a [`Vec<T>`] into a `BitVec<O, T>` without copying its buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703467,"byte_end":703542,"line_start":429,"line_end":429,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703544,"byte_end":703547,"line_start":430,"line_end":430,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703549,"byte_end":703565,"line_start":431,"line_end":431,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703567,"byte_end":703570,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ - `vec`: A vector to view as bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703572,"byte_end":703610,"line_start":433,"line_end":433,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703612,"byte_end":703615,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703617,"byte_end":703630,"line_start":435,"line_end":435,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703632,"byte_end":703635,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ A `BitVec` over the `vec` buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703637,"byte_end":703674,"line_start":437,"line_end":437,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703676,"byte_end":703679,"line_start":438,"line_end":438,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703681,"byte_end":703693,"line_start":439,"line_end":439,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703695,"byte_end":703698,"line_start":440,"line_end":440,"column_start":2,"column_end":5}},{"value":"/ This panics if `vec` is too long to convert into a `BitVec`. See","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703700,"byte_end":703768,"line_start":441,"line_end":441,"column_start":2,"column_end":70}},{"value":"/ [`BitSlice::MAX_ELTS`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703770,"byte_end":703797,"line_start":442,"line_end":442,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703799,"byte_end":703802,"line_start":443,"line_end":443,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703804,"byte_end":703818,"line_start":444,"line_end":444,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703820,"byte_end":703823,"line_start":445,"line_end":445,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703825,"byte_end":703836,"line_start":446,"line_end":446,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703838,"byte_end":703865,"line_start":447,"line_end":447,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703867,"byte_end":703870,"line_start":448,"line_end":448,"column_start":2,"column_end":5}},{"value":"/ let vec = vec![0u8; 4];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703872,"byte_end":703899,"line_start":449,"line_end":449,"column_start":2,"column_end":29}},{"value":"/ let bv = BitVec::<LocalBits, _>::from_vec(vec);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703901,"byte_end":703952,"line_start":450,"line_end":450,"column_start":2,"column_end":53}},{"value":"/ assert_eq!(bv, bits![0; 32]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703954,"byte_end":703987,"line_start":451,"line_end":451,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703989,"byte_end":703996,"line_start":452,"line_end":452,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":703998,"byte_end":704001,"line_start":453,"line_end":453,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::MAX_ELTS`]: crate::slice::BitSlice::MAX_ELTS","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704003,"byte_end":704063,"line_start":454,"line_end":454,"column_start":2,"column_end":62}},{"value":"/ [`Vec<T>`]: alloc::vec::Vec","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704065,"byte_end":704096,"line_start":455,"line_end":455,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704098,"byte_end":704107,"line_start":456,"line_end":456,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4942},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705322,"byte_end":705334,"line_start":495,"line_end":495,"column_start":9,"column_end":21},"name":"try_from_vec","qualname":"<BitVec<O, T>>::try_from_vec","value":"pub fn try_from_vec(Vec<T>) -> Result<Self, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`Vec<T>`] into a `BitVec<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a [`Vec<T>`] into a `BitVec<O, T>` without copying its buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704245,"byte_end":704320,"line_start":462,"line_end":462,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704322,"byte_end":704325,"line_start":463,"line_end":463,"column_start":2,"column_end":5}},{"value":"/ This method takes ownership of a memory buffer and enables it to be used","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704327,"byte_end":704403,"line_start":464,"line_end":464,"column_start":2,"column_end":78}},{"value":"/ as a bit-vector. Because [`Vec`] can be longer than `BitVec`s, this is a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704405,"byte_end":704481,"line_start":465,"line_end":465,"column_start":2,"column_end":78}},{"value":"/ fallible method, and the original vector will be returned if it cannot","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704483,"byte_end":704557,"line_start":466,"line_end":466,"column_start":2,"column_end":76}},{"value":"/ be converted.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704559,"byte_end":704576,"line_start":467,"line_end":467,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704578,"byte_end":704581,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704583,"byte_end":704599,"line_start":469,"line_end":469,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704601,"byte_end":704604,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ - `vec`: Some vector of memory, to be viewed as bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704606,"byte_end":704663,"line_start":471,"line_end":471,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704665,"byte_end":704668,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704670,"byte_end":704683,"line_start":473,"line_end":473,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704685,"byte_end":704688,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ If `vec` is short enough to be viewed as a `BitVec`, then this returns","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704690,"byte_end":704764,"line_start":475,"line_end":475,"column_start":2,"column_end":76}},{"value":"/ a `BitVec` over the `vec` buffer. If `vec` is too long, then this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704766,"byte_end":704835,"line_start":476,"line_end":476,"column_start":2,"column_end":71}},{"value":"/ returns `vec` unmodified.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704837,"byte_end":704866,"line_start":477,"line_end":477,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704868,"byte_end":704871,"line_start":478,"line_end":478,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704873,"byte_end":704887,"line_start":479,"line_end":479,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704889,"byte_end":704892,"line_start":480,"line_end":480,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704894,"byte_end":704905,"line_start":481,"line_end":481,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704907,"byte_end":704934,"line_start":482,"line_end":482,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704936,"byte_end":704939,"line_start":483,"line_end":483,"column_start":2,"column_end":5}},{"value":"/ let vec = vec![0u8; 4];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704941,"byte_end":704968,"line_start":484,"line_end":484,"column_start":2,"column_end":29}},{"value":"/ let bv = BitVec::<LocalBits, _>::try_from_vec(vec).unwrap();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":704970,"byte_end":705034,"line_start":485,"line_end":485,"column_start":2,"column_end":66}},{"value":"/ assert_eq!(bv, bits![0; 32]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705036,"byte_end":705069,"line_start":486,"line_end":486,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705071,"byte_end":705078,"line_start":487,"line_end":487,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705080,"byte_end":705083,"line_start":488,"line_end":488,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require an allocation","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705085,"byte_end":705157,"line_start":489,"line_end":489,"column_start":2,"column_end":74}},{"value":"/ exceeding `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705159,"byte_end":705234,"line_start":490,"line_end":490,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705236,"byte_end":705239,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ [`Vec`]: alloc::vec::Vec","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705241,"byte_end":705269,"line_start":492,"line_end":492,"column_start":2,"column_end":30}},{"value":"/ [`Vec<T>`]: alloc::vec::Vec","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705271,"byte_end":705302,"line_start":493,"line_end":493,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705304,"byte_end":705313,"line_start":494,"line_end":494,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4945},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706718,"byte_end":706738,"line_start":537,"line_end":537,"column_start":9,"column_end":29},"name":"extend_from_bitslice","qualname":"<BitVec<O, T>>::extend_from_bitslice","value":"pub fn extend_from_bitslice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits in a [`BitSlice`] into the `BitVec`.","sig":null,"attributes":[{"value":"/ Copies all bits in a [`BitSlice`] into the `BitVec`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705635,"byte_end":705691,"line_start":505,"line_end":505,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705693,"byte_end":705696,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705698,"byte_end":705712,"line_start":507,"line_end":507,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705714,"byte_end":705717,"line_start":508,"line_end":508,"column_start":2,"column_end":5}},{"value":"/ [`Vec::extend_from_slice`](alloc::vec::Vec::extend_from_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705719,"byte_end":705785,"line_start":509,"line_end":509,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705787,"byte_end":705790,"line_start":510,"line_end":510,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705792,"byte_end":705813,"line_start":511,"line_end":511,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705815,"byte_end":705818,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ This can extend from a [`BitSlice`] of any type arguments. Where the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705820,"byte_end":705892,"line_start":513,"line_end":513,"column_start":2,"column_end":74}},{"value":"/ source `&BitSlice` matches `self`’s type parameters, the implementation","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705894,"byte_end":705971,"line_start":514,"line_end":514,"column_start":2,"column_end":77}},{"value":"/ is able to attempt to accelerate the copy; however, if the type","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":705973,"byte_end":706040,"line_start":515,"line_end":515,"column_start":2,"column_end":69}},{"value":"/ parameters do not match, then the implementation falls back to a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706042,"byte_end":706110,"line_start":516,"line_end":516,"column_start":2,"column_end":70}},{"value":"/ bit-by-bit iteration and is equivalent to the `Extend` implementation.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706112,"byte_end":706186,"line_start":517,"line_end":517,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706188,"byte_end":706191,"line_start":518,"line_end":518,"column_start":2,"column_end":5}},{"value":"/ You should only use this method when the type parameters match and there","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706193,"byte_end":706269,"line_start":519,"line_end":519,"column_start":2,"column_end":78}},{"value":"/ is a possibility of copy acceleration. Otherwise, `.extend()` is the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706271,"byte_end":706343,"line_start":520,"line_end":520,"column_start":2,"column_end":74}},{"value":"/ correct API.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706345,"byte_end":706361,"line_start":521,"line_end":521,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706363,"byte_end":706366,"line_start":522,"line_end":522,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706368,"byte_end":706382,"line_start":523,"line_end":523,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706384,"byte_end":706387,"line_start":524,"line_end":524,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706389,"byte_end":706400,"line_start":525,"line_end":525,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706402,"byte_end":706429,"line_start":526,"line_end":526,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706431,"byte_end":706434,"line_start":527,"line_end":527,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706436,"byte_end":706467,"line_start":528,"line_end":528,"column_start":2,"column_end":33}},{"value":"/ bv.extend_from_bitslice(bits![1, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706469,"byte_end":706516,"line_start":529,"line_end":529,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706518,"byte_end":706521,"line_start":530,"line_end":530,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv, bits![0, 1, 1, 1, 0, 1]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706523,"byte_end":706567,"line_start":531,"line_end":531,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706569,"byte_end":706576,"line_start":532,"line_end":532,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706578,"byte_end":706581,"line_start":533,"line_end":533,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706583,"byte_end":706623,"line_start":534,"line_end":534,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706700,"byte_end":706709,"line_start":536,"line_end":536,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4948},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707260,"byte_end":707281,"line_start":557,"line_end":557,"column_start":9,"column_end":30},"name":"extend_from_raw_slice","qualname":"<BitVec<O, T>>::extend_from_raw_slice","value":"pub fn extend_from_raw_slice(&mut Self, &[T])","parent":null,"children":[],"decl_id":null,"docs":" Appends a slice of elements `T` to the `BitVec`.","sig":null,"attributes":[{"value":"/ Appends a slice of elements `T` to the `BitVec`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":706987,"byte_end":707039,"line_start":548,"line_end":548,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707041,"byte_end":707044,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ The `slice` is interpreted as a `BitSlice<O, T>`, then appended directly","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707046,"byte_end":707122,"line_start":550,"line_end":550,"column_start":2,"column_end":78}},{"value":"/ to the bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707124,"byte_end":707146,"line_start":551,"line_end":551,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707148,"byte_end":707151,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707153,"byte_end":707167,"line_start":553,"line_end":553,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707169,"byte_end":707172,"line_start":554,"line_end":554,"column_start":2,"column_end":5}},{"value":"/ [`Vec::extend_from_slice`](alloc::vec::Vec::extend_from_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707174,"byte_end":707240,"line_start":555,"line_end":555,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707242,"byte_end":707251,"line_start":556,"line_end":556,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4949},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707709,"byte_end":707717,"line_start":576,"line_end":576,"column_start":9,"column_end":17},"name":"elements","qualname":"<BitVec<O, T>>::elements","value":"pub fn elements(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of elements `T` that contain live bits of the\n bit-vector.","sig":null,"attributes":[{"value":"/ Gets the number of elements `T` that contain live bits of the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707444,"byte_end":707509,"line_start":564,"line_end":564,"column_start":2,"column_end":67}},{"value":"/ bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707511,"byte_end":707526,"line_start":565,"line_end":565,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707528,"byte_end":707531,"line_start":566,"line_end":566,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707533,"byte_end":707547,"line_start":567,"line_end":567,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707549,"byte_end":707552,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707554,"byte_end":707565,"line_start":569,"line_end":569,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707567,"byte_end":707594,"line_start":570,"line_end":570,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707596,"byte_end":707599,"line_start":571,"line_end":571,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![LocalBits, u16; 1; 50];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707601,"byte_end":707645,"line_start":572,"line_end":572,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bv.elements(), 4);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707647,"byte_end":707680,"line_start":573,"line_end":573,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707682,"byte_end":707689,"line_start":574,"line_end":574,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707691,"byte_end":707700,"line_start":575,"line_end":575,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4950},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708764,"byte_end":708783,"line_start":618,"line_end":618,"column_start":9,"column_end":28},"name":"into_boxed_bitslice","qualname":"<BitVec<O, T>>::into_boxed_bitslice","value":"pub fn into_boxed_bitslice(Self) -> BitBox<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts the bit-vector into [`BitBox<O, T>`].","sig":null,"attributes":[{"value":"/ Converts the bit-vector into [`BitBox<O, T>`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707772,"byte_end":707822,"line_start":580,"line_end":580,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707824,"byte_end":707827,"line_start":581,"line_end":581,"column_start":2,"column_end":5}},{"value":"/ Note that this will drop any excess capacity.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707829,"byte_end":707878,"line_start":582,"line_end":582,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707880,"byte_end":707883,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707885,"byte_end":707899,"line_start":584,"line_end":584,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707901,"byte_end":707904,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_boxed_slice`](alloc::vec::Vec::into_boxed_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707906,"byte_end":707970,"line_start":586,"line_end":586,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707972,"byte_end":707975,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":707977,"byte_end":707998,"line_start":588,"line_end":588,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708000,"byte_end":708003,"line_start":589,"line_end":589,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` boxed bit-slice, not a standard boxed slice. To","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708005,"byte_end":708080,"line_start":590,"line_end":590,"column_start":2,"column_end":77}},{"value":"/ convert the underlying buffer into a boxed element slice, use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708082,"byte_end":708147,"line_start":591,"line_end":591,"column_start":2,"column_end":67}},{"value":"/ `.into_boxed_bitslice().into_boxed_slice()`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708149,"byte_end":708197,"line_start":592,"line_end":592,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708199,"byte_end":708202,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708204,"byte_end":708218,"line_start":594,"line_end":594,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708220,"byte_end":708223,"line_start":595,"line_end":595,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708225,"byte_end":708236,"line_start":596,"line_end":596,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708238,"byte_end":708265,"line_start":597,"line_end":597,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708267,"byte_end":708270,"line_start":598,"line_end":598,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708272,"byte_end":708308,"line_start":599,"line_end":599,"column_start":2,"column_end":38}},{"value":"/ let bitslice = bv.into_boxed_slice();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708310,"byte_end":708351,"line_start":600,"line_end":600,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708353,"byte_end":708360,"line_start":601,"line_end":601,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708362,"byte_end":708365,"line_start":602,"line_end":602,"column_start":2,"column_end":5}},{"value":"/ Any excess capacity is removed:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708367,"byte_end":708402,"line_start":603,"line_end":603,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708404,"byte_end":708407,"line_start":604,"line_end":604,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708409,"byte_end":708420,"line_start":605,"line_end":605,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708422,"byte_end":708449,"line_start":606,"line_end":606,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708451,"byte_end":708454,"line_start":607,"line_end":607,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(100);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708456,"byte_end":708508,"line_start":608,"line_end":608,"column_start":2,"column_end":54}},{"value":"/ bv.extend([0, 1, 0, 0, 1].iter().copied());","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708510,"byte_end":708557,"line_start":609,"line_end":609,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708559,"byte_end":708562,"line_start":610,"line_end":610,"column_start":2,"column_end":5}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708564,"byte_end":708598,"line_start":611,"line_end":611,"column_start":2,"column_end":36}},{"value":"/ let bs = bv.into_boxed_bitslice();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708600,"byte_end":708638,"line_start":612,"line_end":612,"column_start":2,"column_end":40}},{"value":"/ assert!(bs.into_bitvec().capacity() >= 5);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708640,"byte_end":708686,"line_start":613,"line_end":613,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708688,"byte_end":708695,"line_start":614,"line_end":614,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708697,"byte_end":708700,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ [`BitBox<O, T>`]: crate::boxed::BitBox","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708702,"byte_end":708744,"line_start":616,"line_end":616,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":708746,"byte_end":708755,"line_start":617,"line_end":617,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4951},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709364,"byte_end":709372,"line_start":642,"line_end":642,"column_start":9,"column_end":17},"name":"into_vec","qualname":"<BitVec<O, T>>::into_vec","value":"pub fn into_vec(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the bit-precision view, returning the underlying [`Vec`].","sig":null,"attributes":[{"value":"/ Removes the bit-precision view, returning the underlying [`Vec`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709051,"byte_end":709120,"line_start":628,"line_end":628,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709122,"byte_end":709125,"line_start":629,"line_end":629,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709127,"byte_end":709141,"line_start":630,"line_end":630,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709143,"byte_end":709146,"line_start":631,"line_end":631,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709148,"byte_end":709159,"line_start":632,"line_end":632,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709161,"byte_end":709188,"line_start":633,"line_end":633,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709190,"byte_end":709193,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![Lsb0, u8; 0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709195,"byte_end":709241,"line_start":635,"line_end":635,"column_start":2,"column_end":48}},{"value":"/ let vec = bv.into_vec();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709243,"byte_end":709271,"line_start":636,"line_end":636,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(vec, &[18]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709273,"byte_end":709300,"line_start":637,"line_end":637,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709302,"byte_end":709309,"line_start":638,"line_end":638,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709311,"byte_end":709314,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ [`Vec`]: alloc::vec::Vec","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709316,"byte_end":709344,"line_start":640,"line_end":640,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709346,"byte_end":709355,"line_start":641,"line_end":641,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4952},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710433,"byte_end":710445,"line_start":680,"line_end":680,"column_start":9,"column_end":21},"name":"set_elements","qualname":"<BitVec<O, T>>::set_elements","value":"pub fn set_elements(&mut Self, T::Mem)","parent":null,"children":[],"decl_id":null,"docs":" Writes a value into every element that the bit-vector considers live.","sig":null,"attributes":[{"value":"/ Writes a value into every element that the bit-vector considers live.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709590,"byte_end":709663,"line_start":654,"line_end":654,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709665,"byte_end":709668,"line_start":655,"line_end":655,"column_start":2,"column_end":5}},{"value":"/ This unconditionally writes `element` into each live location in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709670,"byte_end":709742,"line_start":656,"line_end":656,"column_start":2,"column_end":74}},{"value":"/ backing buffer, without altering the `BitVec`’s length or capacity.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709744,"byte_end":709817,"line_start":657,"line_end":657,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709819,"byte_end":709822,"line_start":658,"line_end":658,"column_start":2,"column_end":5}},{"value":"/ It is unspecified what effects this has on the allocated but dead","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709824,"byte_end":709893,"line_start":659,"line_end":659,"column_start":2,"column_end":71}},{"value":"/ elements in the buffer. You may not rely on them being zeroed *or* being","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709895,"byte_end":709971,"line_start":660,"line_end":660,"column_start":2,"column_end":78}},{"value":"/ set to the `value` integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":709973,"byte_end":710004,"line_start":661,"line_end":661,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710006,"byte_end":710009,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710011,"byte_end":710027,"line_start":663,"line_end":663,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710029,"byte_end":710032,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710034,"byte_end":710051,"line_start":665,"line_end":665,"column_start":2,"column_end":19}},{"value":"/ - `element`: The value which will be written to each live location in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710053,"byte_end":710126,"line_start":666,"line_end":666,"column_start":2,"column_end":75}},{"value":"/   the bit-vector’s buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710128,"byte_end":710160,"line_start":667,"line_end":667,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710162,"byte_end":710165,"line_start":668,"line_end":668,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710167,"byte_end":710181,"line_start":669,"line_end":669,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710183,"byte_end":710186,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710188,"byte_end":710199,"line_start":671,"line_end":671,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710201,"byte_end":710228,"line_start":672,"line_end":672,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710230,"byte_end":710233,"line_start":673,"line_end":673,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![LocalBits, u8; 0; 10];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710235,"byte_end":710282,"line_start":674,"line_end":674,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(bv.as_raw_slice(), [0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710284,"byte_end":710326,"line_start":675,"line_end":675,"column_start":2,"column_end":44}},{"value":"/ bv.set_elements(0xA5);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710328,"byte_end":710354,"line_start":676,"line_end":676,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(bv.as_raw_slice(), [0xA5, 0xA5]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710356,"byte_end":710404,"line_start":677,"line_end":677,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710406,"byte_end":710413,"line_start":678,"line_end":678,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710415,"byte_end":710424,"line_start":679,"line_end":679,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4954},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711468,"byte_end":711485,"line_start":714,"line_end":714,"column_start":9,"column_end":26},"name":"set_uninitialized","qualname":"<BitVec<O, T>>::set_uninitialized","value":"pub fn set_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the uninitialized bits of the bit-vector to a fixed value.","sig":null,"attributes":[{"value":"/ Sets the uninitialized bits of the bit-vector to a fixed value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710568,"byte_end":710635,"line_start":686,"line_end":686,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710637,"byte_end":710640,"line_start":687,"line_end":687,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits in the allocated buffer that are outside","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710642,"byte_end":710716,"line_start":688,"line_end":688,"column_start":2,"column_end":76}},{"value":"/ the [`as_bitslice`] view so that they have a consistent value. This can","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710718,"byte_end":710793,"line_start":689,"line_end":689,"column_start":2,"column_end":77}},{"value":"/ be used to zero the uninitialized memory so that when viewed as a raw","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710795,"byte_end":710868,"line_start":690,"line_end":690,"column_start":2,"column_end":75}},{"value":"/ memory slice, bits outside the live region have a predictable value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710870,"byte_end":710942,"line_start":691,"line_end":691,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710944,"byte_end":710947,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710949,"byte_end":710963,"line_start":693,"line_end":693,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710965,"byte_end":710968,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710970,"byte_end":710981,"line_start":695,"line_end":695,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":710983,"byte_end":711010,"line_start":696,"line_end":696,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711012,"byte_end":711015,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ let mut bv = 220u8.view_bits::<Lsb0>().to_bitvec();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711017,"byte_end":711072,"line_start":698,"line_end":698,"column_start":2,"column_end":57}},{"value":"/ assert_eq!(bv.as_raw_slice(), &[220u8]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711074,"byte_end":711118,"line_start":699,"line_end":699,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711120,"byte_end":711123,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ bv.truncate(4);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711125,"byte_end":711144,"line_start":701,"line_end":701,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.count_ones(), 2);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711146,"byte_end":711181,"line_start":702,"line_end":702,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(bv.as_raw_slice(), &[220u8]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711183,"byte_end":711227,"line_start":703,"line_end":703,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711229,"byte_end":711232,"line_start":704,"line_end":704,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(false);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711234,"byte_end":711266,"line_start":705,"line_end":705,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv.as_raw_slice(), &[12u8]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711268,"byte_end":711311,"line_start":706,"line_end":706,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711313,"byte_end":711316,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711318,"byte_end":711349,"line_start":708,"line_end":708,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bv.as_raw_slice(), &[!3u8]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711351,"byte_end":711394,"line_start":709,"line_end":709,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711396,"byte_end":711403,"line_start":710,"line_end":710,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711405,"byte_end":711408,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ [`as_bitslice`]: Self::as_bitslice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711410,"byte_end":711448,"line_start":712,"line_end":712,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711450,"byte_end":711459,"line_start":713,"line_end":713,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4955},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712486,"byte_end":712497,"line_start":750,"line_end":750,"column_start":9,"column_end":20},"name":"force_align","qualname":"<BitVec<O, T>>::force_align","value":"pub fn force_align(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the live region of the bit-vector’s contents begins at the\n leading edge of the buffer.","sig":null,"attributes":[{"value":"/ Ensures that the live region of the bit-vector’s contents begins at the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711882,"byte_end":711959,"line_start":728,"line_end":728,"column_start":2,"column_end":77}},{"value":"/ leading edge of the buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711961,"byte_end":711992,"line_start":729,"line_end":729,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711994,"byte_end":711997,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":711999,"byte_end":712013,"line_start":731,"line_end":731,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712015,"byte_end":712018,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712020,"byte_end":712031,"line_start":733,"line_end":733,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712033,"byte_end":712060,"line_start":734,"line_end":734,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712062,"byte_end":712065,"line_start":735,"line_end":735,"column_start":2,"column_end":5}},{"value":"/ let data = 0x3Cu8;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712067,"byte_end":712089,"line_start":736,"line_end":736,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712091,"byte_end":712131,"line_start":737,"line_end":737,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712133,"byte_end":712136,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bits[2 .. 6].to_bitvec();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712138,"byte_end":712180,"line_start":739,"line_end":739,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bv, bits[2 .. 6]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712182,"byte_end":712215,"line_start":740,"line_end":740,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bv.as_raw_slice()[0], data);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712217,"byte_end":712260,"line_start":741,"line_end":741,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712262,"byte_end":712265,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ bv.force_align();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712267,"byte_end":712288,"line_start":743,"line_end":743,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(bv, bits[2 .. 6]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712290,"byte_end":712323,"line_start":744,"line_end":744,"column_start":2,"column_end":35}},{"value":"/ // It is not specified what happens","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712325,"byte_end":712364,"line_start":745,"line_end":745,"column_start":2,"column_end":41}},{"value":"/ // to bits that are no longer used.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712366,"byte_end":712405,"line_start":746,"line_end":746,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(bv.as_raw_slice()[0] & 0xF0, 0xF0);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712407,"byte_end":712457,"line_start":747,"line_end":747,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712459,"byte_end":712466,"line_start":748,"line_end":748,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":712468,"byte_end":712477,"line_start":749,"line_end":749,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4958},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713719,"byte_end":713730,"line_start":797,"line_end":797,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitVec<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a bit-slice containing the entire bit-vector.","sig":null,"attributes":[{"value":"/ Extracts a bit-slice containing the entire bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713126,"byte_end":713184,"line_start":773,"line_end":773,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713186,"byte_end":713189,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&bv[..]`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713191,"byte_end":713219,"line_start":775,"line_end":775,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713221,"byte_end":713224,"line_start":776,"line_end":776,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713226,"byte_end":713240,"line_start":777,"line_end":777,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713242,"byte_end":713245,"line_start":778,"line_end":778,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_slice`](alloc::vec::Vec::as_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713247,"byte_end":713295,"line_start":779,"line_end":779,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713297,"byte_end":713300,"line_start":780,"line_end":780,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713302,"byte_end":713323,"line_start":781,"line_end":781,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713325,"byte_end":713328,"line_start":782,"line_end":782,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` bit-slice, not a standard slice. To view the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713330,"byte_end":713402,"line_start":783,"line_end":783,"column_start":2,"column_end":74}},{"value":"/ underlying element buffer, use [`as_raw_slice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713404,"byte_end":713456,"line_start":784,"line_end":784,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713458,"byte_end":713461,"line_start":785,"line_end":785,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713463,"byte_end":713477,"line_start":786,"line_end":786,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713479,"byte_end":713482,"line_start":787,"line_end":787,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713484,"byte_end":713495,"line_start":788,"line_end":788,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713497,"byte_end":713524,"line_start":789,"line_end":789,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713526,"byte_end":713529,"line_start":790,"line_end":790,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713531,"byte_end":713567,"line_start":791,"line_end":791,"column_start":2,"column_end":38}},{"value":"/ let bits = bv.as_bitslice();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713569,"byte_end":713601,"line_start":792,"line_end":792,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713603,"byte_end":713610,"line_start":793,"line_end":793,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713612,"byte_end":713615,"line_start":794,"line_end":794,"column_start":2,"column_end":5}},{"value":"/ [`as_raw_slice`]: Self::as_raw_slice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713617,"byte_end":713657,"line_start":795,"line_end":795,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713694,"byte_end":713708,"line_start":796,"line_end":796,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4959},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714422,"byte_end":714437,"line_start":825,"line_end":825,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitVec<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable bit-slice of the entire bit-vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable bit-slice of the entire bit-vector.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713797,"byte_end":713855,"line_start":801,"line_end":801,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713857,"byte_end":713860,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&mut bv[..]`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713862,"byte_end":713894,"line_start":803,"line_end":803,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713896,"byte_end":713899,"line_start":804,"line_end":804,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713901,"byte_end":713915,"line_start":805,"line_end":805,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713917,"byte_end":713920,"line_start":806,"line_end":806,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_slice`](alloc::vec::Vec::as_mut_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713922,"byte_end":713978,"line_start":807,"line_end":807,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713980,"byte_end":713983,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":713985,"byte_end":714006,"line_start":809,"line_end":809,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714008,"byte_end":714011,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` bit-slice, not a standard slice. To view the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714013,"byte_end":714085,"line_start":811,"line_end":811,"column_start":2,"column_end":74}},{"value":"/ underlying element buffer, use [`as_mut_raw_slice`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714087,"byte_end":714143,"line_start":812,"line_end":812,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714145,"byte_end":714148,"line_start":813,"line_end":813,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714150,"byte_end":714164,"line_start":814,"line_end":814,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714166,"byte_end":714169,"line_start":815,"line_end":815,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714171,"byte_end":714182,"line_start":816,"line_end":816,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714184,"byte_end":714211,"line_start":817,"line_end":817,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714213,"byte_end":714216,"line_start":818,"line_end":818,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714218,"byte_end":714258,"line_start":819,"line_end":819,"column_start":2,"column_end":42}},{"value":"/ let bits = bv.as_mut_bitslice();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714260,"byte_end":714296,"line_start":820,"line_end":820,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714298,"byte_end":714305,"line_start":821,"line_end":821,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714307,"byte_end":714310,"line_start":822,"line_end":822,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_raw_slice`]: Self::as_mut_raw_slice","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714312,"byte_end":714360,"line_start":823,"line_end":823,"column_start":2,"column_end":50}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714397,"byte_end":714411,"line_start":824,"line_end":824,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4960},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715858,"byte_end":715867,"line_start":870,"line_end":870,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitVec<O, T>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the bit-vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the bit-vector’s buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714512,"byte_end":714567,"line_start":829,"line_end":829,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714569,"byte_end":714572,"line_start":830,"line_end":830,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-vector outlives the bit-pointer this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714574,"byte_end":714650,"line_start":831,"line_end":831,"column_start":2,"column_end":78}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714652,"byte_end":714727,"line_start":832,"line_end":832,"column_start":2,"column_end":77}},{"value":"/ the bit-vector may cause its buffer to be reällocated, which would also","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714729,"byte_end":714805,"line_start":833,"line_end":833,"column_start":2,"column_end":77}},{"value":"/ make any bit-pointers to it invalid.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714807,"byte_end":714847,"line_start":834,"line_end":834,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714849,"byte_end":714852,"line_start":835,"line_end":835,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the bit-pointer","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714854,"byte_end":714917,"line_start":836,"line_end":836,"column_start":2,"column_end":65}},{"value":"/ (non-transitively) points to is never written to (except inside an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714919,"byte_end":714989,"line_start":837,"line_end":837,"column_start":2,"column_end":72}},{"value":"/ [`UnsafeCell`]) using this bit-pointer or any bit-pointer derived from","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":714991,"byte_end":715065,"line_start":838,"line_end":838,"column_start":2,"column_end":76}},{"value":"/ it. If you need to mutate the contents of the buffer, use","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715067,"byte_end":715128,"line_start":839,"line_end":839,"column_start":2,"column_end":63}},{"value":"/ [`as_mut_bitptr`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715130,"byte_end":715152,"line_start":840,"line_end":840,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715154,"byte_end":715157,"line_start":841,"line_end":841,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715159,"byte_end":715173,"line_start":842,"line_end":842,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715175,"byte_end":715178,"line_start":843,"line_end":843,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_ptr`](alloc::vec::Vec::as_ptr)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715180,"byte_end":715224,"line_start":844,"line_end":844,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715226,"byte_end":715229,"line_start":845,"line_end":845,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715231,"byte_end":715252,"line_start":846,"line_end":846,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715254,"byte_end":715257,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` bit-pointer, not a standard pointer. To take the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715259,"byte_end":715335,"line_start":848,"line_end":848,"column_start":2,"column_end":78}},{"value":"/ address of the underlying element buffer, use [`as_raw_ptr`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715337,"byte_end":715402,"line_start":849,"line_end":849,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715404,"byte_end":715407,"line_start":850,"line_end":850,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715409,"byte_end":715423,"line_start":851,"line_end":851,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715425,"byte_end":715428,"line_start":852,"line_end":852,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715430,"byte_end":715441,"line_start":853,"line_end":853,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715443,"byte_end":715470,"line_start":854,"line_end":854,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715472,"byte_end":715475,"line_start":855,"line_end":855,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715477,"byte_end":715513,"line_start":856,"line_end":856,"column_start":2,"column_end":38}},{"value":"/ let bp = bv.as_bitptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715515,"byte_end":715543,"line_start":857,"line_end":857,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715545,"byte_end":715548,"line_start":858,"line_end":858,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715550,"byte_end":715562,"line_start":859,"line_end":859,"column_start":2,"column_end":14}},{"value":"/   for i in 0 .. bv.len() {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715564,"byte_end":715594,"line_start":860,"line_end":860,"column_start":2,"column_end":32}},{"value":"/     assert_eq!(bp.add(i).read(), bv[i]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715596,"byte_end":715640,"line_start":861,"line_end":861,"column_start":2,"column_end":46}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715642,"byte_end":715649,"line_start":862,"line_end":862,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715651,"byte_end":715656,"line_start":863,"line_end":863,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715658,"byte_end":715665,"line_start":864,"line_end":864,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715667,"byte_end":715670,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ [`UnsafeCell`]: core::cell::UnsafeCell","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715672,"byte_end":715714,"line_start":866,"line_end":866,"column_start":2,"column_end":44}},{"value":"/ [`as_raw_ptr`]: Self::as_raw_ptr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715716,"byte_end":715752,"line_start":867,"line_end":867,"column_start":2,"column_end":38}},{"value":"/ [`as_mut_bitptr`]: Self::as_mut_bitptr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715754,"byte_end":715796,"line_start":868,"line_end":868,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715833,"byte_end":715847,"line_start":869,"line_end":869,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4961},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716981,"byte_end":716994,"line_start":908,"line_end":908,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitVec<O, T>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable bit-pointer to the bit-vector’s region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable bit-pointer to the bit-vector’s region.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":715940,"byte_end":716011,"line_start":874,"line_end":874,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716013,"byte_end":716016,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-vector outlives the bit-pointer this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716018,"byte_end":716094,"line_start":876,"line_end":876,"column_start":2,"column_end":78}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716096,"byte_end":716171,"line_start":877,"line_end":877,"column_start":2,"column_end":77}},{"value":"/ the bit-vector may cause its buffer to be reällocated, which would also","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716173,"byte_end":716249,"line_start":878,"line_end":878,"column_start":2,"column_end":77}},{"value":"/ make any bit-pointers to it invalid.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716251,"byte_end":716291,"line_start":879,"line_end":879,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716293,"byte_end":716296,"line_start":880,"line_end":880,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716298,"byte_end":716312,"line_start":881,"line_end":881,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716314,"byte_end":716317,"line_start":882,"line_end":882,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_ptr`](alloc::vec::Vec::as_mut_ptr)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716319,"byte_end":716371,"line_start":883,"line_end":883,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716373,"byte_end":716376,"line_start":884,"line_end":884,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716378,"byte_end":716399,"line_start":885,"line_end":885,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716401,"byte_end":716404,"line_start":886,"line_end":886,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` bit-pointer, not a standard pointer. To take the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716406,"byte_end":716482,"line_start":887,"line_end":887,"column_start":2,"column_end":78}},{"value":"/ address of the underlying element buffer, use [`as_mut_raw_ptr`].","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716484,"byte_end":716553,"line_start":888,"line_end":888,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716555,"byte_end":716558,"line_start":889,"line_end":889,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716560,"byte_end":716574,"line_start":890,"line_end":890,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716576,"byte_end":716579,"line_start":891,"line_end":891,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716581,"byte_end":716592,"line_start":892,"line_end":892,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716594,"byte_end":716621,"line_start":893,"line_end":893,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716623,"byte_end":716626,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ let mut bv = BitVec::<Msb0, u8>::with_capacity(4);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716628,"byte_end":716682,"line_start":895,"line_end":895,"column_start":2,"column_end":56}},{"value":"/ let bp = bv.as_mut_bitptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716684,"byte_end":716716,"line_start":896,"line_end":896,"column_start":2,"column_end":34}},{"value":"/ unsafe {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716718,"byte_end":716730,"line_start":897,"line_end":897,"column_start":2,"column_end":14}},{"value":"/   for i in 0 .. 4 {","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716732,"byte_end":716755,"line_start":898,"line_end":898,"column_start":2,"column_end":25}},{"value":"/     bp.add(i).write(true);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716757,"byte_end":716787,"line_start":899,"line_end":899,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716789,"byte_end":716796,"line_start":900,"line_end":900,"column_start":2,"column_end":9}},{"value":"/   bv.set_len(4);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716798,"byte_end":716818,"line_start":901,"line_end":901,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716820,"byte_end":716825,"line_start":902,"line_end":902,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bv, bits![1; 4]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716827,"byte_end":716859,"line_start":903,"line_end":903,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716861,"byte_end":716868,"line_start":904,"line_end":904,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716870,"byte_end":716873,"line_start":905,"line_end":905,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_raw_ptr`]: Self::as_mut_raw_ptr","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716875,"byte_end":716919,"line_start":906,"line_end":906,"column_start":2,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":716956,"byte_end":716970,"line_start":907,"line_end":907,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4962},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717646,"byte_end":717658,"line_start":934,"line_end":934,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitVec<O, T>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying buffer as a shared element slice.","sig":null,"attributes":[{"value":"/ Views the underlying buffer as a shared element slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717061,"byte_end":717119,"line_start":912,"line_end":912,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717121,"byte_end":717124,"line_start":913,"line_end":913,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717126,"byte_end":717140,"line_start":914,"line_end":914,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717142,"byte_end":717145,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_slice`](alloc::vec::Vec::as_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717147,"byte_end":717195,"line_start":916,"line_end":916,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717197,"byte_end":717200,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717202,"byte_end":717223,"line_start":918,"line_end":918,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717225,"byte_end":717228,"line_start":919,"line_end":919,"column_start":2,"column_end":5}},{"value":"/ This method is renamed in order to emphasize the semantic distinction","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717230,"byte_end":717303,"line_start":920,"line_end":920,"column_start":2,"column_end":75}},{"value":"/ between borrowing the bit-vector contents, and borrowing the memory that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717305,"byte_end":717381,"line_start":921,"line_end":921,"column_start":2,"column_end":78}},{"value":"/ implements the collection contents.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717383,"byte_end":717422,"line_start":922,"line_end":922,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717424,"byte_end":717427,"line_start":923,"line_end":923,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717429,"byte_end":717443,"line_start":924,"line_end":924,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717445,"byte_end":717448,"line_start":925,"line_end":925,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717450,"byte_end":717461,"line_start":926,"line_end":926,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717463,"byte_end":717490,"line_start":927,"line_end":927,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717492,"byte_end":717495,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![Msb0, u8; 0, 1, 0, 0, 1, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717497,"byte_end":717552,"line_start":929,"line_end":929,"column_start":2,"column_end":57}},{"value":"/ let raw = bv.as_raw_slice();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717554,"byte_end":717586,"line_start":930,"line_end":930,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(raw, &[0x4D]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717588,"byte_end":717617,"line_start":931,"line_end":931,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717619,"byte_end":717626,"line_start":932,"line_end":932,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717628,"byte_end":717637,"line_start":933,"line_end":933,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4963},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718472,"byte_end":718488,"line_start":967,"line_end":967,"column_start":9,"column_end":25},"name":"as_mut_raw_slice","qualname":"<BitVec<O, T>>::as_mut_raw_slice","value":"pub fn as_mut_raw_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying buffer as an exclusive element slice.","sig":null,"attributes":[{"value":"/ Views the underlying buffer as an exclusive element slice.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717795,"byte_end":717857,"line_start":943,"line_end":943,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717859,"byte_end":717862,"line_start":944,"line_end":944,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717864,"byte_end":717878,"line_start":945,"line_end":945,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717880,"byte_end":717883,"line_start":946,"line_end":946,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_slice`](alloc::vec::Vec::as_mut_slice)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717885,"byte_end":717941,"line_start":947,"line_end":947,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717943,"byte_end":717946,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717948,"byte_end":717969,"line_start":949,"line_end":949,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717971,"byte_end":717974,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ This method is renamed in order to emphasize the semantic distinction","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":717976,"byte_end":718049,"line_start":951,"line_end":951,"column_start":2,"column_end":75}},{"value":"/ between borrowing the bit-vector contents, and borrowing the memory that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718051,"byte_end":718127,"line_start":952,"line_end":952,"column_start":2,"column_end":78}},{"value":"/ implements the collection contents.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718129,"byte_end":718168,"line_start":953,"line_end":953,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718170,"byte_end":718173,"line_start":954,"line_end":954,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718175,"byte_end":718189,"line_start":955,"line_end":955,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718191,"byte_end":718194,"line_start":956,"line_end":956,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718196,"byte_end":718207,"line_start":957,"line_end":957,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718209,"byte_end":718236,"line_start":958,"line_end":958,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718238,"byte_end":718241,"line_start":959,"line_end":959,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![Msb0, u8; 0, 1, 0, 0, 1, 1, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718243,"byte_end":718302,"line_start":960,"line_end":960,"column_start":2,"column_end":61}},{"value":"/ let raw = bv.as_mut_raw_slice();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718304,"byte_end":718340,"line_start":961,"line_end":961,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(raw, &[0x4D]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718342,"byte_end":718371,"line_start":962,"line_end":962,"column_start":2,"column_end":31}},{"value":"/ raw[0] = 0xD4;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718373,"byte_end":718391,"line_start":963,"line_end":963,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(bv, bits![1, 1, 0, 1, 0, 1, 0, 0]);","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718393,"byte_end":718443,"line_start":964,"line_end":964,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718445,"byte_end":718452,"line_start":965,"line_end":965,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718454,"byte_end":718463,"line_start":966,"line_end":966,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4964},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719221,"byte_end":719231,"line_start":998,"line_end":998,"column_start":9,"column_end":19},"name":"as_raw_ptr","qualname":"<BitVec<O, T>>::as_raw_ptr","value":"pub fn as_raw_ptr(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the bit-vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the bit-vector’s buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718635,"byte_end":718690,"line_start":976,"line_end":976,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718692,"byte_end":718695,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718697,"byte_end":718711,"line_start":978,"line_end":978,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718713,"byte_end":718716,"line_start":979,"line_end":979,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_ptr`](alloc::vec::Vec::as_ptr)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718718,"byte_end":718762,"line_start":980,"line_end":980,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718764,"byte_end":718767,"line_start":981,"line_end":981,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718769,"byte_end":718790,"line_start":982,"line_end":982,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718792,"byte_end":718795,"line_start":983,"line_end":983,"column_start":2,"column_end":5}},{"value":"/ This method is renamed in order to emphasize the semantic distinction","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718797,"byte_end":718870,"line_start":984,"line_end":984,"column_start":2,"column_end":75}},{"value":"/ between taking a pointer to the start of the bit-vector contents, and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718872,"byte_end":718945,"line_start":985,"line_end":985,"column_start":2,"column_end":75}},{"value":"/ taking a pointer to the underlying memory that implements the collection","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":718947,"byte_end":719023,"line_start":986,"line_end":986,"column_start":2,"column_end":78}},{"value":"/ contents.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719025,"byte_end":719038,"line_start":987,"line_end":987,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719040,"byte_end":719043,"line_start":988,"line_end":988,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719045,"byte_end":719059,"line_start":989,"line_end":989,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719061,"byte_end":719064,"line_start":990,"line_end":990,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719066,"byte_end":719077,"line_start":991,"line_end":991,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719079,"byte_end":719106,"line_start":992,"line_end":992,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719108,"byte_end":719111,"line_start":993,"line_end":993,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![Msb0, u8; 0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719113,"byte_end":719159,"line_start":994,"line_end":994,"column_start":2,"column_end":48}},{"value":"/ let addr = bv.as_raw_ptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719161,"byte_end":719192,"line_start":995,"line_end":995,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719194,"byte_end":719201,"line_start":996,"line_end":996,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719203,"byte_end":719212,"line_start":997,"line_end":997,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4965},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719898,"byte_end":719912,"line_start":1024,"line_end":1024,"column_start":9,"column_end":23},"name":"as_mut_raw_ptr","qualname":"<BitVec<O, T>>::as_mut_raw_ptr","value":"pub fn as_mut_raw_ptr(&mut Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable pointer to the bit-vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable pointer to the bit-vector’s buffer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719294,"byte_end":719361,"line_start":1002,"line_end":1002,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719363,"byte_end":719366,"line_start":1003,"line_end":1003,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719368,"byte_end":719382,"line_start":1004,"line_end":1004,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719384,"byte_end":719387,"line_start":1005,"line_end":1005,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_ptr`](alloc::vec::Vec::as_mut_ptr)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719389,"byte_end":719441,"line_start":1006,"line_end":1006,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719443,"byte_end":719446,"line_start":1007,"line_end":1007,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719448,"byte_end":719469,"line_start":1008,"line_end":1008,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719471,"byte_end":719474,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ This method is renamed in order to emphasize the semantic distinction","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719476,"byte_end":719549,"line_start":1010,"line_end":1010,"column_start":2,"column_end":75}},{"value":"/ between taking a pointer to the start of the bit-vector contents, and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719551,"byte_end":719624,"line_start":1011,"line_end":1011,"column_start":2,"column_end":75}},{"value":"/ taking a pointer to the underlying memory that implements the collection","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719626,"byte_end":719702,"line_start":1012,"line_end":1012,"column_start":2,"column_end":78}},{"value":"/ contents.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719704,"byte_end":719717,"line_start":1013,"line_end":1013,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719719,"byte_end":719722,"line_start":1014,"line_end":1014,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719724,"byte_end":719738,"line_start":1015,"line_end":1015,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719740,"byte_end":719743,"line_start":1016,"line_end":1016,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719745,"byte_end":719756,"line_start":1017,"line_end":1017,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719758,"byte_end":719785,"line_start":1018,"line_end":1018,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719787,"byte_end":719790,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719792,"byte_end":719832,"line_start":1020,"line_end":1020,"column_start":2,"column_end":42}},{"value":"/ let addr = bv.as_mut_raw_ptr();","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719834,"byte_end":719869,"line_start":1021,"line_end":1021,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719871,"byte_end":719878,"line_start":1022,"line_end":1022,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":719880,"byte_end":719889,"line_start":1023,"line_end":1023,"column_start":2,"column_end":11}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52459,"byte_end":52460,"line_start":191,"line_end":191,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65551,"byte_end":65559,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":67212,"byte_end":67220,"line_start":124,"line_end":124,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":67435,"byte_end":67443,"line_start":137,"line_end":137,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68083,"byte_end":68091,"line_start":173,"line_end":173,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68441,"byte_end":68449,"line_start":190,"line_end":190,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68595,"byte_end":68603,"line_start":201,"line_end":201,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69016,"byte_end":69024,"line_start":26,"line_end":26,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69293,"byte_end":69301,"line_start":42,"line_end":42,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69545,"byte_end":69553,"line_start":55,"line_end":55,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69819,"byte_end":69827,"line_start":71,"line_end":71,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70070,"byte_end":70078,"line_start":84,"line_end":84,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70347,"byte_end":70355,"line_start":100,"line_end":100,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70589,"byte_end":70597,"line_start":113,"line_end":113,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70820,"byte_end":70828,"line_start":127,"line_end":127,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71035,"byte_end":71043,"line_start":139,"line_end":139,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71353,"byte_end":71361,"line_start":154,"line_end":154,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71585,"byte_end":71593,"line_start":166,"line_end":166,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72298,"byte_end":72306,"line_start":41,"line_end":41,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72524,"byte_end":72532,"line_start":53,"line_end":53,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72708,"byte_end":72716,"line_start":64,"line_end":64,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72991,"byte_end":72999,"line_start":81,"line_end":81,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73068,"byte_end":73076,"line_start":88,"line_end":88,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73284,"byte_end":73292,"line_start":99,"line_end":99,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73501,"byte_end":73509,"line_start":112,"line_end":112,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73739,"byte_end":73747,"line_start":125,"line_end":125,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73975,"byte_end":73983,"line_start":137,"line_end":137,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74280,"byte_end":74288,"line_start":151,"line_end":151,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74502,"byte_end":74510,"line_start":163,"line_end":163,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74715,"byte_end":74723,"line_start":175,"line_end":175,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74888,"byte_end":74896,"line_start":186,"line_end":186,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":75302,"byte_end":75310,"line_start":205,"line_end":205,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":77863,"byte_end":77871,"line_start":308,"line_end":308,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78037,"byte_end":78045,"line_start":320,"line_end":320,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78222,"byte_end":78230,"line_start":331,"line_end":331,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78499,"byte_end":78507,"line_start":345,"line_end":345,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78719,"byte_end":78727,"line_start":357,"line_end":357,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78937,"byte_end":78945,"line_start":369,"line_end":369,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79155,"byte_end":79163,"line_start":381,"line_end":381,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79372,"byte_end":79380,"line_start":393,"line_end":393,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79591,"byte_end":79599,"line_start":406,"line_end":406,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80520,"byte_end":80528,"line_start":450,"line_end":450,"column_start":21,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80606,"byte_end":80614,"line_start":457,"line_end":457,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81065,"byte_end":81085,"line_start":481,"line_end":481,"column_start":16,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81290,"byte_end":81310,"line_start":493,"line_end":493,"column_start":22,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81569,"byte_end":81589,"line_start":507,"line_end":507,"column_start":24,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81870,"byte_end":81890,"line_start":522,"line_end":522,"column_start":38,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62202,"byte_end":62210,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95690,"byte_end":95699,"line_start":367,"line_end":367,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95826,"byte_end":95835,"line_start":378,"line_end":378,"column_start":21,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104068,"byte_end":104074,"line_start":656,"line_end":656,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104187,"byte_end":104193,"line_start":665,"line_end":665,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104840,"byte_end":104846,"line_start":692,"line_end":692,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105469,"byte_end":105475,"line_start":717,"line_end":717,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105748,"byte_end":105754,"line_start":731,"line_end":731,"column_start":39,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105802,"byte_end":105808,"line_start":735,"line_end":735,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131305,"byte_end":131313,"line_start":719,"line_end":719,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":141464,"byte_end":141472,"line_start":1048,"line_end":1048,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":150935,"byte_end":150943,"line_start":1366,"line_end":1366,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":151559,"byte_end":151565,"line_start":1399,"line_end":1399,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":152170,"byte_end":152176,"line_start":1432,"line_end":1432,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":799},{"krate":0,"index":801},{"krate":0,"index":803}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field/io.rs","byte_start":162911,"byte_end":162917,"line_start":121,"line_end":121,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":867},{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168125,"byte_end":168131,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":933},{"krate":0,"index":935},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177672,"byte_end":177678,"line_start":423,"line_end":423,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177885,"byte_end":177891,"line_start":435,"line_end":435,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178091,"byte_end":178097,"line_start":445,"line_end":445,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178306,"byte_end":178312,"line_start":455,"line_end":455,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178814,"byte_end":178825,"line_start":478,"line_end":478,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179674,"byte_end":179685,"line_start":517,"line_end":517,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":963}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179901,"byte_end":179912,"line_start":527,"line_end":527,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180194,"byte_end":180205,"line_start":543,"line_end":543,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181968,"byte_end":181974,"line_start":597,"line_end":597,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":186373,"byte_end":186379,"line_start":756,"line_end":756,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":186583,"byte_end":186589,"line_start":766,"line_end":766,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":186798,"byte_end":186804,"line_start":776,"line_end":776,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188355,"byte_end":188361,"line_start":827,"line_end":827,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190575,"byte_end":190581,"line_start":916,"line_end":916,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190781,"byte_end":190787,"line_start":926,"line_end":926,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190996,"byte_end":191002,"line_start":936,"line_end":936,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192308,"byte_end":192314,"line_start":985,"line_end":985,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194456,"byte_end":194462,"line_start":1065,"line_end":1065,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194662,"byte_end":194668,"line_start":1075,"line_end":1075,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194877,"byte_end":194883,"line_start":1085,"line_end":1085,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195798,"byte_end":195805,"line_start":1122,"line_end":1122,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198050,"byte_end":198057,"line_start":1213,"line_end":1213,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198258,"byte_end":198265,"line_start":1223,"line_end":1223,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198475,"byte_end":198482,"line_start":1233,"line_end":1233,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198671,"byte_end":198678,"line_start":1243,"line_end":1243,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198881,"byte_end":198888,"line_start":1254,"line_end":1254,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1052}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":199088,"byte_end":199095,"line_start":1268,"line_end":1268,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1055},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":199289,"byte_end":199296,"line_start":1282,"line_end":1282,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1059},{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222878,"byte_end":222882,"line_start":266,"line_end":266,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":224230,"byte_end":224234,"line_start":312,"line_end":312,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1133},{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256371,"byte_end":256384,"line_start":99,"line_end":99,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256515,"byte_end":256528,"line_start":104,"line_end":104,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256726,"byte_end":256739,"line_start":114,"line_end":114,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":257048,"byte_end":257061,"line_start":128,"line_end":128,"column_start":25,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":257094,"byte_end":257107,"line_start":131,"line_end":131,"column_start":25,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":257170,"byte_end":257183,"line_start":135,"line_end":135,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261179,"byte_end":261185,"line_start":127,"line_end":127,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1402},{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262700,"byte_end":262706,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1412},{"krate":0,"index":1413}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264399,"byte_end":264405,"line_start":259,"line_end":259,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264614,"byte_end":264620,"line_start":271,"line_end":271,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264805,"byte_end":264811,"line_start":281,"line_end":281,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":265310,"byte_end":265316,"line_start":301,"line_end":301,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":265607,"byte_end":265613,"line_start":317,"line_end":317,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1439}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":265830,"byte_end":265836,"line_start":330,"line_end":330,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":266302,"byte_end":266308,"line_start":350,"line_end":350,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":266645,"byte_end":266651,"line_start":369,"line_end":369,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1457}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":266904,"byte_end":266910,"line_start":382,"line_end":382,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1462}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":267122,"byte_end":267128,"line_start":394,"line_end":394,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":267425,"byte_end":267431,"line_start":408,"line_end":408,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":267664,"byte_end":267670,"line_start":421,"line_end":421,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":267902,"byte_end":267908,"line_start":434,"line_end":434,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":268303,"byte_end":268309,"line_start":453,"line_end":453,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1489}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":268526,"byte_end":268532,"line_start":468,"line_end":468,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":268697,"byte_end":268703,"line_start":479,"line_end":479,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1498}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":269033,"byte_end":269039,"line_start":497,"line_end":497,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1504}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272603,"byte_end":272614,"line_start":81,"line_end":81,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1582},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1587}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":276438,"byte_end":276449,"line_start":218,"line_end":218,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":276603,"byte_end":276614,"line_start":230,"line_end":230,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":276773,"byte_end":276784,"line_start":240,"line_end":240,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1603}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":277141,"byte_end":277152,"line_start":258,"line_end":258,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1608}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":277355,"byte_end":277366,"line_start":271,"line_end":271,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":277616,"byte_end":277621,"line_start":284,"line_end":284,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":277836,"byte_end":277847,"line_start":297,"line_end":297,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":278196,"byte_end":278207,"line_start":313,"line_end":313,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":278416,"byte_end":278427,"line_start":327,"line_end":327,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1638},{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":279262,"byte_end":279273,"line_start":373,"line_end":373,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1645}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":279740,"byte_end":279751,"line_start":399,"line_end":399,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":279987,"byte_end":279998,"line_start":411,"line_end":411,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":280141,"byte_end":280152,"line_start":420,"line_end":420,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1659},{"krate":0,"index":1660}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283587,"byte_end":283593,"line_start":121,"line_end":121,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1803},{"krate":0,"index":1804},{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1822},{"krate":0,"index":1825}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306934,"byte_end":306940,"line_start":888,"line_end":888,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308887,"byte_end":308893,"line_start":960,"line_end":960,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1842},{"krate":0,"index":1845},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316929,"byte_end":316935,"line_start":1237,"line_end":1237,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1858}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317763,"byte_end":317769,"line_start":1263,"line_end":1263,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1863}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317954,"byte_end":317960,"line_start":1278,"line_end":1278,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":318078,"byte_end":318084,"line_start":1287,"line_end":1287,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1872}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":318406,"byte_end":318412,"line_start":1302,"line_end":1302,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1879}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":318872,"byte_end":318878,"line_start":1322,"line_end":1322,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1886}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":319416,"byte_end":319422,"line_start":1347,"line_end":1347,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1890}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":319616,"byte_end":319622,"line_start":1359,"line_end":1359,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1894}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":319823,"byte_end":319829,"line_start":1371,"line_end":1371,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1898},{"krate":0,"index":1899}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":320082,"byte_end":320088,"line_start":1385,"line_end":1385,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":320299,"byte_end":320305,"line_start":1398,"line_end":1398,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":320600,"byte_end":320606,"line_start":1417,"line_end":1417,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1914}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":320904,"byte_end":320910,"line_start":1433,"line_end":1433,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1919}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321121,"byte_end":321127,"line_start":1447,"line_end":1447,"column_start":24,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321651,"byte_end":321662,"line_start":1469,"line_end":1469,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1927}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321833,"byte_end":321844,"line_start":1479,"line_end":1479,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1930}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":322028,"byte_end":322039,"line_start":1489,"line_end":1489,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1933}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":322215,"byte_end":322226,"line_start":1499,"line_end":1499,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1936}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":322419,"byte_end":322430,"line_start":1509,"line_end":1509,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1939}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":322745,"byte_end":322756,"line_start":1523,"line_end":1523,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":330555,"byte_end":330562,"line_start":202,"line_end":202,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2058},{"krate":0,"index":2059},{"krate":0,"index":2061},{"krate":0,"index":2063},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":351482,"byte_end":351489,"line_start":900,"line_end":900,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2084}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":352545,"byte_end":352552,"line_start":940,"line_end":940,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2088},{"krate":0,"index":2089}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":353884,"byte_end":353891,"line_start":985,"line_end":985,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2095}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":354034,"byte_end":354041,"line_start":997,"line_end":997,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":354164,"byte_end":354171,"line_start":1005,"line_end":1005,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2106}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":354818,"byte_end":354825,"line_start":1027,"line_end":1027,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2111}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355005,"byte_end":355012,"line_start":1040,"line_end":1040,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2116}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355235,"byte_end":355242,"line_start":1053,"line_end":1053,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2121}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355437,"byte_end":355444,"line_start":1065,"line_end":1065,"column_start":24,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355940,"byte_end":355952,"line_start":1087,"line_end":1087,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2128}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":356128,"byte_end":356140,"line_start":1097,"line_end":1097,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2131}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":356331,"byte_end":356343,"line_start":1107,"line_end":1107,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2134}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":356859,"byte_end":356871,"line_start":1129,"line_end":1129,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2137}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":357364,"byte_end":357376,"line_start":1150,"line_end":1150,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":357427,"byte_end":357439,"line_start":1154,"line_end":1154,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":357520,"byte_end":357532,"line_start":1159,"line_end":1159,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444664,"byte_end":444672,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2567},{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":2573},{"krate":0,"index":2576},{"krate":0,"index":2579},{"krate":0,"index":2582},{"krate":0,"index":2583},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2589},{"krate":0,"index":2590},{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2598},{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2605},{"krate":0,"index":2607},{"krate":0,"index":2609},{"krate":0,"index":2611},{"krate":0,"index":2613},{"krate":0,"index":2615},{"krate":0,"index":2617},{"krate":0,"index":2621},{"krate":0,"index":2624},{"krate":0,"index":2627},{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2632},{"krate":0,"index":2633},{"krate":0,"index":2635},{"krate":0,"index":2638},{"krate":0,"index":2640}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507757,"byte_end":507765,"line_start":2125,"line_end":2125,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2645},{"krate":0,"index":2646}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":524177,"byte_end":524186,"line_start":2697,"line_end":2697,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2692},{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2697},{"krate":0,"index":2698},{"krate":0,"index":2699}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526653,"byte_end":526657,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2785},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530988,"byte_end":530992,"line_start":265,"line_end":265,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2794}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531213,"byte_end":531217,"line_start":280,"line_end":280,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2798}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531401,"byte_end":531405,"line_start":292,"line_end":292,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2802}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531885,"byte_end":531895,"line_start":315,"line_end":315,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2807},{"krate":0,"index":2808},{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2813},{"krate":0,"index":2814}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532584,"byte_end":532594,"line_start":354,"line_end":354,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2819},{"krate":0,"index":2821}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532983,"byte_end":532993,"line_start":374,"line_end":374,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2826}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":533139,"byte_end":533149,"line_start":385,"line_end":385,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":533489,"byte_end":533499,"line_start":404,"line_end":404,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2836},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":534113,"byte_end":534123,"line_start":437,"line_end":437,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2844},{"krate":0,"index":2846}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":534482,"byte_end":534492,"line_start":453,"line_end":453,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2851}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":534638,"byte_end":534648,"line_start":464,"line_end":464,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":535654,"byte_end":535661,"line_start":513,"line_end":513,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2865},{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":2868}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537749,"byte_end":537756,"line_start":596,"line_end":596,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2872}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549473,"byte_end":549484,"line_start":1119,"line_end":1119,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2879},{"krate":0,"index":2880}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":552655,"byte_end":552669,"line_start":1247,"line_end":1247,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2885},{"krate":0,"index":2886}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":561977,"byte_end":561989,"line_start":1599,"line_end":1599,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2891},{"krate":0,"index":2892}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565249,"byte_end":565264,"line_start":1727,"line_end":1727,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2897},{"krate":0,"index":2898}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582066,"byte_end":582074,"line_start":2455,"line_end":2455,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2952}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582333,"byte_end":582341,"line_start":2470,"line_end":2470,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2956}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582517,"byte_end":582525,"line_start":2484,"line_end":2484,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2963},{"krate":0,"index":2964},{"krate":0,"index":2965}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583889,"byte_end":583897,"line_start":2544,"line_end":2544,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2969}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584640,"byte_end":584648,"line_start":2580,"line_end":2580,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2974}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584793,"byte_end":584801,"line_start":2591,"line_end":2591,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":585404,"byte_end":585413,"line_start":2617,"line_end":2617,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2982}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":585672,"byte_end":585681,"line_start":2632,"line_end":2632,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2986}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":585857,"byte_end":585866,"line_start":2646,"line_end":2646,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":587045,"byte_end":587054,"line_start":2702,"line_end":2702,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2999}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":587800,"byte_end":587809,"line_start":2738,"line_end":2738,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":587955,"byte_end":587964,"line_start":2749,"line_end":2749,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":595108,"byte_end":595116,"line_start":29,"line_end":29,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3071}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":595383,"byte_end":595391,"line_start":42,"line_end":42,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3077}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":595658,"byte_end":595666,"line_start":55,"line_end":55,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3083}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":595924,"byte_end":595932,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3088},{"krate":0,"index":3089}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/specialization.rs","byte_start":599140,"byte_end":599148,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3136},{"krate":0,"index":3137},{"krate":0,"index":3139},{"krate":0,"index":3141},{"krate":0,"index":3142},{"krate":0,"index":3145},{"krate":0,"index":3146}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/specialization.rs","byte_start":607586,"byte_end":607594,"line_start":342,"line_end":342,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3151},{"krate":0,"index":3152},{"krate":0,"index":3154},{"krate":0,"index":3156},{"krate":0,"index":3157},{"krate":0,"index":3158},{"krate":0,"index":3159}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":615060,"byte_end":615068,"line_start":44,"line_end":44,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":615133,"byte_end":615141,"line_start":51,"line_end":51,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3250}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":615643,"byte_end":615651,"line_start":70,"line_end":70,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3256}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":617184,"byte_end":617192,"line_start":147,"line_end":147,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3276}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":617441,"byte_end":617449,"line_start":161,"line_end":161,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3282}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":618017,"byte_end":618025,"line_start":181,"line_end":181,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3288}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":619156,"byte_end":619164,"line_start":234,"line_end":234,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3306}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":619453,"byte_end":619461,"line_start":248,"line_end":248,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3312}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":621291,"byte_end":621299,"line_start":344,"line_end":344,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3350}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":621564,"byte_end":621572,"line_start":358,"line_end":358,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3354}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":627545,"byte_end":627553,"line_start":533,"line_end":533,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3359}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":628858,"byte_end":628866,"line_start":569,"line_end":569,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":630042,"byte_end":630050,"line_start":599,"line_end":599,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":630152,"byte_end":630160,"line_start":607,"line_end":607,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3370},{"krate":0,"index":3371}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378736,"byte_end":378744,"line_start":491,"line_end":491,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3381},{"krate":0,"index":3382},{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385},{"krate":0,"index":3386},{"krate":0,"index":3387},{"krate":0,"index":3389},{"krate":0,"index":3391},{"krate":0,"index":3392},{"krate":0,"index":3396},{"krate":0,"index":3400},{"krate":0,"index":3401},{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":3407},{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3413},{"krate":0,"index":3414},{"krate":0,"index":3415},{"krate":0,"index":3416},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":3419},{"krate":0,"index":3421},{"krate":0,"index":3423},{"krate":0,"index":3426},{"krate":0,"index":3427},{"krate":0,"index":3430},{"krate":0,"index":3431},{"krate":0,"index":3432},{"krate":0,"index":3433},{"krate":0,"index":3435},{"krate":0,"index":3436}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415815,"byte_end":415823,"line_start":1880,"line_end":1880,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3440},{"krate":0,"index":3441},{"krate":0,"index":3442},{"krate":0,"index":3443},{"krate":0,"index":3444}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420981,"byte_end":420989,"line_start":2067,"line_end":2067,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3449},{"krate":0,"index":3450},{"krate":0,"index":3451},{"krate":0,"index":3452},{"krate":0,"index":3453},{"krate":0,"index":3454},{"krate":0,"index":3455},{"krate":0,"index":3456},{"krate":0,"index":3457}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432865,"byte_end":432873,"line_start":2429,"line_end":2429,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3461},{"krate":0,"index":3462},{"krate":0,"index":3463},{"krate":0,"index":3465},{"krate":0,"index":3466},{"krate":0,"index":3467},{"krate":0,"index":3468}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435791,"byte_end":435799,"line_start":2527,"line_end":2527,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3472},{"krate":0,"index":3473},{"krate":0,"index":3474}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439842,"byte_end":439850,"line_start":2663,"line_end":2663,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3478},{"krate":0,"index":3479}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441196,"byte_end":441204,"line_start":2696,"line_end":2696,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3483}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":649146,"byte_end":649147,"line_start":98,"line_end":98,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3561},{"krate":0,"index":3562},{"krate":0,"index":3564}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650659,"byte_end":650660,"line_start":165,"line_end":165,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3587}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653688,"byte_end":653689,"line_start":276,"line_end":276,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3604}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653899,"byte_end":653900,"line_start":289,"line_end":289,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3609}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670050,"byte_end":670056,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3694},{"krate":0,"index":3695},{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3698},{"krate":0,"index":3700}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":676312,"byte_end":676318,"line_start":25,"line_end":25,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3739},{"krate":0,"index":3740},{"krate":0,"index":3741}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677060,"byte_end":677068,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3750},{"krate":0,"index":3751},{"krate":0,"index":3752},{"krate":0,"index":3753},{"krate":0,"index":3754}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":679232,"byte_end":679240,"line_start":147,"line_end":147,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3758}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":679451,"byte_end":679459,"line_start":160,"line_end":160,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3762},{"krate":0,"index":3763},{"krate":0,"index":3764},{"krate":0,"index":3765},{"krate":0,"index":3766},{"krate":0,"index":3767}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":680034,"byte_end":680042,"line_start":193,"line_end":193,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3771},{"krate":0,"index":3772}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":680371,"byte_end":680379,"line_start":209,"line_end":209,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3776}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":680520,"byte_end":680528,"line_start":220,"line_end":220,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":680954,"byte_end":680960,"line_start":28,"line_end":28,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3836},{"krate":0,"index":3837}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":681218,"byte_end":681224,"line_start":44,"line_end":44,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3842}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":681457,"byte_end":681463,"line_start":57,"line_end":57,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3847},{"krate":0,"index":3848}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":681718,"byte_end":681724,"line_start":73,"line_end":73,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3853}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":681956,"byte_end":681962,"line_start":86,"line_end":86,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3858},{"krate":0,"index":3859}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":682220,"byte_end":682226,"line_start":102,"line_end":102,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3864}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":682449,"byte_end":682455,"line_start":115,"line_end":115,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3868},{"krate":0,"index":3869}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":682667,"byte_end":682673,"line_start":129,"line_end":129,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3873}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":682834,"byte_end":682840,"line_start":140,"line_end":140,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3877}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":683103,"byte_end":683109,"line_start":153,"line_end":153,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3883},{"krate":0,"index":3884}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":683401,"byte_end":683407,"line_start":168,"line_end":168,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3889}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":683651,"byte_end":683657,"line_start":181,"line_end":181,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3893},{"krate":0,"index":3894}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":684380,"byte_end":684386,"line_start":43,"line_end":43,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3977}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":684586,"byte_end":684592,"line_start":55,"line_end":55,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3981}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":684788,"byte_end":684794,"line_start":67,"line_end":67,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3985}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":684946,"byte_end":684952,"line_start":78,"line_end":78,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":685048,"byte_end":685054,"line_start":86,"line_end":86,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3992}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":685290,"byte_end":685298,"line_start":98,"line_end":98,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3998}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":686069,"byte_end":686075,"line_start":140,"line_end":140,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4015}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":686327,"byte_end":686335,"line_start":153,"line_end":153,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":4021}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":686610,"byte_end":686616,"line_start":167,"line_end":167,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4026}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":687507,"byte_end":687513,"line_start":208,"line_end":208,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4044}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":687708,"byte_end":687714,"line_start":220,"line_end":220,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4048}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":687929,"byte_end":687935,"line_start":232,"line_end":232,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4053}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688143,"byte_end":688149,"line_start":244,"line_end":244,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4057}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688346,"byte_end":688349,"line_start":256,"line_end":256,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4061}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688541,"byte_end":688547,"line_start":268,"line_end":268,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4065},{"krate":0,"index":4066}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688791,"byte_end":688797,"line_start":282,"line_end":282,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4070}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688964,"byte_end":688970,"line_start":295,"line_end":295,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4074}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":689214,"byte_end":689220,"line_start":309,"line_end":309,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4078}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":689434,"byte_end":689440,"line_start":321,"line_end":321,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4082}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":689655,"byte_end":689661,"line_start":333,"line_end":333,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4086}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":689875,"byte_end":689881,"line_start":345,"line_end":345,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4090}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690094,"byte_end":690100,"line_start":357,"line_end":357,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4094}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690321,"byte_end":690327,"line_start":369,"line_end":369,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4098}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690540,"byte_end":690546,"line_start":381,"line_end":381,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4102}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690727,"byte_end":690733,"line_start":393,"line_end":393,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690806,"byte_end":690812,"line_start":400,"line_end":400,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690879,"byte_end":690885,"line_start":407,"line_end":407,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659415,"byte_end":659421,"line_start":141,"line_end":141,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4123},{"krate":0,"index":4124},{"krate":0,"index":4125},{"krate":0,"index":4128},{"krate":0,"index":4130},{"krate":0,"index":4132},{"krate":0,"index":4133},{"krate":0,"index":4134},{"krate":0,"index":4135},{"krate":0,"index":4136},{"krate":0,"index":4137}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723474,"byte_end":723480,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4292},{"krate":0,"index":4293},{"krate":0,"index":4294},{"krate":0,"index":4295},{"krate":0,"index":4296},{"krate":0,"index":4297},{"krate":0,"index":4298},{"krate":0,"index":4299},{"krate":0,"index":4301},{"krate":0,"index":4302},{"krate":0,"index":4303},{"krate":0,"index":4304},{"krate":0,"index":4305},{"krate":0,"index":4306},{"krate":0,"index":4307},{"krate":0,"index":4308},{"krate":0,"index":4309},{"krate":0,"index":4310},{"krate":0,"index":4311},{"krate":0,"index":4313},{"krate":0,"index":4315},{"krate":0,"index":4316},{"krate":0,"index":4319},{"krate":0,"index":4321},{"krate":0,"index":4322},{"krate":0,"index":4323},{"krate":0,"index":4324},{"krate":0,"index":4325},{"krate":0,"index":4327},{"krate":0,"index":4329},{"krate":0,"index":4331},{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4338}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":756397,"byte_end":756403,"line_start":61,"line_end":61,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4424}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":757276,"byte_end":757282,"line_start":96,"line_end":96,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4431}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":757624,"byte_end":757630,"line_start":110,"line_end":110,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":4440}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":757903,"byte_end":757909,"line_start":125,"line_end":125,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4446}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":758161,"byte_end":758167,"line_start":139,"line_end":139,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4452}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":758424,"byte_end":758430,"line_start":153,"line_end":153,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4457}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":758790,"byte_end":758796,"line_start":168,"line_end":168,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4467}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":759093,"byte_end":759099,"line_start":183,"line_end":183,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4474}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":759593,"byte_end":759599,"line_start":203,"line_end":203,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4479}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":759827,"byte_end":759833,"line_start":215,"line_end":215,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4485}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":760306,"byte_end":760312,"line_start":235,"line_end":235,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4490},{"krate":0,"index":4491},{"krate":0,"index":4492}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":761919,"byte_end":761924,"line_start":304,"line_end":304,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4518},{"krate":0,"index":4520},{"krate":0,"index":4521},{"krate":0,"index":4522},{"krate":0,"index":4524}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":766664,"byte_end":766669,"line_start":464,"line_end":464,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4528}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":766857,"byte_end":766862,"line_start":476,"line_end":476,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4533}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":767066,"byte_end":767071,"line_start":487,"line_end":487,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4537},{"krate":0,"index":4538},{"krate":0,"index":4539},{"krate":0,"index":4540},{"krate":0,"index":4541},{"krate":0,"index":4542}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":767653,"byte_end":767658,"line_start":520,"line_end":520,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4546},{"krate":0,"index":4547}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":767993,"byte_end":767998,"line_start":536,"line_end":536,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4551}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":768144,"byte_end":768149,"line_start":547,"line_end":547,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":768226,"byte_end":768231,"line_start":554,"line_end":554,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":768308,"byte_end":768313,"line_start":561,"line_end":561,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":768383,"byte_end":768388,"line_start":568,"line_end":568,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4564}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":770130,"byte_end":770136,"line_start":637,"line_end":637,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4570}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":770526,"byte_end":770532,"line_start":657,"line_end":657,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4576},{"krate":0,"index":4577},{"krate":0,"index":4579},{"krate":0,"index":4580},{"krate":0,"index":4581}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":771633,"byte_end":771639,"line_start":702,"line_end":702,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4586},{"krate":0,"index":4587}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":771957,"byte_end":771963,"line_start":719,"line_end":719,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4592}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":772142,"byte_end":772148,"line_start":731,"line_end":731,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":772251,"byte_end":772257,"line_start":739,"line_end":739,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4601}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":774197,"byte_end":774203,"line_start":28,"line_end":28,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4658},{"krate":0,"index":4659}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":774469,"byte_end":774475,"line_start":44,"line_end":44,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4664}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":774716,"byte_end":774722,"line_start":57,"line_end":57,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4669},{"krate":0,"index":4670}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":774985,"byte_end":774991,"line_start":73,"line_end":73,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4675}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":775231,"byte_end":775237,"line_start":86,"line_end":86,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4680},{"krate":0,"index":4681}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":775503,"byte_end":775509,"line_start":102,"line_end":102,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4686}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":775740,"byte_end":775746,"line_start":115,"line_end":115,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4690},{"krate":0,"index":4691}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":775958,"byte_end":775964,"line_start":129,"line_end":129,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4695}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":776156,"byte_end":776162,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4699}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":776433,"byte_end":776439,"line_start":154,"line_end":154,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4705},{"krate":0,"index":4706}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":776739,"byte_end":776745,"line_start":169,"line_end":169,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4711}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":777177,"byte_end":777183,"line_start":186,"line_end":186,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4715},{"krate":0,"index":4716}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":777850,"byte_end":777856,"line_start":38,"line_end":38,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4789}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778056,"byte_end":778062,"line_start":50,"line_end":50,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4793}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778227,"byte_end":778233,"line_start":61,"line_end":61,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4797},{"krate":0,"index":4799}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778523,"byte_end":778529,"line_start":77,"line_end":77,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778625,"byte_end":778631,"line_start":85,"line_end":85,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4806}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778867,"byte_end":778875,"line_start":97,"line_end":97,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4812}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":779646,"byte_end":779652,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4829}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":779904,"byte_end":779912,"line_start":152,"line_end":152,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":4835}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":780805,"byte_end":780811,"line_start":194,"line_end":194,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4854}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781085,"byte_end":781091,"line_start":207,"line_end":207,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4858}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781287,"byte_end":781293,"line_start":219,"line_end":219,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4862}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781508,"byte_end":781514,"line_start":231,"line_end":231,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4867}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781736,"byte_end":781742,"line_start":243,"line_end":243,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4872}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781954,"byte_end":781960,"line_start":255,"line_end":255,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4876}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":782155,"byte_end":782158,"line_start":267,"line_end":267,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4880}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":782338,"byte_end":782344,"line_start":279,"line_end":279,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4884},{"krate":0,"index":4885}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":782572,"byte_end":782578,"line_start":293,"line_end":293,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4889}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":782705,"byte_end":782711,"line_start":304,"line_end":304,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4893}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783028,"byte_end":783034,"line_start":321,"line_end":321,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4897}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783248,"byte_end":783254,"line_start":333,"line_end":333,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4901}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783469,"byte_end":783475,"line_start":345,"line_end":345,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4905}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783689,"byte_end":783695,"line_start":357,"line_end":357,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4909}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783909,"byte_end":783915,"line_start":369,"line_end":369,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4913}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":784128,"byte_end":784134,"line_start":381,"line_end":381,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4917}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":784315,"byte_end":784321,"line_start":393,"line_end":393,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":784394,"byte_end":784400,"line_start":400,"line_end":400,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":784467,"byte_end":784473,"line_start":407,"line_end":407,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Inherent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699362,"byte_end":699368,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4936},{"krate":0,"index":4937},{"krate":0,"index":4939},{"krate":0,"index":4940},{"krate":0,"index":4941},{"krate":0,"index":4942},{"krate":0,"index":4945},{"krate":0,"index":4948},{"krate":0,"index":4949},{"krate":0,"index":4950},{"krate":0,"index":4951},{"krate":0,"index":4952},{"krate":0,"index":4954},{"krate":0,"index":4955},{"krate":0,"index":4957},{"krate":0,"index":4958},{"krate":0,"index":4959},{"krate":0,"index":4960},{"krate":0,"index":4961},{"krate":0,"index":4962},{"krate":0,"index":4963},{"krate":0,"index":4964},{"krate":0,"index":4965},{"krate":0,"index":4966},{"krate":0,"index":4967},{"krate":0,"index":4968},{"krate":0,"index":4972}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11533,"byte_end":11539,"line_start":284,"line_end":284,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/macros.rs","byte_start":11973,"byte_end":11981,"line_start":7,"line_end":7,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11550,"byte_end":11556,"line_start":286,"line_end":286,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":28}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11566,"byte_end":11571,"line_start":287,"line_end":287,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":68}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11592,"byte_end":11598,"line_start":289,"line_end":289,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":587}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11608,"byte_end":11613,"line_start":290,"line_end":290,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":679}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11623,"byte_end":11628,"line_start":291,"line_end":291,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":869}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11638,"byte_end":11641,"line_start":292,"line_end":292,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1061}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11651,"byte_end":11656,"line_start":293,"line_end":293,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1091}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11666,"byte_end":11673,"line_start":294,"line_end":294,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1150}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11683,"byte_end":11686,"line_start":295,"line_end":295,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1212}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11696,"byte_end":11701,"line_start":296,"line_end":296,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2239}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11711,"byte_end":11716,"line_start":297,"line_end":297,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3492}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11726,"byte_end":11730,"line_start":298,"line_end":298,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3539}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11767,"byte_end":11772,"line_start":301,"line_end":301,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3611}},{"kind":"Mod","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/lib.rs","byte_start":11809,"byte_end":11812,"line_start":304,"line_end":304,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4141}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":47931,"byte_end":47937,"line_start":55,"line_end":55,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":21,"index":31},"to":{"krate":0,"index":52}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/access.rs","byte_start":52459,"byte_end":52460,"line_start":191,"line_end":191,"column_start":23,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":61},"to":{"krate":0,"index":52}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":65551,"byte_end":65559,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":5020},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":67212,"byte_end":67220,"line_start":124,"line_end":124,"column_start":22,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":5020},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":67435,"byte_end":67443,"line_start":137,"line_end":137,"column_start":25,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":5020},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68083,"byte_end":68091,"line_start":173,"line_end":173,"column_start":36,"column_end":44},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":5020},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68441,"byte_end":68449,"line_start":190,"line_end":190,"column_start":34,"column_end":42},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":5020},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/iter.rs","byte_start":68595,"byte_end":68603,"line_start":201,"line_end":201,"column_start":30,"column_end":38},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":5020},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69016,"byte_end":69024,"line_start":26,"line_end":26,"column_start":33,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3112}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69293,"byte_end":69301,"line_start":42,"line_end":42,"column_start":39,"column_end":47},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69545,"byte_end":69553,"line_start":55,"line_end":55,"column_start":32,"column_end":40},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3117}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":69819,"byte_end":69827,"line_start":71,"line_end":71,"column_start":38,"column_end":46},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70070,"byte_end":70078,"line_start":84,"line_end":84,"column_start":33,"column_end":41},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3122}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70347,"byte_end":70355,"line_start":100,"line_end":100,"column_start":39,"column_end":47},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3147}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70589,"byte_end":70597,"line_start":113,"line_end":113,"column_start":22,"column_end":30},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":70820,"byte_end":70828,"line_start":127,"line_end":127,"column_start":25,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71035,"byte_end":71043,"line_start":139,"line_end":139,"column_start":32,"column_end":40},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71353,"byte_end":71361,"line_start":154,"line_end":154,"column_start":35,"column_end":43},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/ops.rs","byte_start":71585,"byte_end":71593,"line_start":166,"line_end":166,"column_start":20,"column_end":28},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72298,"byte_end":72306,"line_start":41,"line_end":41,"column_start":46,"column_end":54},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2588}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72524,"byte_end":72532,"line_start":53,"line_end":53,"column_start":49,"column_end":57},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2591}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72708,"byte_end":72716,"line_start":64,"line_end":64,"column_start":22,"column_end":30},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":72991,"byte_end":72999,"line_start":81,"line_end":81,"column_start":19,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73068,"byte_end":73076,"line_start":88,"line_end":88,"column_start":20,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73284,"byte_end":73292,"line_start":99,"line_end":99,"column_start":51,"column_end":59},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73501,"byte_end":73509,"line_start":112,"line_end":112,"column_start":36,"column_end":44},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73739,"byte_end":73747,"line_start":125,"line_end":125,"column_start":46,"column_end":54},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":73975,"byte_end":73983,"line_start":137,"line_end":137,"column_start":37,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74280,"byte_end":74288,"line_start":151,"line_end":151,"column_start":45,"column_end":53},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74502,"byte_end":74510,"line_start":163,"line_end":163,"column_start":45,"column_end":53},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2889}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74715,"byte_end":74723,"line_start":175,"line_end":175,"column_start":24,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":74888,"byte_end":74896,"line_start":186,"line_end":186,"column_start":48,"column_end":56},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":75302,"byte_end":75310,"line_start":205,"line_end":205,"column_start":6,"column_end":14},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":77863,"byte_end":77871,"line_start":308,"line_end":308,"column_start":24,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78037,"byte_end":78045,"line_start":320,"line_end":320,"column_start":23,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78222,"byte_end":78230,"line_start":331,"line_end":331,"column_start":22,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78499,"byte_end":78507,"line_start":345,"line_end":345,"column_start":24,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78719,"byte_end":78727,"line_start":357,"line_end":357,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":9306}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":78937,"byte_end":78945,"line_start":369,"line_end":369,"column_start":22,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":9302}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79155,"byte_end":79163,"line_start":381,"line_end":381,"column_start":25,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":9308}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79372,"byte_end":79380,"line_start":393,"line_end":393,"column_start":21,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":79591,"byte_end":79599,"line_start":406,"line_end":406,"column_start":29,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":7379}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80520,"byte_end":80528,"line_start":450,"line_end":450,"column_start":21,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":80606,"byte_end":80614,"line_start":457,"line_end":457,"column_start":22,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":530},"to":{"krate":2,"index":3030}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81065,"byte_end":81085,"line_start":481,"line_end":481,"column_start":16,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":5029},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81290,"byte_end":81310,"line_start":493,"line_end":493,"column_start":22,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":5029},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81569,"byte_end":81589,"line_start":507,"line_end":507,"column_start":24,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":5029},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array/traits.rs","byte_start":81870,"byte_end":81890,"line_start":522,"line_end":522,"column_start":38,"column_end":58},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":5029},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/array.rs","byte_start":62202,"byte_end":62210,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95690,"byte_end":95699,"line_start":367,"line_end":367,"column_start":22,"column_end":31},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":5085},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":95826,"byte_end":95835,"line_start":378,"line_end":378,"column_start":21,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":5085},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104068,"byte_end":104074,"line_start":656,"line_end":656,"column_start":19,"column_end":25},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":5145},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104187,"byte_end":104193,"line_start":665,"line_end":665,"column_start":26,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":5145},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":104840,"byte_end":104846,"line_start":692,"line_end":692,"column_start":37,"column_end":43},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":5145},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105469,"byte_end":105475,"line_start":717,"line_end":717,"column_start":31,"column_end":37},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":5145},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105748,"byte_end":105754,"line_start":731,"line_end":731,"column_start":39,"column_end":45},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":5145},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/domain.rs","byte_start":105802,"byte_end":105808,"line_start":735,"line_end":735,"column_start":18,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":5145},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":131305,"byte_end":131313,"line_start":719,"line_end":719,"column_start":22,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3372},"to":{"krate":0,"index":739}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":141464,"byte_end":141472,"line_start":1048,"line_end":1048,"column_start":22,"column_end":30},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3372},"to":{"krate":0,"index":739}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":150935,"byte_end":150943,"line_start":1366,"line_end":1366,"column_start":25,"column_end":33},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":530},"to":{"krate":0,"index":739}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":151559,"byte_end":151565,"line_start":1399,"line_end":1399,"column_start":25,"column_end":31},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":4116},"to":{"krate":0,"index":739}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field.rs","byte_start":152170,"byte_end":152176,"line_start":1432,"line_end":1432,"column_start":25,"column_end":31},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":4928},"to":{"krate":0,"index":739}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/field/io.rs","byte_start":162911,"byte_end":162917,"line_start":121,"line_end":121,"column_start":22,"column_end":28},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":4928},"to":{"krate":1,"index":4395}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":168125,"byte_end":168131,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":5200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177672,"byte_end":177678,"line_start":423,"line_end":423,"column_start":25,"column_end":31},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":5200},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":177885,"byte_end":177891,"line_start":435,"line_end":435,"column_start":20,"column_end":26},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":5200},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178091,"byte_end":178097,"line_start":445,"line_end":445,"column_start":19,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":5200},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178306,"byte_end":178312,"line_start":455,"line_end":455,"column_start":21,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":5200},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":178814,"byte_end":178825,"line_start":478,"line_end":478,"column_start":9,"column_end":20},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":5233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179674,"byte_end":179685,"line_start":517,"line_end":517,"column_start":19,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":5233},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":179901,"byte_end":179912,"line_start":527,"line_end":527,"column_start":21,"column_end":32},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":5233},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":180194,"byte_end":180205,"line_start":543,"line_end":543,"column_start":31,"column_end":42},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":5233},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":181968,"byte_end":181974,"line_start":597,"line_end":597,"column_start":9,"column_end":15},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":5266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":186373,"byte_end":186379,"line_start":756,"line_end":756,"column_start":20,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":5266},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":186583,"byte_end":186589,"line_start":766,"line_end":766,"column_start":19,"column_end":25},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":5266},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":186798,"byte_end":186804,"line_start":776,"line_end":776,"column_start":21,"column_end":27},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":5266},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":188355,"byte_end":188361,"line_start":827,"line_end":827,"column_start":9,"column_end":15},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":5299},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190575,"byte_end":190581,"line_start":916,"line_end":916,"column_start":20,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":5299},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190781,"byte_end":190787,"line_start":926,"line_end":926,"column_start":19,"column_end":25},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":5299},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":190996,"byte_end":191002,"line_start":936,"line_end":936,"column_start":21,"column_end":27},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":5299},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":192308,"byte_end":192314,"line_start":985,"line_end":985,"column_start":9,"column_end":15},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":5332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194456,"byte_end":194462,"line_start":1065,"line_end":1065,"column_start":20,"column_end":26},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":5332},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194662,"byte_end":194668,"line_start":1075,"line_end":1075,"column_start":19,"column_end":25},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":5332},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":194877,"byte_end":194883,"line_start":1085,"line_end":1085,"column_start":21,"column_end":27},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":5332},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":195798,"byte_end":195805,"line_start":1122,"line_end":1122,"column_start":9,"column_end":16},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":5364},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198050,"byte_end":198057,"line_start":1213,"line_end":1213,"column_start":20,"column_end":27},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":5364},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198258,"byte_end":198265,"line_start":1223,"line_end":1223,"column_start":19,"column_end":26},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":5364},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198475,"byte_end":198482,"line_start":1233,"line_end":1233,"column_start":21,"column_end":28},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":5364},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198671,"byte_end":198678,"line_start":1243,"line_end":1243,"column_start":28,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":5364},"to":{"krate":2,"index":7338}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":198881,"byte_end":198888,"line_start":1254,"line_end":1254,"column_start":23,"column_end":30},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":5364},"to":{"krate":2,"index":3112}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":199088,"byte_end":199095,"line_start":1268,"line_end":1268,"column_start":22,"column_end":29},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":5364},"to":{"krate":2,"index":3117}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/index.rs","byte_start":199289,"byte_end":199296,"line_start":1282,"line_end":1282,"column_start":17,"column_end":24},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":5364},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210136,"byte_end":210146,"line_start":33,"line_end":33,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":20,"index":268},"to":{"krate":0,"index":1071}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210155,"byte_end":210161,"line_start":33,"line_end":33,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":1090},"to":{"krate":0,"index":1071}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210802,"byte_end":210811,"line_start":49,"line_end":49,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1071},"to":{"krate":0,"index":1074}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/mem.rs","byte_start":210814,"byte_end":210820,"line_start":49,"line_end":49,"column_start":36,"column_end":42},"kind":"SuperTrait","from":{"krate":21,"index":50},"to":{"krate":0,"index":1074}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":222878,"byte_end":222882,"line_start":266,"line_end":266,"column_start":26,"column_end":30},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":5420},"to":{"krate":0,"index":1112}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/order.rs","byte_start":224230,"byte_end":224234,"line_start":312,"line_end":312,"column_start":26,"column_end":30},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":5442},"to":{"krate":0,"index":1112}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256371,"byte_end":256384,"line_start":99,"line_end":99,"column_start":9,"column_end":22},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":5464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256515,"byte_end":256528,"line_start":104,"line_end":104,"column_start":19,"column_end":32},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":5464},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":256726,"byte_end":256739,"line_start":114,"line_end":114,"column_start":21,"column_end":34},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":5464},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":257048,"byte_end":257061,"line_start":128,"line_end":128,"column_start":25,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":5464},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":257094,"byte_end":257107,"line_start":131,"line_end":131,"column_start":25,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":5464},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/address.rs","byte_start":257170,"byte_end":257183,"line_start":135,"line_end":135,"column_start":31,"column_end":44},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":5464},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":261179,"byte_end":261185,"line_start":127,"line_end":127,"column_start":15,"column_end":21},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":262700,"byte_end":262706,"line_start":194,"line_end":194,"column_start":12,"column_end":18},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264399,"byte_end":264405,"line_start":259,"line_end":259,"column_start":22,"column_end":28},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264614,"byte_end":264620,"line_start":271,"line_end":271,"column_start":22,"column_end":28},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":264805,"byte_end":264811,"line_start":281,"line_end":281,"column_start":23,"column_end":29},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":265310,"byte_end":265316,"line_start":301,"line_end":301,"column_start":6,"column_end":12},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":265607,"byte_end":265613,"line_start":317,"line_end":317,"column_start":35,"column_end":41},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":265830,"byte_end":265836,"line_start":330,"line_end":330,"column_start":36,"column_end":42},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":266302,"byte_end":266308,"line_start":350,"line_end":350,"column_start":6,"column_end":12},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":266645,"byte_end":266651,"line_start":369,"line_end":369,"column_start":36,"column_end":42},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":266904,"byte_end":266910,"line_start":382,"line_end":382,"column_start":37,"column_end":43},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":267122,"byte_end":267128,"line_start":394,"line_end":394,"column_start":25,"column_end":31},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":267425,"byte_end":267431,"line_start":408,"line_end":408,"column_start":27,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":267664,"byte_end":267670,"line_start":421,"line_end":421,"column_start":27,"column_end":33},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":9310}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":267902,"byte_end":267908,"line_start":434,"line_end":434,"column_start":24,"column_end":30},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":268303,"byte_end":268309,"line_start":453,"line_end":453,"column_start":25,"column_end":31},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":268526,"byte_end":268532,"line_start":468,"line_end":468,"column_start":25,"column_end":31},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":268697,"byte_end":268703,"line_start":479,"line_end":479,"column_start":24,"column_end":30},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/proxy.rs","byte_start":269033,"byte_end":269039,"line_start":497,"line_end":497,"column_start":23,"column_end":29},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1386},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":272603,"byte_end":272614,"line_start":81,"line_end":81,"column_start":15,"column_end":26},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":276438,"byte_end":276449,"line_start":218,"line_end":218,"column_start":25,"column_end":36},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":276603,"byte_end":276614,"line_start":230,"line_end":230,"column_start":22,"column_end":33},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":276773,"byte_end":276784,"line_start":240,"line_end":240,"column_start":6,"column_end":17},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":277141,"byte_end":277152,"line_start":258,"line_end":258,"column_start":27,"column_end":38},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":277355,"byte_end":277366,"line_start":271,"line_end":271,"column_start":48,"column_end":59},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":277616,"byte_end":277621,"line_start":284,"line_end":284,"column_start":46,"column_end":51},"kind":{"Impl":{"id":125}},"from":{"krate":2,"index":41731},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":277836,"byte_end":277847,"line_start":297,"line_end":297,"column_start":25,"column_end":36},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":278196,"byte_end":278207,"line_start":313,"line_end":313,"column_start":24,"column_end":35},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":278416,"byte_end":278427,"line_start":327,"line_end":327,"column_start":28,"column_end":39},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":279262,"byte_end":279273,"line_start":373,"line_end":373,"column_start":39,"column_end":50},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":279740,"byte_end":279751,"line_start":399,"line_end":399,"column_start":37,"column_end":48},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":279987,"byte_end":279998,"line_start":411,"line_end":411,"column_start":33,"column_end":44},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/range.rs","byte_start":280141,"byte_end":280152,"line_start":420,"line_end":420,"column_start":48,"column_end":59},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1568},"to":{"krate":2,"index":3356}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":283587,"byte_end":283593,"line_start":121,"line_end":121,"column_start":15,"column_end":21},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":306934,"byte_end":306940,"line_start":888,"line_end":888,"column_start":12,"column_end":18},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":308887,"byte_end":308893,"line_start":960,"line_end":960,"column_start":12,"column_end":18},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":316929,"byte_end":316935,"line_start":1237,"line_end":1237,"column_start":15,"column_end":21},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317763,"byte_end":317769,"line_start":1263,"line_end":1263,"column_start":25,"column_end":31},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":317954,"byte_end":317960,"line_start":1278,"line_end":1278,"column_start":22,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":318078,"byte_end":318084,"line_start":1287,"line_end":1287,"column_start":23,"column_end":29},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":318406,"byte_end":318412,"line_start":1302,"line_end":1302,"column_start":58,"column_end":64},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":318872,"byte_end":318878,"line_start":1322,"line_end":1322,"column_start":59,"column_end":65},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":319416,"byte_end":319422,"line_start":1347,"line_end":1347,"column_start":25,"column_end":31},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":319616,"byte_end":319622,"line_start":1359,"line_end":1359,"column_start":29,"column_end":35},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":319823,"byte_end":319829,"line_start":1371,"line_end":1371,"column_start":34,"column_end":40},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":320082,"byte_end":320088,"line_start":1385,"line_end":1385,"column_start":32,"column_end":38},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":320299,"byte_end":320305,"line_start":1398,"line_end":1398,"column_start":25,"column_end":31},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":320600,"byte_end":320606,"line_start":1417,"line_end":1417,"column_start":27,"column_end":33},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":9310}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":320904,"byte_end":320910,"line_start":1433,"line_end":1433,"column_start":24,"column_end":30},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321121,"byte_end":321127,"line_start":1447,"line_end":1447,"column_start":24,"column_end":30},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1779},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321651,"byte_end":321662,"line_start":1469,"line_end":1469,"column_start":32,"column_end":43},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":5493},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":321833,"byte_end":321844,"line_start":1479,"line_end":1479,"column_start":36,"column_end":47},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":5493},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":322028,"byte_end":322039,"line_start":1489,"line_end":1489,"column_start":39,"column_end":50},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5493},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":322215,"byte_end":322226,"line_start":1499,"line_end":1499,"column_start":30,"column_end":41},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5493},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":322419,"byte_end":322430,"line_start":1509,"line_end":1509,"column_start":21,"column_end":32},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":5493},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/single.rs","byte_start":322745,"byte_end":322756,"line_start":1523,"line_end":1523,"column_start":31,"column_end":42},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":5493},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":330555,"byte_end":330562,"line_start":202,"line_end":202,"column_start":15,"column_end":22},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":351482,"byte_end":351489,"line_start":900,"line_end":900,"column_start":12,"column_end":19},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":352545,"byte_end":352552,"line_start":940,"line_end":940,"column_start":12,"column_end":19},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":353884,"byte_end":353891,"line_start":985,"line_end":985,"column_start":25,"column_end":32},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2034},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":354034,"byte_end":354041,"line_start":997,"line_end":997,"column_start":22,"column_end":29},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":2034},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":354164,"byte_end":354171,"line_start":1005,"line_end":1005,"column_start":59,"column_end":66},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":2034},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":354818,"byte_end":354825,"line_start":1027,"line_end":1027,"column_start":27,"column_end":34},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":2034},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355005,"byte_end":355012,"line_start":1040,"line_end":1040,"column_start":25,"column_end":32},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":2034},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355235,"byte_end":355242,"line_start":1053,"line_end":1053,"column_start":27,"column_end":34},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":2034},"to":{"krate":2,"index":9310}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355437,"byte_end":355444,"line_start":1065,"line_end":1065,"column_start":24,"column_end":31},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":2034},"to":{"krate":2,"index":2999}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":355940,"byte_end":355952,"line_start":1087,"line_end":1087,"column_start":34,"column_end":46},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5533},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":356128,"byte_end":356140,"line_start":1097,"line_end":1097,"column_start":30,"column_end":42},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":5533},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":356331,"byte_end":356343,"line_start":1107,"line_end":1107,"column_start":19,"column_end":31},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":5533},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":356859,"byte_end":356871,"line_start":1129,"line_end":1129,"column_start":21,"column_end":33},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":5533},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":357364,"byte_end":357376,"line_start":1150,"line_end":1150,"column_start":25,"column_end":37},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":5533},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":357427,"byte_end":357439,"line_start":1154,"line_end":1154,"column_start":25,"column_end":37},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":5533},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/ptr/span.rs","byte_start":357520,"byte_end":357532,"line_start":1159,"line_end":1159,"column_start":31,"column_end":43},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":5533},"to":{"krate":1,"index":2336}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":444664,"byte_end":444672,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":507757,"byte_end":507765,"line_start":2125,"line_end":2125,"column_start":12,"column_end":20},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/api.rs","byte_start":524177,"byte_end":524186,"line_start":2697,"line_end":2697,"column_start":44,"column_end":53},"kind":{"Impl":{"id":181}},"from":{"krate":2,"index":41715},"to":{"krate":0,"index":2661}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":526653,"byte_end":526657,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":2775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":530988,"byte_end":530992,"line_start":265,"line_end":265,"column_start":22,"column_end":26},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2775},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531213,"byte_end":531217,"line_start":280,"line_end":280,"column_start":38,"column_end":42},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2775},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531401,"byte_end":531405,"line_start":292,"line_end":292,"column_start":22,"column_end":26},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2775},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":531885,"byte_end":531895,"line_start":315,"line_end":315,"column_start":29,"column_end":39},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":5656},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532584,"byte_end":532594,"line_start":354,"line_end":354,"column_start":36,"column_end":46},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":5656},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":532983,"byte_end":532993,"line_start":374,"line_end":374,"column_start":34,"column_end":44},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":5656},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":533139,"byte_end":533149,"line_start":385,"line_end":385,"column_start":30,"column_end":40},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":5656},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":533489,"byte_end":533499,"line_start":404,"line_end":404,"column_start":25,"column_end":35},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":5671},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":534113,"byte_end":534123,"line_start":437,"line_end":437,"column_start":36,"column_end":46},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":5671},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":534482,"byte_end":534492,"line_start":453,"line_end":453,"column_start":34,"column_end":44},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":5671},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":534638,"byte_end":534648,"line_start":464,"line_end":464,"column_start":30,"column_end":40},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":5671},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":535654,"byte_end":535661,"line_start":513,"line_end":513,"column_start":16,"column_end":23},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":537749,"byte_end":537756,"line_start":596,"line_end":596,"column_start":22,"column_end":29},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2855},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":549473,"byte_end":549484,"line_start":1119,"line_end":1119,"column_start":16,"column_end":27},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":5864},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":552655,"byte_end":552669,"line_start":1247,"line_end":1247,"column_start":16,"column_end":30},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":5904},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":561977,"byte_end":561989,"line_start":1599,"line_end":1599,"column_start":16,"column_end":28},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":6012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":565249,"byte_end":565264,"line_start":1727,"line_end":1727,"column_start":16,"column_end":31},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":6052},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":576308,"byte_end":576327,"line_start":2222,"line_end":2222,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":7423},"to":{"krate":0,"index":2917}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582066,"byte_end":582074,"line_start":2455,"line_end":2455,"column_start":16,"column_end":24},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":6384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582333,"byte_end":582341,"line_start":2470,"line_end":2470,"column_start":24,"column_end":32},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":6384},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":582517,"byte_end":582525,"line_start":2484,"line_end":2484,"column_start":25,"column_end":33},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":6384},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":583889,"byte_end":583897,"line_start":2544,"line_end":2544,"column_start":36,"column_end":44},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":6384},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584640,"byte_end":584648,"line_start":2580,"line_end":2580,"column_start":34,"column_end":42},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":6384},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":584793,"byte_end":584801,"line_start":2591,"line_end":2591,"column_start":30,"column_end":38},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":6384},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":585404,"byte_end":585413,"line_start":2617,"line_end":2617,"column_start":16,"column_end":25},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":6433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":585672,"byte_end":585681,"line_start":2632,"line_end":2632,"column_start":24,"column_end":33},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":6433},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":585857,"byte_end":585866,"line_start":2646,"line_end":2646,"column_start":25,"column_end":34},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":6433},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":587045,"byte_end":587054,"line_start":2702,"line_end":2702,"column_start":36,"column_end":45},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":6433},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":587800,"byte_end":587809,"line_start":2738,"line_end":2738,"column_start":34,"column_end":43},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":6433},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/iter.rs","byte_start":587955,"byte_end":587964,"line_start":2749,"line_end":2749,"column_start":30,"column_end":39},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":6433},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":595108,"byte_end":595116,"line_start":29,"line_end":29,"column_start":39,"column_end":47},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":595383,"byte_end":595391,"line_start":42,"line_end":42,"column_start":38,"column_end":46},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":595658,"byte_end":595666,"line_start":55,"line_end":55,"column_start":39,"column_end":47},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":3147}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/ops.rs","byte_start":595924,"byte_end":595932,"line_start":68,"line_end":68,"column_start":29,"column_end":37},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/specialization.rs","byte_start":599140,"byte_end":599148,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/specialization.rs","byte_start":607586,"byte_end":607594,"line_start":342,"line_end":342,"column_start":9,"column_end":17},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":615060,"byte_end":615068,"line_start":44,"line_end":44,"column_start":19,"column_end":27},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":615133,"byte_end":615141,"line_start":51,"line_end":51,"column_start":20,"column_end":28},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":615643,"byte_end":615651,"line_start":70,"line_end":70,"column_start":54,"column_end":62},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":617184,"byte_end":617192,"line_start":147,"line_end":147,"column_start":55,"column_end":63},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":617441,"byte_end":617449,"line_start":161,"line_end":161,"column_start":59,"column_end":67},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":618017,"byte_end":618025,"line_start":181,"line_end":181,"column_start":55,"column_end":63},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":619156,"byte_end":619164,"line_start":234,"line_end":234,"column_start":56,"column_end":64},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":619453,"byte_end":619461,"line_start":248,"line_end":248,"column_start":60,"column_end":68},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":621291,"byte_end":621299,"line_start":344,"line_end":344,"column_start":22,"column_end":30},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":621564,"byte_end":621572,"line_start":358,"line_end":358,"column_start":24,"column_end":32},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":627545,"byte_end":627553,"line_start":533,"line_end":533,"column_start":21,"column_end":29},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":628858,"byte_end":628866,"line_start":569,"line_end":569,"column_start":28,"column_end":36},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":630042,"byte_end":630050,"line_start":599,"line_end":599,"column_start":28,"column_end":36},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice/traits.rs","byte_start":630152,"byte_end":630160,"line_start":607,"line_end":607,"column_start":24,"column_end":32},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":3372},"to":{"krate":5,"index":537}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":378736,"byte_end":378744,"line_start":491,"line_end":491,"column_start":12,"column_end":20},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":415815,"byte_end":415823,"line_start":1880,"line_end":1880,"column_start":12,"column_end":20},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":420981,"byte_end":420989,"line_start":2067,"line_end":2067,"column_start":12,"column_end":20},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":432865,"byte_end":432873,"line_start":2429,"line_end":2429,"column_start":12,"column_end":20},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":435791,"byte_end":435799,"line_start":2527,"line_end":2527,"column_start":12,"column_end":20},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":439842,"byte_end":439850,"line_start":2663,"line_end":2663,"column_start":12,"column_end":20},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/slice.rs","byte_start":441196,"byte_end":441204,"line_start":2696,"line_end":2696,"column_start":12,"column_end":20},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":3372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637291,"byte_end":637297,"line_start":149,"line_end":149,"column_start":37,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":3538},"to":{"krate":0,"index":3522}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/store.rs","byte_start":637300,"byte_end":637305,"line_start":149,"line_end":149,"column_start":46,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":9293},"to":{"krate":0,"index":3522}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":649146,"byte_end":649147,"line_start":98,"line_end":98,"column_start":21,"column_end":22},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":3560},"to":{"krate":0,"index":3553}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650339,"byte_end":650346,"line_start":156,"line_end":156,"column_start":25,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":3553},"to":{"krate":0,"index":3582}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650349,"byte_end":650354,"line_start":156,"line_end":156,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":2994},"to":{"krate":0,"index":3582}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":650659,"byte_end":650660,"line_start":165,"line_end":165,"column_start":26,"column_end":27},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":3586},"to":{"krate":0,"index":3582}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653688,"byte_end":653689,"line_start":276,"line_end":276,"column_start":26,"column_end":27},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":3602},"to":{"krate":0,"index":3593}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/view.rs","byte_start":653899,"byte_end":653900,"line_start":289,"line_end":289,"column_start":29,"column_end":30},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":3607},"to":{"krate":0,"index":3597}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/api.rs","byte_start":670050,"byte_end":670056,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":4116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":676312,"byte_end":676318,"line_start":25,"line_end":25,"column_start":29,"column_end":35},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":7379}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":677060,"byte_end":677068,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":3742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":679232,"byte_end":679240,"line_start":147,"line_end":147,"column_start":22,"column_end":30},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":3742},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":679451,"byte_end":679459,"line_start":160,"line_end":160,"column_start":25,"column_end":33},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":3742},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":680034,"byte_end":680042,"line_start":193,"line_end":193,"column_start":36,"column_end":44},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":3742},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":680371,"byte_end":680379,"line_start":209,"line_end":209,"column_start":34,"column_end":42},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":3742},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/iter.rs","byte_start":680520,"byte_end":680528,"line_start":220,"line_end":220,"column_start":30,"column_end":38},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":3742},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":680954,"byte_end":680960,"line_start":28,"line_end":28,"column_start":33,"column_end":39},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3112}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":681218,"byte_end":681224,"line_start":44,"line_end":44,"column_start":39,"column_end":45},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":681457,"byte_end":681463,"line_start":57,"line_end":57,"column_start":32,"column_end":38},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3117}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":681718,"byte_end":681724,"line_start":73,"line_end":73,"column_start":38,"column_end":44},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":681956,"byte_end":681962,"line_start":86,"line_end":86,"column_start":33,"column_end":39},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3122}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":682220,"byte_end":682226,"line_start":102,"line_end":102,"column_start":39,"column_end":45},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3147}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":682449,"byte_end":682455,"line_start":115,"line_end":115,"column_start":22,"column_end":28},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":682667,"byte_end":682673,"line_start":129,"line_end":129,"column_start":25,"column_end":31},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":682834,"byte_end":682840,"line_start":140,"line_end":140,"column_start":21,"column_end":27},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":683103,"byte_end":683109,"line_start":153,"line_end":153,"column_start":32,"column_end":38},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":683401,"byte_end":683407,"line_start":168,"line_end":168,"column_start":35,"column_end":41},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/ops.rs","byte_start":683651,"byte_end":683657,"line_start":181,"line_end":181,"column_start":20,"column_end":26},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":684380,"byte_end":684386,"line_start":43,"line_end":43,"column_start":39,"column_end":45},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2588}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":684586,"byte_end":684592,"line_start":55,"line_end":55,"column_start":42,"column_end":48},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2591}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":684788,"byte_end":684794,"line_start":67,"line_end":67,"column_start":22,"column_end":28},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":684946,"byte_end":684952,"line_start":78,"line_end":78,"column_start":19,"column_end":25},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":685048,"byte_end":685054,"line_start":86,"line_end":86,"column_start":20,"column_end":26},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":685290,"byte_end":685298,"line_start":98,"line_end":98,"column_start":52,"column_end":60},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":686069,"byte_end":686075,"line_start":140,"line_end":140,"column_start":36,"column_end":42},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":686327,"byte_end":686335,"line_start":153,"line_end":153,"column_start":53,"column_end":61},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":686610,"byte_end":686616,"line_start":167,"line_end":167,"column_start":37,"column_end":43},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":687507,"byte_end":687513,"line_start":208,"line_end":208,"column_start":38,"column_end":44},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":687708,"byte_end":687714,"line_start":220,"line_end":220,"column_start":38,"column_end":44},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2889}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":687929,"byte_end":687935,"line_start":232,"line_end":232,"column_start":45,"column_end":51},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688143,"byte_end":688149,"line_start":244,"line_end":244,"column_start":35,"column_end":41},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688346,"byte_end":688349,"line_start":256,"line_end":256,"column_start":35,"column_end":38},"kind":{"Impl":{"id":296}},"from":{"krate":5,"index":196},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688541,"byte_end":688547,"line_start":268,"line_end":268,"column_start":34,"column_end":40},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688791,"byte_end":688797,"line_start":282,"line_end":282,"column_start":24,"column_end":30},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":688964,"byte_end":688970,"line_start":295,"line_end":295,"column_start":22,"column_end":28},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":689214,"byte_end":689220,"line_start":309,"line_end":309,"column_start":24,"column_end":30},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":689434,"byte_end":689440,"line_start":321,"line_end":321,"column_start":23,"column_end":29},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":689655,"byte_end":689661,"line_start":333,"line_end":333,"column_start":25,"column_end":31},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":9306}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":689875,"byte_end":689881,"line_start":345,"line_end":345,"column_start":22,"column_end":28},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":9302}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690094,"byte_end":690100,"line_start":357,"line_end":357,"column_start":24,"column_end":30},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":9310}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690321,"byte_end":690327,"line_start":369,"line_end":369,"column_start":25,"column_end":31},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":9308}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690540,"byte_end":690546,"line_start":381,"line_end":381,"column_start":21,"column_end":27},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690727,"byte_end":690733,"line_start":393,"line_end":393,"column_start":28,"column_end":34},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690806,"byte_end":690812,"line_start":400,"line_end":400,"column_start":28,"column_end":34},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed/traits.rs","byte_start":690879,"byte_end":690885,"line_start":407,"line_end":407,"column_start":22,"column_end":28},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":4116},"to":{"krate":2,"index":3030}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/boxed.rs","byte_start":659415,"byte_end":659421,"line_start":141,"line_end":141,"column_start":12,"column_end":18},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":4116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/api.rs","byte_start":723474,"byte_end":723480,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":4928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":756397,"byte_end":756403,"line_start":61,"line_end":61,"column_start":29,"column_end":35},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":757276,"byte_end":757282,"line_start":96,"line_end":96,"column_start":37,"column_end":43},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":757624,"byte_end":757630,"line_start":110,"line_end":110,"column_start":63,"column_end":69},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":757903,"byte_end":757909,"line_start":125,"line_end":125,"column_start":26,"column_end":32},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":758161,"byte_end":758167,"line_start":139,"line_end":139,"column_start":34,"column_end":40},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7388}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":758424,"byte_end":758430,"line_start":153,"line_end":153,"column_start":35,"column_end":41},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7375}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":758790,"byte_end":758796,"line_start":168,"line_end":168,"column_start":6,"column_end":12},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7375}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":759093,"byte_end":759099,"line_start":183,"line_end":183,"column_start":43,"column_end":49},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7375}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":759593,"byte_end":759599,"line_start":203,"line_end":203,"column_start":32,"column_end":38},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7375}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":759827,"byte_end":759833,"line_start":215,"line_end":215,"column_start":40,"column_end":46},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7375}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":760306,"byte_end":760312,"line_start":235,"line_end":235,"column_start":29,"column_end":35},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":7379}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":761919,"byte_end":761924,"line_start":304,"line_end":304,"column_start":16,"column_end":21},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":4507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":766664,"byte_end":766669,"line_start":464,"line_end":464,"column_start":38,"column_end":43},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":4507},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":766857,"byte_end":766862,"line_start":476,"line_end":476,"column_start":26,"column_end":31},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":4507},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":767066,"byte_end":767071,"line_start":487,"line_end":487,"column_start":25,"column_end":30},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":4507},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":767653,"byte_end":767658,"line_start":520,"line_end":520,"column_start":36,"column_end":41},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":4507},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":767993,"byte_end":767998,"line_start":536,"line_end":536,"column_start":34,"column_end":39},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":4507},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":768144,"byte_end":768149,"line_start":547,"line_end":547,"column_start":30,"column_end":35},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":4507},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":768226,"byte_end":768231,"line_start":554,"line_end":554,"column_start":28,"column_end":33},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":4507},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":768308,"byte_end":768313,"line_start":561,"line_end":561,"column_start":28,"column_end":33},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":4507},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":768383,"byte_end":768388,"line_start":568,"line_end":568,"column_start":21,"column_end":26},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":4507},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":770130,"byte_end":770136,"line_start":637,"line_end":637,"column_start":19,"column_end":25},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":7396},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":770526,"byte_end":770532,"line_start":657,"line_end":657,"column_start":28,"column_end":34},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":7396},"to":{"krate":2,"index":7559}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":771633,"byte_end":771639,"line_start":702,"line_end":702,"column_start":39,"column_end":45},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":7396},"to":{"krate":2,"index":7423}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":771957,"byte_end":771963,"line_start":719,"line_end":719,"column_start":37,"column_end":43},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":7396},"to":{"krate":2,"index":7448}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":772142,"byte_end":772148,"line_start":731,"line_end":731,"column_start":33,"column_end":39},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":7396},"to":{"krate":2,"index":7827}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/iter.rs","byte_start":772251,"byte_end":772257,"line_start":739,"line_end":739,"column_start":24,"column_end":30},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":7396},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":774197,"byte_end":774203,"line_start":28,"line_end":28,"column_start":33,"column_end":39},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3112}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":774469,"byte_end":774475,"line_start":44,"line_end":44,"column_start":39,"column_end":45},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":774716,"byte_end":774722,"line_start":57,"line_end":57,"column_start":32,"column_end":38},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3117}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":774985,"byte_end":774991,"line_start":73,"line_end":73,"column_start":38,"column_end":44},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3143}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":775231,"byte_end":775237,"line_start":86,"line_end":86,"column_start":33,"column_end":39},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3122}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":775503,"byte_end":775509,"line_start":102,"line_end":102,"column_start":39,"column_end":45},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3147}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":775740,"byte_end":775746,"line_start":115,"line_end":115,"column_start":22,"column_end":28},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3200}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":775958,"byte_end":775964,"line_start":129,"line_end":129,"column_start":25,"column_end":31},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3213}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":776156,"byte_end":776162,"line_start":141,"line_end":141,"column_start":21,"column_end":27},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3224}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":776433,"byte_end":776439,"line_start":154,"line_end":154,"column_start":32,"column_end":38},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3285}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":776739,"byte_end":776745,"line_start":169,"line_end":169,"column_start":35,"column_end":41},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3289}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/ops.rs","byte_start":777177,"byte_end":777183,"line_start":186,"line_end":186,"column_start":20,"column_end":26},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3108}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":777850,"byte_end":777856,"line_start":38,"line_end":38,"column_start":39,"column_end":45},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2588}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778056,"byte_end":778062,"line_start":50,"line_end":50,"column_start":42,"column_end":48},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2591}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778227,"byte_end":778233,"line_start":61,"line_end":61,"column_start":22,"column_end":28},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2610}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778523,"byte_end":778529,"line_start":77,"line_end":77,"column_start":19,"column_end":25},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778625,"byte_end":778631,"line_start":85,"line_end":85,"column_start":20,"column_end":26},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2676}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":778867,"byte_end":778875,"line_start":97,"line_end":97,"column_start":52,"column_end":60},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":779646,"byte_end":779652,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":779904,"byte_end":779912,"line_start":152,"line_end":152,"column_start":53,"column_end":61},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":3372},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":780805,"byte_end":780811,"line_start":194,"line_end":194,"column_start":37,"column_end":43},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2687}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781085,"byte_end":781091,"line_start":207,"line_end":207,"column_start":38,"column_end":44},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2886}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781287,"byte_end":781293,"line_start":219,"line_end":219,"column_start":38,"column_end":44},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2889}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781508,"byte_end":781514,"line_start":231,"line_end":231,"column_start":45,"column_end":51},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781736,"byte_end":781742,"line_start":243,"line_end":243,"column_start":49,"column_end":55},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":781954,"byte_end":781960,"line_start":255,"line_end":255,"column_start":35,"column_end":41},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":782155,"byte_end":782158,"line_start":267,"line_end":267,"column_start":35,"column_end":38},"kind":{"Impl":{"id":365}},"from":{"krate":5,"index":7014},"to":{"krate":2,"index":2895}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":782338,"byte_end":782344,"line_start":279,"line_end":279,"column_start":32,"column_end":38},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2902}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":782572,"byte_end":782578,"line_start":293,"line_end":293,"column_start":24,"column_end":30},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2967}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":782705,"byte_end":782711,"line_start":304,"line_end":304,"column_start":22,"column_end":28},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":9293}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783028,"byte_end":783034,"line_start":321,"line_end":321,"column_start":24,"column_end":30},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":9300}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783248,"byte_end":783254,"line_start":333,"line_end":333,"column_start":23,"column_end":29},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":9304}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783469,"byte_end":783475,"line_start":345,"line_end":345,"column_start":25,"column_end":31},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":9306}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783689,"byte_end":783695,"line_start":357,"line_end":357,"column_start":22,"column_end":28},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":9302}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":783909,"byte_end":783915,"line_start":369,"line_end":369,"column_start":25,"column_end":31},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":9308}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":784128,"byte_end":784134,"line_start":381,"line_end":381,"column_start":21,"column_end":27},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":9499}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":784315,"byte_end":784321,"line_start":393,"line_end":393,"column_start":28,"column_end":34},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":2989}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":784394,"byte_end":784400,"line_start":400,"line_end":400,"column_start":28,"column_end":34},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3001}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec/traits.rs","byte_start":784467,"byte_end":784473,"line_start":407,"line_end":407,"column_start":22,"column_end":28},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":4928},"to":{"krate":2,"index":3030}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.22.3/src/vec.rs","byte_start":699362,"byte_end":699368,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":4928},"to":{"krate":4294967295,"index":4294967295}}]}