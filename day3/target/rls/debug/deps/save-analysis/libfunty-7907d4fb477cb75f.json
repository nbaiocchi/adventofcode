{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0","program":"/home/nbaiocchi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","funty","--edition=2018","/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=7907d4fb477cb75f","-C","extra-filename=-7907d4fb477cb75f","--out-dir","/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps","-L","dependency=/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/nbaiocchi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/nbaiocchi/delivery/My_Rust/adventofcode/day3/target/rls/debug/deps/libfunty-7907d4fb477cb75f.rmeta"},"prelude":{"crate_id":{"name":"funty","disambiguator":[2981198078769221750,0]},"crate_root":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src","external_crates":[{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[2034785968469428135,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12655493918929861395,0]}},{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13424910470399079611,0]}}],"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":0,"byte_end":52314,"line_start":1,"line_end":1565,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":0,"byte_end":52314,"line_start":1,"line_end":1565,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":145},{"krate":0,"index":260},{"krate":0,"index":268},{"krate":0,"index":272},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":340},{"krate":0,"index":344},{"krate":0,"index":348},{"krate":0,"index":352},{"krate":0,"index":356},{"krate":0,"index":360},{"krate":0,"index":364},{"krate":0,"index":368},{"krate":0,"index":372},{"krate":0,"index":376},{"krate":0,"index":380},{"krate":0,"index":384},{"krate":0,"index":388},{"krate":0,"index":476},{"krate":0,"index":480},{"krate":0,"index":484},{"krate":0,"index":488},{"krate":0,"index":492},{"krate":0,"index":496},{"krate":0,"index":500},{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":512},{"krate":0,"index":516},{"krate":0,"index":520},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1280},{"krate":0,"index":1312},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1390},{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1394},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1412},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469}],"decl_id":null,"docs":" `fun`damental `ty`pes","sig":null,"attributes":[{"value":"* `fun`damental `ty`pes\n\nThis crate provides trait unification of the Rust fundamental numbers, allowing\nusers to declare the behavior they want from a number without committing to a\nsingle particular numeric type.\n\nThe number types can be categorized along two axes: behavior and width. Traits\nfor each axis and group on that axis are provided:\n\n## Numeric Categories\n\nThe most general category is represented by the trait [`IsNumber`]. It is\nimplemented by all the numeric fundamentals, and includes only the traits that\nthey all implement. This is an already-large amount: basic memory management,\ncomparison, rendering, and numeric arithmetic.\n\nThe numbers are then split into [`IsInteger`] and [`IsFloat`]. The former fills\nout the API of `f32` and `f64`, while the latter covers all of the `iN` and `uN`\nnumbers.\n\nLastly, [`IsInteger`] splits further, into [`IsSigned`] and [`IsUnsigned`].\nThese provide the last specializations unique to the differences between `iN`\nand `uN`.\n\n## Width Categories\n\nEvery number implements the trait `IsN` for the `N` of its bit width. `isize`\nand `usize` implement the trait that matches their width on the target platform.\n\nIn addition, the trait groups `AtLeastN` and `AtMostN` enable clamping the range\nof acceptable widths to lower or upper bounds. These traits are equivalent to\n`mem::size_of::<T>() >= N` and `mem::size_of::<T>() <= N`, respectively.\n\n[`IsFloat`]: trait.IsFloat.html\n[`IsInteger`]: trait.IsInteger.html\n[`IsNumber`]: trait.IsNumber.html\n[`IsSigned`]: trait.IsSigned.html\n[`IsUnsigned`]: trait.IsUnsigned.html\n!*/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":0,"byte_end":1578,"line_start":1,"line_end":39,"column_start":1,"column_end":4}},{"value":"no_std","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":1614,"byte_end":1620,"line_start":41,"line_end":41,"column_start":35,"column_end":41}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":1623,"byte_end":1656,"line_start":42,"line_end":42,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":124},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2308,"byte_end":2316,"line_start":99,"line_end":99,"column_start":11,"column_end":19},"name":"IsNumber","qualname":"::IsNumber","value":"IsNumber: Sized + Send + Sync + Unpin + Clone + Copy + Default + FromStr +\nPartialEq<Self> + PartialOrd<Self> + Debug + Display + Product<Self> +\nfor<'a> Product<&'a Self> + Sum<Self> + for<'a> Sum<&'a Self> + Add<Self,\nOutput = Self> + for<'a> Add<&'a Self, Output = Self> + AddAssign<Self> +\nfor<'a> AddAssign<&'a Self> + Sub<Self, Output = Self> + for<'a> Sub<&'a Self,\nOutput = Self> + SubAssign<Self> + for<'a> SubAssign<&'a Self> + Mul<Self,\nOutput = Self> + for<'a> Mul<&'a Self, Output = Self> + MulAssign<Self> +\nfor<'a> MulAssign<&'a Self> + Div<Self, Output = Self> + for<'a> Div<&'a Self,\nOutput = Self> + DivAssign<Self> + for<'a> DivAssign<&'a Self> + Rem<Self,\nOutput = Self> + for<'a> Rem<&'a Self, Output = Self> + RemAssign<Self> +\nfor<'a> RemAssign<&'a Self>","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"decl_id":null,"docs":" Declare that a type is an abstract number.","sig":null,"attributes":[{"value":"/ Declare that a type is an abstract number.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2155,"byte_end":2201,"line_start":95,"line_end":95,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2202,"byte_end":2205,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This unifies all of the signed-integer, unsigned-integer, and floating-point","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2206,"byte_end":2286,"line_start":97,"line_end":97,"column_start":1,"column_end":81}},{"value":"/ types.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2287,"byte_end":2297,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":137},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3234,"byte_end":3239,"line_start":141,"line_end":141,"column_start":7,"column_end":12},"name":"Bytes","qualname":"::IsNumber::Bytes","value":"type Bytes;","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" The `[u8; N]` byte array that stores values of `Self`.\n","sig":null,"attributes":[{"value":"/ The `[u8; N]` byte array that stores values of `Self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3169,"byte_end":3227,"line_start":140,"line_end":140,"column_start":2,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":138},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3293,"byte_end":3297,"line_start":144,"line_end":144,"column_start":8,"column_end":12},"name":"BITS","qualname":"::IsNumber::BITS","value":"u32","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" The size of this numeric type in bits.\n","sig":null,"attributes":[{"value":"/ The size of this numeric type in bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3243,"byte_end":3285,"line_start":143,"line_end":143,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3419,"byte_end":3430,"line_start":148,"line_end":148,"column_start":5,"column_end":16},"name":"to_be_bytes","qualname":"::IsNumber::to_be_bytes","value":"pub fn to_be_bytes(Self) -> Self::Bytes","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Return the memory representation of this number as a byte array in\n big-endian (network) byte order.\n","sig":null,"attributes":[{"value":"/ Return the memory representation of this number as a byte array in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3306,"byte_end":3376,"line_start":146,"line_end":146,"column_start":2,"column_end":72}},{"value":"/ big-endian (network) byte order.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3378,"byte_end":3414,"line_start":147,"line_end":147,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3561,"byte_end":3572,"line_start":152,"line_end":152,"column_start":5,"column_end":16},"name":"to_le_bytes","qualname":"::IsNumber::to_le_bytes","value":"pub fn to_le_bytes(Self) -> Self::Bytes","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Return the memory representation of this number as a byte array in\n little-endian byte order.\n","sig":null,"attributes":[{"value":"/ Return the memory representation of this number as a byte array in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3455,"byte_end":3525,"line_start":150,"line_end":150,"column_start":2,"column_end":72}},{"value":"/ little-endian byte order.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3527,"byte_end":3556,"line_start":151,"line_end":151,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3696,"byte_end":3707,"line_start":156,"line_end":156,"column_start":5,"column_end":16},"name":"to_ne_bytes","qualname":"::IsNumber::to_ne_bytes","value":"pub fn to_ne_bytes(Self) -> Self::Bytes","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Return the memory representation of this number as a byte array in\n native byte order.\n","sig":null,"attributes":[{"value":"/ Return the memory representation of this number as a byte array in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3597,"byte_end":3667,"line_start":154,"line_end":154,"column_start":2,"column_end":72}},{"value":"/ native byte order.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3669,"byte_end":3691,"line_start":155,"line_end":155,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3823,"byte_end":3836,"line_start":160,"line_end":160,"column_start":5,"column_end":18},"name":"from_be_bytes","qualname":"::IsNumber::from_be_bytes","value":"pub fn from_be_bytes(Self::Bytes) -> Self","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Create a numeric value from its representation as a byte array in big\n endian.\n","sig":null,"attributes":[{"value":"/ Create a numeric value from its representation as a byte array in big","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3732,"byte_end":3805,"line_start":158,"line_end":158,"column_start":2,"column_end":75}},{"value":"/ endian.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3807,"byte_end":3818,"line_start":159,"line_end":159,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3962,"byte_end":3975,"line_start":164,"line_end":164,"column_start":5,"column_end":18},"name":"from_le_bytes","qualname":"::IsNumber::from_le_bytes","value":"pub fn from_le_bytes(Self::Bytes) -> Self","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Create a numeric value from its representation as a byte array in little\n endian.\n","sig":null,"attributes":[{"value":"/ Create a numeric value from its representation as a byte array in little","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3868,"byte_end":3944,"line_start":162,"line_end":162,"column_start":2,"column_end":78}},{"value":"/ endian.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3946,"byte_end":3957,"line_start":163,"line_end":163,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4112,"byte_end":4125,"line_start":168,"line_end":168,"column_start":5,"column_end":18},"name":"from_ne_bytes","qualname":"::IsNumber::from_ne_bytes","value":"pub fn from_ne_bytes(Self::Bytes) -> Self","parent":{"krate":0,"index":124},"children":[],"decl_id":null,"docs":" Create a numeric value from its memory representation as a byte array in\n native endianness.\n","sig":null,"attributes":[{"value":"/ Create a numeric value from its memory representation as a byte array in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4007,"byte_end":4083,"line_start":166,"line_end":166,"column_start":2,"column_end":78}},{"value":"/ native endianness.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4085,"byte_end":4107,"line_start":167,"line_end":167,"column_start":2,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":145},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4286,"byte_end":4295,"line_start":174,"line_end":174,"column_start":11,"column_end":20},"name":"IsInteger","qualname":"::IsInteger","value":"IsInteger: IsNumber + Hash + Eq + Ord + Binary + LowerHex + UpperHex + Octal +\nBitAnd<Self, Output = Self> + for<'a> BitAnd<&'a Self, Output = Self> +\nBitAndAssign<Self> + for<'a> BitAndAssign<&'a Self> + BitOr<Self, Output =\nSelf> + for<'a> BitOr<&'a Self, Output = Self> + BitOrAssign<Self> +\nfor<'a> BitOrAssign<&'a Self> + BitXor<Self, Output = Self> +\nfor<'a> BitXor<&'a Self, Output = Self> + BitXorAssign<Self> +\nfor<'a> BitXorAssign<&'a Self> + Not<Output = Self> + TryFrom<i8> +\nTryFrom<u8> + TryFrom<i16> + TryFrom<u16> + TryFrom<i32> + TryFrom<u32> +\nTryFrom<i64> + TryFrom<u64> + TryFrom<i128> + TryFrom<u128> + TryFrom<isize> +\nTryFrom<usize> + TryInto<i8> + TryInto<u8> + TryInto<i16> + TryInto<u16> +\nTryInto<i32> + TryInto<u32> + TryInto<i64> + TryInto<u64> + TryInto<i128> +\nTryInto<u128> + TryInto<isize> + TryInto<usize> + Shl<i8, Output = Self> +\nfor<'a> Shl<&'a i8, Output = Self> + ShlAssign<i8> +\nfor<'a> ShlAssign<&'a i8> + Shr<i8, Output = Self> + for<'a> Shr<&'a i8,\nOutput = Self> + ShrAssign<i8> + for<'a> ShrAssign<&'a i8> + Shl<u8, Output =\nSelf> + for<'a> Shl<&'a u8, Output = Self> + ShlAssign<u8> +\nfor<'a> ShlAssign<&'a u8> + Shr<u8, Output = Self> + for<'a> Shr<&'a u8,\nOutput = Self> + ShrAssign<u8> + for<'a> ShrAssign<&'a u8> + Shl<i16, Output =\nSelf> + for<'a> Shl<&'a i16, Output = Self> + ShlAssign<i16> +\nfor<'a> ShlAssign<&'a i16> + Shr<i16, Output = Self> + for<'a> Shr<&'a i16,\nOutput = Self> + ShrAssign<i16> + for<'a> ShrAssign<&'a i16> + Shl<u16, Output\n= Self> + for<'a> Shl<&'a u16, Output = Self> + ShlAssign<u16> +\nfor<'a> ShlAssign<&'a u16> + Shr<u16, Output = Self> + for<'a> Shr<&'a u16,\nOutput = Self> + ShrAssign<u16> + for<'a> ShrAssign<&'a u16> + Shl<i32, Output\n= Self> + for<'a> Shl<&'a i32, Output = Self> + ShlAssign<i32> +\nfor<'a> ShlAssign<&'a i32> + Shr<i32, Output = Self> + for<'a> Shr<&'a i32,\nOutput = Self> + ShrAssign<i32> + for<'a> ShrAssign<&'a i32> + Shl<u32, Output\n= Self> + for<'a> Shl<&'a u32, Output = Self> + ShlAssign<u32> +\nfor<'a> ShlAssign<&'a u32> + Shr<u32, Output = Self> + for<'a> Shr<&'a u32,\nOutput = Self> + ShrAssign<u32> + for<'a> ShrAssign<&'a u32> + Shl<i64, Output\n= Self> + for<'a> Shl<&'a i64, Output = Self> + ShlAssign<i64> +\nfor<'a> ShlAssign<&'a i64> + Shr<i64, Output = Self> + for<'a> Shr<&'a i64,\nOutput = Self> + ShrAssign<i64> + for<'a> ShrAssign<&'a i64> + Shl<u64, Output\n= Self> + for<'a> Shl<&'a u64, Output = Self> + ShlAssign<u64> +\nfor<'a> ShlAssign<&'a u64> + Shr<u64, Output = Self> + for<'a> Shr<&'a u64,\nOutput = Self> + ShrAssign<u64> + for<'a> ShrAssign<&'a u64> + Shl<i128,\nOutput = Self> + for<'a> Shl<&'a i128, Output = Self> + ShlAssign<i128> +\nfor<'a> ShlAssign<&'a i128> + Shr<i128, Output = Self> + for<'a> Shr<&'a i128,\nOutput = Self> + ShrAssign<i128> + for<'a> ShrAssign<&'a i128> + Shl<u128,\nOutput = Self> + for<'a> Shl<&'a u128, Output = Self> + ShlAssign<u128> +\nfor<'a> ShlAssign<&'a u128> + Shr<u128, Output = Self> + for<'a> Shr<&'a u128,\nOutput = Self> + ShrAssign<u128> + for<'a> ShrAssign<&'a u128> + Shl<isize,\nOutput = Self> + for<'a> Shl<&'a isize, Output = Self> + ShlAssign<isize> +\nfor<'a> ShlAssign<&'a isize> + Shr<isize, Output = Self> +\nfor<'a> Shr<&'a isize, Output = Self> + ShrAssign<isize> +\nfor<'a> ShrAssign<&'a isize> + Shl<usize, Output = Self> +\nfor<'a> Shl<&'a usize, Output = Self> + ShlAssign<usize> +\nfor<'a> ShlAssign<&'a usize> + Shr<usize, Output = Self> +\nfor<'a> Shr<&'a usize, Output = Self> + ShrAssign<usize> +\nfor<'a> ShrAssign<&'a usize>","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259}],"decl_id":null,"docs":" Declare that a type is a fixed-point integer.","sig":null,"attributes":[{"value":"/ Declare that a type is a fixed-point integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4158,"byte_end":4207,"line_start":171,"line_end":171,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4208,"byte_end":4211,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ This unifies all of the signed and unsigned integral types.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4212,"byte_end":4275,"line_start":173,"line_end":173,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":200},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7978,"byte_end":7982,"line_start":318,"line_end":318,"column_start":8,"column_end":12},"name":"ZERO","qualname":"::IsInteger::ZERO","value":"Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" The type’s zero value.\n","sig":null,"attributes":[{"value":"/ The type’s zero value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7942,"byte_end":7970,"line_start":317,"line_end":317,"column_start":2,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":201},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8067,"byte_end":8070,"line_start":321,"line_end":321,"column_start":8,"column_end":11},"name":"MIN","qualname":"::IsInteger::MIN","value":"Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" The type’s minimum value. This is zero for unsigned integers.\n","sig":null,"attributes":[{"value":"/ The type’s minimum value. This is zero for unsigned integers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7992,"byte_end":8059,"line_start":320,"line_end":320,"column_start":2,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":202},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8119,"byte_end":8122,"line_start":324,"line_end":324,"column_start":8,"column_end":11},"name":"MAX","qualname":"::IsInteger::MAX","value":"Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" The type’s maximum value.\n","sig":null,"attributes":[{"value":"/ The type’s maximum value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8080,"byte_end":8111,"line_start":323,"line_end":323,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8213,"byte_end":8222,"line_start":327,"line_end":327,"column_start":5,"column_end":14},"name":"min_value","qualname":"::IsInteger::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Returns the smallest value that can be represented by this integer type.\n","sig":null,"attributes":[{"value":"/ Returns the smallest value that can be represented by this integer type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8132,"byte_end":8208,"line_start":326,"line_end":326,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8316,"byte_end":8325,"line_start":330,"line_end":330,"column_start":5,"column_end":14},"name":"max_value","qualname":"::IsInteger::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Returns the largest value that can be represented by this integer type.\n","sig":null,"attributes":[{"value":"/ Returns the largest value that can be represented by this integer type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8236,"byte_end":8311,"line_start":329,"line_end":329,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8753,"byte_end":8767,"line_start":345,"line_end":345,"column_start":5,"column_end":19},"name":"from_str_radix","qualname":"::IsInteger::from_str_radix","value":"pub fn from_str_radix(&str, u32) -> Result<Self, ParseIntError>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts a string slice in a given base to an integer.","sig":null,"attributes":[{"value":"/ Converts a string slice in a given base to an integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8339,"byte_end":8397,"line_start":332,"line_end":332,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8399,"byte_end":8402,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ The string is expected to be an optional `+` or `-` sign followed by","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8404,"byte_end":8476,"line_start":334,"line_end":334,"column_start":2,"column_end":74}},{"value":"/ digits. Leading and trailing whitespace represent an error. Digits are a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8478,"byte_end":8554,"line_start":335,"line_end":335,"column_start":2,"column_end":78}},{"value":"/ subset of these characters, depending on `radix`:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8556,"byte_end":8609,"line_start":336,"line_end":336,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8611,"byte_end":8614,"line_start":337,"line_end":337,"column_start":2,"column_end":5}},{"value":"/ - `0-9`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8616,"byte_end":8627,"line_start":338,"line_end":338,"column_start":2,"column_end":13}},{"value":"/ - `a-z`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8629,"byte_end":8640,"line_start":339,"line_end":339,"column_start":2,"column_end":13}},{"value":"/ - `A-Z`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8642,"byte_end":8653,"line_start":340,"line_end":340,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8655,"byte_end":8658,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8660,"byte_end":8672,"line_start":342,"line_end":342,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8674,"byte_end":8677,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ This function panics if `radix` is not in the range from 2 to 36.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8679,"byte_end":8748,"line_start":344,"line_end":344,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8900,"byte_end":8910,"line_start":348,"line_end":348,"column_start":5,"column_end":15},"name":"count_ones","qualname":"::IsInteger::count_ones","value":"pub fn count_ones(Self) -> u32","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of ones in the binary representation of `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8825,"byte_end":8895,"line_start":347,"line_end":347,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9003,"byte_end":9014,"line_start":351,"line_end":351,"column_start":5,"column_end":16},"name":"count_zeros","qualname":"::IsInteger::count_zeros","value":"pub fn count_zeros(Self) -> u32","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the binary representation of `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":8927,"byte_end":8998,"line_start":350,"line_end":350,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9120,"byte_end":9133,"line_start":355,"line_end":355,"column_start":5,"column_end":18},"name":"leading_zeros","qualname":"::IsInteger::leading_zeros","value":"pub fn leading_zeros(Self) -> u32","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation of\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of leading zeros in the binary representation of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9031,"byte_end":9102,"line_start":353,"line_end":353,"column_start":2,"column_end":73}},{"value":"/ `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9104,"byte_end":9115,"line_start":354,"line_end":354,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9240,"byte_end":9254,"line_start":359,"line_end":359,"column_start":5,"column_end":19},"name":"trailing_zeros","qualname":"::IsInteger::trailing_zeros","value":"pub fn trailing_zeros(Self) -> u32","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation of\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of trailing zeros in the binary representation of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9150,"byte_end":9222,"line_start":357,"line_end":357,"column_start":2,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9224,"byte_end":9235,"line_start":358,"line_end":358,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9359,"byte_end":9371,"line_start":363,"line_end":363,"column_start":5,"column_end":17},"name":"leading_ones","qualname":"::IsInteger::leading_ones","value":"pub fn leading_ones(Self) -> u32","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Returns the number of leading ones in the binary representation of\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of leading ones in the binary representation of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9271,"byte_end":9341,"line_start":361,"line_end":361,"column_start":2,"column_end":72}},{"value":"/ `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9343,"byte_end":9354,"line_start":362,"line_end":362,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9477,"byte_end":9490,"line_start":367,"line_end":367,"column_start":5,"column_end":18},"name":"trailing_ones","qualname":"::IsInteger::trailing_ones","value":"pub fn trailing_ones(Self) -> u32","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Returns the number of trailing ones in the binary representation of\n `self`.\n","sig":null,"attributes":[{"value":"/ Returns the number of trailing ones in the binary representation of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9388,"byte_end":9459,"line_start":365,"line_end":365,"column_start":2,"column_end":73}},{"value":"/ `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9461,"byte_end":9472,"line_start":366,"line_end":366,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9726,"byte_end":9737,"line_start":373,"line_end":373,"column_start":5,"column_end":16},"name":"rotate_left","qualname":"::IsInteger::rotate_left","value":"pub fn rotate_left(Self, u32) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount, `n`, wrapping the\n truncated bits to the end of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount, `n`, wrapping the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9507,"byte_end":9579,"line_start":369,"line_end":369,"column_start":2,"column_end":74}},{"value":"/ truncated bits to the end of the resulting integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9581,"byte_end":9636,"line_start":370,"line_end":370,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9638,"byte_end":9641,"line_start":371,"line_end":371,"column_start":2,"column_end":5}},{"value":"/ Please note this isn’t the same operation as the `<<` shifting operator!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9643,"byte_end":9721,"line_start":372,"line_end":372,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9989,"byte_end":10001,"line_start":379,"line_end":379,"column_start":5,"column_end":17},"name":"rotate_right","qualname":"::IsInteger::rotate_right","value":"pub fn rotate_right(Self, u32) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount, `n`, wrapping the\n truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount, `n`, wrapping the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9763,"byte_end":9836,"line_start":375,"line_end":375,"column_start":2,"column_end":75}},{"value":"/ truncated bits to the beginning of the resulting integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9838,"byte_end":9899,"line_start":376,"line_end":376,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9901,"byte_end":9904,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ Please note this isn’t the same operation as the `>>` shifting operator!","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":9906,"byte_end":9984,"line_start":378,"line_end":378,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10075,"byte_end":10085,"line_start":382,"line_end":382,"column_start":5,"column_end":15},"name":"swap_bytes","qualname":"::IsInteger::swap_bytes","value":"pub fn swap_bytes(Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.\n","sig":null,"attributes":[{"value":"/ Reverses the byte order of the integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10027,"byte_end":10070,"line_start":381,"line_end":381,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10152,"byte_end":10164,"line_start":385,"line_end":385,"column_start":5,"column_end":17},"name":"reverse_bits","qualname":"::IsInteger::reverse_bits","value":"pub fn reverse_bits(Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Reverses the bit pattern of the integer.\n","sig":null,"attributes":[{"value":"/ Reverses the bit pattern of the integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10103,"byte_end":10147,"line_start":384,"line_end":384,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10337,"byte_end":10344,"line_start":390,"line_end":390,"column_start":5,"column_end":12},"name":"from_be","qualname":"::IsInteger::from_be","value":"pub fn from_be(Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an integer from big endian to the target’s endianness.","sig":null,"attributes":[{"value":"/ Converts an integer from big endian to the target’s endianness.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10182,"byte_end":10251,"line_start":387,"line_end":387,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10253,"byte_end":10256,"line_start":388,"line_end":388,"column_start":2,"column_end":5}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10258,"byte_end":10332,"line_start":389,"line_end":389,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10519,"byte_end":10526,"line_start":395,"line_end":395,"column_start":5,"column_end":12},"name":"from_le","qualname":"::IsInteger::from_le","value":"pub fn from_le(Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts an integer frm little endian to the target’s endianness.","sig":null,"attributes":[{"value":"/ Converts an integer frm little endian to the target’s endianness.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10362,"byte_end":10433,"line_start":392,"line_end":392,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10435,"byte_end":10438,"line_start":393,"line_end":393,"column_start":2,"column_end":5}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10440,"byte_end":10514,"line_start":394,"line_end":394,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10695,"byte_end":10700,"line_start":400,"line_end":400,"column_start":5,"column_end":10},"name":"to_be","qualname":"::IsInteger::to_be","value":"pub fn to_be(Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts `self` to big endian from the target’s endianness.","sig":null,"attributes":[{"value":"/ Converts `self` to big endian from the target’s endianness.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10544,"byte_end":10609,"line_start":397,"line_end":397,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10611,"byte_end":10614,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10616,"byte_end":10690,"line_start":399,"line_end":399,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10872,"byte_end":10877,"line_start":405,"line_end":405,"column_start":5,"column_end":10},"name":"to_le","qualname":"::IsInteger::to_le","value":"pub fn to_le(Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Converts `self` to little endian from the target’s endianness.","sig":null,"attributes":[{"value":"/ Converts `self` to little endian from the target’s endianness.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10718,"byte_end":10786,"line_start":402,"line_end":402,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10788,"byte_end":10791,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10793,"byte_end":10867,"line_start":404,"line_end":404,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10996,"byte_end":11007,"line_start":409,"line_end":409,"column_start":5,"column_end":16},"name":"checked_add","qualname":"::IsInteger::checked_add","value":"pub fn checked_add(Self, Self) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked integer addition. Computes `self + rhs`, returning `None` if\n overflow occurred.\n","sig":null,"attributes":[{"value":"/ Checked integer addition. Computes `self + rhs`, returning `None` if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10895,"byte_end":10967,"line_start":407,"line_end":407,"column_start":2,"column_end":74}},{"value":"/ overflow occurred.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":10969,"byte_end":10991,"line_start":408,"line_end":408,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11148,"byte_end":11159,"line_start":413,"line_end":413,"column_start":5,"column_end":16},"name":"checked_sub","qualname":"::IsInteger::checked_sub","value":"pub fn checked_sub(Self, Self) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked integer subtraction. Computes `self - rhs`, returning `None` if\n overflow occurred.\n","sig":null,"attributes":[{"value":"/ Checked integer subtraction. Computes `self - rhs`, returning `None` if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11044,"byte_end":11119,"line_start":411,"line_end":411,"column_start":2,"column_end":77}},{"value":"/ overflow occurred.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11121,"byte_end":11143,"line_start":412,"line_end":412,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11303,"byte_end":11314,"line_start":417,"line_end":417,"column_start":5,"column_end":16},"name":"checked_mul","qualname":"::IsInteger::checked_mul","value":"pub fn checked_mul(Self, Self) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked integer multiplication. Computes `self * rhs`, returning `None`\n if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Checked integer multiplication. Computes `self * rhs`, returning `None`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11196,"byte_end":11271,"line_start":415,"line_end":415,"column_start":2,"column_end":77}},{"value":"/ if overflow occurred.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11273,"byte_end":11298,"line_start":416,"line_end":416,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11481,"byte_end":11492,"line_start":421,"line_end":421,"column_start":5,"column_end":16},"name":"checked_div","qualname":"::IsInteger::checked_div","value":"pub fn checked_div(Self, Self) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked integer division. Computes `self / rhs`, returning `None` if\n `rhs == 0` or the division results in overflow.\n","sig":null,"attributes":[{"value":"/ Checked integer division. Computes `self / rhs`, returning `None` if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11351,"byte_end":11423,"line_start":419,"line_end":419,"column_start":2,"column_end":74}},{"value":"/ `rhs == 0` or the division results in overflow.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11425,"byte_end":11476,"line_start":420,"line_end":420,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11671,"byte_end":11689,"line_start":425,"line_end":425,"column_start":5,"column_end":23},"name":"checked_div_euclid","qualname":"::IsInteger::checked_div_euclid","value":"pub fn checked_div_euclid(Self, Self) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning\n `None` if `rhs == 0` or the division results in overflow.\n","sig":null,"attributes":[{"value":"/ Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11529,"byte_end":11603,"line_start":423,"line_end":423,"column_start":2,"column_end":76}},{"value":"/ `None` if `rhs == 0` or the division results in overflow.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11605,"byte_end":11666,"line_start":424,"line_end":424,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11857,"byte_end":11868,"line_start":429,"line_end":429,"column_start":5,"column_end":16},"name":"checked_rem","qualname":"::IsInteger::checked_rem","value":"pub fn checked_rem(Self, Self) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked integer remainder. Computes `self % rhs`, returning `None` if\n `rhs == 0` or the division results in overflow.\n","sig":null,"attributes":[{"value":"/ Checked integer remainder. Computes `self % rhs`, returning `None` if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11726,"byte_end":11799,"line_start":427,"line_end":427,"column_start":2,"column_end":75}},{"value":"/ `rhs == 0` or the division results in overflow.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11801,"byte_end":11852,"line_start":428,"line_end":428,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12048,"byte_end":12066,"line_start":433,"line_end":433,"column_start":5,"column_end":23},"name":"checked_rem_euclid","qualname":"::IsInteger::checked_rem_euclid","value":"pub fn checked_rem_euclid(Self, Self) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked Euclidean remainder. Computes `self.rem_euclid(rhs)`, returning\n `None` if `rhs == 0` or the division results in overflow.\n","sig":null,"attributes":[{"value":"/ Checked Euclidean remainder. Computes `self.rem_euclid(rhs)`, returning","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11905,"byte_end":11980,"line_start":431,"line_end":431,"column_start":2,"column_end":77}},{"value":"/ `None` if `rhs == 0` or the division results in overflow.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":11982,"byte_end":12043,"line_start":432,"line_end":432,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12247,"byte_end":12258,"line_start":438,"line_end":438,"column_start":5,"column_end":16},"name":"checked_neg","qualname":"::IsInteger::checked_neg","value":"pub fn checked_neg(Self) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked negation. Computes `-self`, returning `None` if `self == MIN`.","sig":null,"attributes":[{"value":"/ Checked negation. Computes `-self`, returning `None` if `self == MIN`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12103,"byte_end":12177,"line_start":435,"line_end":435,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12179,"byte_end":12182,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ Note that negating any positive integer will overflow.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12184,"byte_end":12242,"line_start":437,"line_end":437,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12424,"byte_end":12435,"line_start":442,"line_end":442,"column_start":5,"column_end":16},"name":"checked_shl","qualname":"::IsInteger::checked_shl","value":"pub fn checked_shl(Self, u32) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is\n larger than or equal to the number of bits in `self`.\n","sig":null,"attributes":[{"value":"/ Checked shift left. Computes `self << rhs`, returning `None` if `rhs` is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12284,"byte_end":12360,"line_start":440,"line_end":440,"column_start":2,"column_end":78}},{"value":"/ larger than or equal to the number of bits in `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12362,"byte_end":12419,"line_start":441,"line_end":441,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12612,"byte_end":12623,"line_start":446,"line_end":446,"column_start":5,"column_end":16},"name":"checked_shr","qualname":"::IsInteger::checked_shr","value":"pub fn checked_shr(Self, u32) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked shift right. Computes `self >> rhs`, returning `None` if `rhs`\n is larger than or equal to the number of bits in `self`.\n","sig":null,"attributes":[{"value":"/ Checked shift right. Computes `self >> rhs`, returning `None` if `rhs`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12471,"byte_end":12545,"line_start":444,"line_end":444,"column_start":2,"column_end":76}},{"value":"/ is larger than or equal to the number of bits in `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12547,"byte_end":12607,"line_start":445,"line_end":445,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12761,"byte_end":12772,"line_start":450,"line_end":450,"column_start":5,"column_end":16},"name":"checked_pow","qualname":"::IsInteger::checked_pow","value":"pub fn checked_pow(Self, u32) -> Option<Self>","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\n overflow occurred.\n","sig":null,"attributes":[{"value":"/ Checked exponentiation. Computes `self.pow(exp)`, returning `None` if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12659,"byte_end":12732,"line_start":448,"line_end":448,"column_start":2,"column_end":75}},{"value":"/ overflow occurred.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12734,"byte_end":12756,"line_start":449,"line_end":449,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12930,"byte_end":12944,"line_start":454,"line_end":454,"column_start":5,"column_end":19},"name":"saturating_add","qualname":"::IsInteger::saturating_add","value":"pub fn saturating_add(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Saturating integer addition. Computes `self + rhs`, saturating at the\n numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating integer addition. Computes `self + rhs`, saturating at the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12808,"byte_end":12881,"line_start":452,"line_end":452,"column_start":2,"column_end":75}},{"value":"/ numeric bounds instead of overflowing.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12883,"byte_end":12925,"line_start":453,"line_end":453,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13098,"byte_end":13112,"line_start":458,"line_end":458,"column_start":5,"column_end":19},"name":"saturating_sub","qualname":"::IsInteger::saturating_sub","value":"pub fn saturating_sub(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Saturating integer subtraction. Computes `self - rhs`, saturating at the\n numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating integer subtraction. Computes `self - rhs`, saturating at the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":12973,"byte_end":13049,"line_start":456,"line_end":456,"column_start":2,"column_end":78}},{"value":"/ numeric bounds instead of overflowing.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13051,"byte_end":13093,"line_start":457,"line_end":457,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13269,"byte_end":13283,"line_start":462,"line_end":462,"column_start":5,"column_end":19},"name":"saturating_mul","qualname":"::IsInteger::saturating_mul","value":"pub fn saturating_mul(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Saturating integer multiplication. Computes `self * rhs`, saturating at\n the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating integer multiplication. Computes `self * rhs`, saturating at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13141,"byte_end":13216,"line_start":460,"line_end":460,"column_start":2,"column_end":77}},{"value":"/ the numeric bounds instead of overflowing.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13218,"byte_end":13264,"line_start":461,"line_end":461,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13443,"byte_end":13457,"line_start":466,"line_end":466,"column_start":5,"column_end":19},"name":"saturating_pow","qualname":"::IsInteger::saturating_pow","value":"pub fn saturating_pow(Self, u32) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Saturating integer exponentiation. Computes `self.pow(exp)`, saturating\n at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating integer exponentiation. Computes `self.pow(exp)`, saturating","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13312,"byte_end":13387,"line_start":464,"line_end":464,"column_start":2,"column_end":77}},{"value":"/ at the numeric bounds instead of overflowing.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13389,"byte_end":13438,"line_start":465,"line_end":465,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13595,"byte_end":13607,"line_start":470,"line_end":470,"column_start":5,"column_end":17},"name":"wrapping_add","qualname":"::IsInteger::wrapping_add","value":"pub fn wrapping_add(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + rhs`, wrapping around at\n the boundary of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + rhs`, wrapping around at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13485,"byte_end":13559,"line_start":468,"line_end":468,"column_start":2,"column_end":76}},{"value":"/ the boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13561,"byte_end":13590,"line_start":469,"line_end":469,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13749,"byte_end":13761,"line_start":474,"line_end":474,"column_start":5,"column_end":17},"name":"wrapping_sub","qualname":"::IsInteger::wrapping_sub","value":"pub fn wrapping_sub(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around\n at the boundary of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) subtraction. Computes `self - rhs`, wrapping around","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13636,"byte_end":13710,"line_start":472,"line_end":472,"column_start":2,"column_end":76}},{"value":"/ at the boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13712,"byte_end":13744,"line_start":473,"line_end":473,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13906,"byte_end":13918,"line_start":478,"line_end":478,"column_start":5,"column_end":17},"name":"wrapping_mul","qualname":"::IsInteger::wrapping_mul","value":"pub fn wrapping_mul(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * rhs`, wrapping\n around at the boundary of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) multiplication. Computes `self * rhs`, wrapping","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13790,"byte_end":13860,"line_start":476,"line_end":476,"column_start":2,"column_end":72}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13862,"byte_end":13901,"line_start":477,"line_end":477,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14780,"byte_end":14792,"line_start":501,"line_end":501,"column_start":5,"column_end":17},"name":"wrapping_div","qualname":"::IsInteger::wrapping_div","value":"pub fn wrapping_div(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Wrapping (modular) division. Computes `self / rhs`, wrapping around at\n the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) division. Computes `self / rhs`, wrapping around at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":13947,"byte_end":14021,"line_start":480,"line_end":480,"column_start":2,"column_end":76}},{"value":"/ the boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14023,"byte_end":14052,"line_start":481,"line_end":481,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14054,"byte_end":14057,"line_start":482,"line_end":482,"column_start":2,"column_end":5}},{"value":"/ # Signed Integers","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14059,"byte_end":14080,"line_start":483,"line_end":483,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14082,"byte_end":14085,"line_start":484,"line_end":484,"column_start":2,"column_end":5}},{"value":"/ The only case where such wrapping can occur is when one divides","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14087,"byte_end":14154,"line_start":485,"line_end":485,"column_start":2,"column_end":69}},{"value":"/ `MIN / -1` on a signed type (where `MIN` is the negative minimal value","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14156,"byte_end":14230,"line_start":486,"line_end":486,"column_start":2,"column_end":76}},{"value":"/ for the type); this is equivalent to `-MIN`, a positive value that is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14232,"byte_end":14305,"line_start":487,"line_end":487,"column_start":2,"column_end":75}},{"value":"/ too large to represent in the type. In such a case, this function","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14307,"byte_end":14376,"line_start":488,"line_end":488,"column_start":2,"column_end":71}},{"value":"/ returns `MIN` itself.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14378,"byte_end":14403,"line_start":489,"line_end":489,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14405,"byte_end":14408,"line_start":490,"line_end":490,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Integers","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14410,"byte_end":14433,"line_start":491,"line_end":491,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14435,"byte_end":14438,"line_start":492,"line_end":492,"column_start":2,"column_end":5}},{"value":"/ Wrapping (modular) division. Computes `self / rhs`. Wrapped division on","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14440,"byte_end":14515,"line_start":493,"line_end":493,"column_start":2,"column_end":77}},{"value":"/ unsigned types is just normal division. There’s no way wrapping could","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14517,"byte_end":14592,"line_start":494,"line_end":494,"column_start":2,"column_end":75}},{"value":"/ ever happen. This function exists, so that all operations are accounted","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14594,"byte_end":14669,"line_start":495,"line_end":495,"column_start":2,"column_end":77}},{"value":"/ for in the wrapping operations.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14671,"byte_end":14706,"line_start":496,"line_end":496,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14708,"byte_end":14711,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14713,"byte_end":14725,"line_start":498,"line_end":498,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14727,"byte_end":14730,"line_start":499,"line_end":499,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14732,"byte_end":14775,"line_start":500,"line_end":500,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15696,"byte_end":15715,"line_start":524,"line_end":524,"column_start":5,"column_end":24},"name":"wrapping_div_euclid","qualname":"::IsInteger::wrapping_div_euclid","value":"pub fn wrapping_div_euclid(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Wrapping Eulidean division. Computes `self.div_euclid(rhs)`, wrapping\n around at the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping Eulidean division. Computes `self.div_euclid(rhs)`, wrapping","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14821,"byte_end":14894,"line_start":503,"line_end":503,"column_start":2,"column_end":75}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14896,"byte_end":14935,"line_start":504,"line_end":504,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14937,"byte_end":14940,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ # Signed Types","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14942,"byte_end":14960,"line_start":506,"line_end":506,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14962,"byte_end":14965,"line_start":507,"line_end":507,"column_start":2,"column_end":5}},{"value":"/ Wrapping will only occur in `MIN / -1` on a signed type (where `MIN` is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":14967,"byte_end":15042,"line_start":508,"line_end":508,"column_start":2,"column_end":77}},{"value":"/ the negative minimal value for the type). This is equivalent to `-MIN`,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15044,"byte_end":15119,"line_start":509,"line_end":509,"column_start":2,"column_end":77}},{"value":"/ a positive value that is too large to represent in the type. In this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15121,"byte_end":15193,"line_start":510,"line_end":510,"column_start":2,"column_end":74}},{"value":"/ case, this method returns `MIN` itself.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15195,"byte_end":15238,"line_start":511,"line_end":511,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15240,"byte_end":15243,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Types","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15245,"byte_end":15265,"line_start":513,"line_end":513,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15267,"byte_end":15270,"line_start":514,"line_end":514,"column_start":2,"column_end":5}},{"value":"/ Wrapped division on unsigned types is just normal division. There’s no","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15272,"byte_end":15348,"line_start":515,"line_end":515,"column_start":2,"column_end":76}},{"value":"/ way wrapping could ever happen. This function exists, so that all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15350,"byte_end":15419,"line_start":516,"line_end":516,"column_start":2,"column_end":71}},{"value":"/ operations are accounted for in the wrapping operations. Since, for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15421,"byte_end":15496,"line_start":517,"line_end":517,"column_start":2,"column_end":77}},{"value":"/ positive integers, all common definitions of division are equal, this is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15498,"byte_end":15574,"line_start":518,"line_end":518,"column_start":2,"column_end":78}},{"value":"/ exactly equal to `self.wrapping_div(rhs)`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15576,"byte_end":15622,"line_start":519,"line_end":519,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15624,"byte_end":15627,"line_start":520,"line_end":520,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15629,"byte_end":15641,"line_start":521,"line_end":521,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15643,"byte_end":15646,"line_start":522,"line_end":522,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15648,"byte_end":15691,"line_start":523,"line_end":523,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16480,"byte_end":16492,"line_start":546,"line_end":546,"column_start":5,"column_end":17},"name":"wrapping_rem","qualname":"::IsInteger::wrapping_rem","value":"pub fn wrapping_rem(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at\n the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) remainder. Computes `self % rhs`, wrapping around at","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15744,"byte_end":15819,"line_start":526,"line_end":526,"column_start":2,"column_end":77}},{"value":"/ the boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15821,"byte_end":15850,"line_start":527,"line_end":527,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15852,"byte_end":15855,"line_start":528,"line_end":528,"column_start":2,"column_end":5}},{"value":"/ # Signed Integers","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15857,"byte_end":15878,"line_start":529,"line_end":529,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15880,"byte_end":15883,"line_start":530,"line_end":530,"column_start":2,"column_end":5}},{"value":"/ Such wrap-around never actually occurs mathematically; implementation","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15885,"byte_end":15958,"line_start":531,"line_end":531,"column_start":2,"column_end":75}},{"value":"/ artifacts make `x % y` invalid for `MIN / -1` on a signed type (where","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":15960,"byte_end":16033,"line_start":532,"line_end":532,"column_start":2,"column_end":75}},{"value":"/ `MIN` is the negative minimal value). In such a case, this function","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16035,"byte_end":16106,"line_start":533,"line_end":533,"column_start":2,"column_end":73}},{"value":"/ returns `0`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16108,"byte_end":16124,"line_start":534,"line_end":534,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16126,"byte_end":16129,"line_start":535,"line_end":535,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Integers","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16131,"byte_end":16154,"line_start":536,"line_end":536,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16156,"byte_end":16159,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ Wrapped remainder calculation on unsigned types is just the regular","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16161,"byte_end":16232,"line_start":538,"line_end":538,"column_start":2,"column_end":73}},{"value":"/ remainder calculation. There’s no way wrapping could ever happen. This","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16234,"byte_end":16310,"line_start":539,"line_end":539,"column_start":2,"column_end":76}},{"value":"/ function exists, so that all operations are accounted for in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16312,"byte_end":16380,"line_start":540,"line_end":540,"column_start":2,"column_end":70}},{"value":"/ wrapping operations.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16382,"byte_end":16406,"line_start":541,"line_end":541,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16408,"byte_end":16411,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16413,"byte_end":16425,"line_start":543,"line_end":543,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16427,"byte_end":16430,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16432,"byte_end":16475,"line_start":545,"line_end":545,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17330,"byte_end":17349,"line_start":569,"line_end":569,"column_start":5,"column_end":24},"name":"wrapping_rem_euclid","qualname":"::IsInteger::wrapping_rem_euclid","value":"pub fn wrapping_rem_euclid(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Wrapping Euclidean remainder. Computes `self.rem_euclid(rhs)`, wrapping\n around at the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping Euclidean remainder. Computes `self.rem_euclid(rhs)`, wrapping","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16521,"byte_end":16596,"line_start":548,"line_end":548,"column_start":2,"column_end":77}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16598,"byte_end":16637,"line_start":549,"line_end":549,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16639,"byte_end":16642,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ # Signed Integers","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16644,"byte_end":16665,"line_start":551,"line_end":551,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16667,"byte_end":16670,"line_start":552,"line_end":552,"column_start":2,"column_end":5}},{"value":"/ Wrapping will only occur in `MIN % -1` on a signed type (where `MIN` is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16672,"byte_end":16747,"line_start":553,"line_end":553,"column_start":2,"column_end":77}},{"value":"/ the negative minimal value for the type). In this case, this method","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16749,"byte_end":16820,"line_start":554,"line_end":554,"column_start":2,"column_end":73}},{"value":"/ returns 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16822,"byte_end":16836,"line_start":555,"line_end":555,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16838,"byte_end":16841,"line_start":556,"line_end":556,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Integers","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16843,"byte_end":16866,"line_start":557,"line_end":557,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16868,"byte_end":16871,"line_start":558,"line_end":558,"column_start":2,"column_end":5}},{"value":"/ Wrapped modulo calculation on unsigned types is just the regular","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16873,"byte_end":16941,"line_start":559,"line_end":559,"column_start":2,"column_end":70}},{"value":"/ remainder calculation. There’s no way wrapping could ever happen. This","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":16943,"byte_end":17019,"line_start":560,"line_end":560,"column_start":2,"column_end":76}},{"value":"/ function exists, so that all operations are accounted for in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17021,"byte_end":17089,"line_start":561,"line_end":561,"column_start":2,"column_end":70}},{"value":"/ wrapping operations. Since, for the positive integers, all common","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17091,"byte_end":17160,"line_start":562,"line_end":562,"column_start":2,"column_end":71}},{"value":"/ definitions of division are equal, this is exactly equal to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17162,"byte_end":17225,"line_start":563,"line_end":563,"column_start":2,"column_end":65}},{"value":"/ `self.wrapping_rem(rhs)`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17227,"byte_end":17256,"line_start":564,"line_end":564,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17258,"byte_end":17261,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17263,"byte_end":17275,"line_start":566,"line_end":566,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17277,"byte_end":17280,"line_start":567,"line_end":567,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17282,"byte_end":17325,"line_start":568,"line_end":568,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18239,"byte_end":18251,"line_start":589,"line_end":589,"column_start":5,"column_end":17},"name":"wrapping_neg","qualname":"::IsInteger::wrapping_neg","value":"pub fn wrapping_neg(Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Wrapping (modular) negation. Computes `-self`, wrapping around at the\n boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) negation. Computes `-self`, wrapping around at the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17378,"byte_end":17451,"line_start":571,"line_end":571,"column_start":2,"column_end":75}},{"value":"/ boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17453,"byte_end":17478,"line_start":572,"line_end":572,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17480,"byte_end":17483,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ # Signed Integers","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17485,"byte_end":17506,"line_start":574,"line_end":574,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17508,"byte_end":17511,"line_start":575,"line_end":575,"column_start":2,"column_end":5}},{"value":"/ The  only case where such wrapping can occur is when one negates `MIN`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17513,"byte_end":17587,"line_start":576,"line_end":576,"column_start":2,"column_end":76}},{"value":"/ on a signed type (where `MIN` is the negative minimal value for the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17589,"byte_end":17660,"line_start":577,"line_end":577,"column_start":2,"column_end":73}},{"value":"/ type); this is a positive value that is too large to represent in the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17662,"byte_end":17735,"line_start":578,"line_end":578,"column_start":2,"column_end":75}},{"value":"/ type. In such a case, this function returns `MIN` itself.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17737,"byte_end":17798,"line_start":579,"line_end":579,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17800,"byte_end":17803,"line_start":580,"line_end":580,"column_start":2,"column_end":5}},{"value":"/ # Unsigned Integers","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17805,"byte_end":17828,"line_start":581,"line_end":581,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17830,"byte_end":17833,"line_start":582,"line_end":582,"column_start":2,"column_end":5}},{"value":"/ Since unsigned types do not have negative equivalents all applications","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17835,"byte_end":17909,"line_start":583,"line_end":583,"column_start":2,"column_end":76}},{"value":"/ of this function will wrap (except for `-0`). For values smaller than","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17911,"byte_end":17984,"line_start":584,"line_end":584,"column_start":2,"column_end":75}},{"value":"/ the corresponding signed type’s maximum the result is the same as","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":17986,"byte_end":18057,"line_start":585,"line_end":585,"column_start":2,"column_end":71}},{"value":"/ casting the corresponding signed value. Any larger values are equivalent","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18059,"byte_end":18135,"line_start":586,"line_end":586,"column_start":2,"column_end":78}},{"value":"/ to `MAX + 1 - (val - MAX - 1)` where `MAX` is the corresponding signed","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18137,"byte_end":18211,"line_start":587,"line_end":587,"column_start":2,"column_end":76}},{"value":"/ type’s maximum.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18213,"byte_end":18234,"line_start":588,"line_end":588,"column_start":2,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18792,"byte_end":18804,"line_start":600,"line_end":600,"column_start":5,"column_end":17},"name":"wrapping_shl","qualname":"::IsInteger::wrapping_shl","value":"pub fn wrapping_shl(Self, u32) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask`\n removes any high-order bits of `rhs` that would cause the shift to\n exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18269,"byte_end":18344,"line_start":591,"line_end":591,"column_start":2,"column_end":77}},{"value":"/ removes any high-order bits of `rhs` that would cause the shift to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18346,"byte_end":18416,"line_start":592,"line_end":592,"column_start":2,"column_end":72}},{"value":"/ exceed the bitwidth of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18418,"byte_end":18454,"line_start":593,"line_end":593,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18456,"byte_end":18459,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ Note that this is not the same as a rotate-left; the RHS of a wrapping","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18461,"byte_end":18535,"line_start":595,"line_end":595,"column_start":2,"column_end":76}},{"value":"/ shift-left is restricted to the range of the type, rather than the bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18537,"byte_end":18612,"line_start":596,"line_end":596,"column_start":2,"column_end":77}},{"value":"/ shifted out of the LHS being returned to the other end. The primitive","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18614,"byte_end":18687,"line_start":597,"line_end":597,"column_start":2,"column_end":75}},{"value":"/ integer types all implement a `rotate_left` function, which may be what","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18689,"byte_end":18764,"line_start":598,"line_end":598,"column_start":2,"column_end":77}},{"value":"/ you want instead.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18766,"byte_end":18787,"line_start":599,"line_end":599,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19359,"byte_end":19371,"line_start":611,"line_end":611,"column_start":5,"column_end":17},"name":"wrapping_shr","qualname":"::IsInteger::wrapping_shr","value":"pub fn wrapping_shr(Self, u32) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask`\n removes any high-order bits of `rhs` that would cause the shift to\n exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18832,"byte_end":18908,"line_start":602,"line_end":602,"column_start":2,"column_end":78}},{"value":"/ removes any high-order bits of `rhs` that would cause the shift to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18910,"byte_end":18980,"line_start":603,"line_end":603,"column_start":2,"column_end":72}},{"value":"/ exceed the bitwidth of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":18982,"byte_end":19018,"line_start":604,"line_end":604,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19020,"byte_end":19023,"line_start":605,"line_end":605,"column_start":2,"column_end":5}},{"value":"/ Note that this is not the same as a rotate-right; the RHS of a wrapping","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19025,"byte_end":19100,"line_start":606,"line_end":606,"column_start":2,"column_end":77}},{"value":"/ shift-right is restricted to the range of the type, rather than the bits","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19102,"byte_end":19178,"line_start":607,"line_end":607,"column_start":2,"column_end":78}},{"value":"/ shifted out of the LHS being returned to the other end. The primitive","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19180,"byte_end":19253,"line_start":608,"line_end":608,"column_start":2,"column_end":75}},{"value":"/ integer types all implement a `rotate_right` function, which may be what","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19255,"byte_end":19331,"line_start":609,"line_end":609,"column_start":2,"column_end":78}},{"value":"/ you want instead.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19333,"byte_end":19354,"line_start":610,"line_end":610,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19518,"byte_end":19530,"line_start":615,"line_end":615,"column_start":5,"column_end":17},"name":"wrapping_pow","qualname":"::IsInteger::wrapping_pow","value":"pub fn wrapping_pow(Self, u32) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Wrapping (modular) exponentiation. Computes `self.pow(exp)`, wrapping\n around at the boundary of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) exponentiation. Computes `self.pow(exp)`, wrapping","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19399,"byte_end":19472,"line_start":613,"line_end":613,"column_start":2,"column_end":75}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19474,"byte_end":19513,"line_start":614,"line_end":614,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19789,"byte_end":19804,"line_start":622,"line_end":622,"column_start":5,"column_end":20},"name":"overflowing_add","qualname":"::IsInteger::overflowing_add","value":"pub fn overflowing_add(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Calculates `self + rhs`","sig":null,"attributes":[{"value":"/ Calculates `self + rhs`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19558,"byte_end":19585,"line_start":617,"line_end":617,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19587,"byte_end":19590,"line_start":618,"line_end":618,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the addition along with a boolean indicating whether","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19592,"byte_end":19667,"line_start":619,"line_end":619,"column_start":2,"column_end":77}},{"value":"/ an arithmetic overflow would occur. If an overflow would have occurred","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19669,"byte_end":19743,"line_start":620,"line_end":620,"column_start":2,"column_end":76}},{"value":"/ then the wrapped value is returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19745,"byte_end":19784,"line_start":621,"line_end":621,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20075,"byte_end":20090,"line_start":629,"line_end":629,"column_start":5,"column_end":20},"name":"overflowing_sub","qualname":"::IsInteger::overflowing_sub","value":"pub fn overflowing_sub(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Calculates `self - rhs`","sig":null,"attributes":[{"value":"/ Calculates `self - rhs`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19841,"byte_end":19868,"line_start":624,"line_end":624,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19870,"byte_end":19873,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the subtraction along with a boolean indicating","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19875,"byte_end":19945,"line_start":626,"line_end":626,"column_start":2,"column_end":72}},{"value":"/ whether an arithmetic overflow would occur. If an overflow would have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":19947,"byte_end":20020,"line_start":627,"line_end":627,"column_start":2,"column_end":75}},{"value":"/ occurred then the wrapped value is returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20022,"byte_end":20070,"line_start":628,"line_end":628,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20391,"byte_end":20406,"line_start":636,"line_end":636,"column_start":5,"column_end":20},"name":"overflowing_mul","qualname":"::IsInteger::overflowing_mul","value":"pub fn overflowing_mul(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Calculates the multiplication of `self` and `rhs`.","sig":null,"attributes":[{"value":"/ Calculates the multiplication of `self` and `rhs`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20127,"byte_end":20181,"line_start":631,"line_end":631,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20183,"byte_end":20186,"line_start":632,"line_end":632,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the multiplication along with a boolean indicating","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20188,"byte_end":20261,"line_start":633,"line_end":633,"column_start":2,"column_end":75}},{"value":"/ whether an arithmetic overflow would occur. If an overflow would have","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20263,"byte_end":20336,"line_start":634,"line_end":634,"column_start":2,"column_end":75}},{"value":"/ occurred then the wrapped value is returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20338,"byte_end":20386,"line_start":635,"line_end":635,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20753,"byte_end":20768,"line_start":647,"line_end":647,"column_start":5,"column_end":20},"name":"overflowing_div","qualname":"::IsInteger::overflowing_div","value":"pub fn overflowing_div(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Calculates the divisor when `self` is divided by `rhs`.","sig":null,"attributes":[{"value":"/ Calculates the divisor when `self` is divided by `rhs`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20443,"byte_end":20502,"line_start":638,"line_end":638,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20504,"byte_end":20507,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the divisor along with a boolean indicating whether","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20509,"byte_end":20583,"line_start":640,"line_end":640,"column_start":2,"column_end":76}},{"value":"/ an arithmetic overflow would occur. If an overflow would occur then self","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20585,"byte_end":20661,"line_start":641,"line_end":641,"column_start":2,"column_end":78}},{"value":"/ is returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20663,"byte_end":20679,"line_start":642,"line_end":642,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20681,"byte_end":20684,"line_start":643,"line_end":643,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20686,"byte_end":20698,"line_start":644,"line_end":644,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20700,"byte_end":20703,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20705,"byte_end":20748,"line_start":646,"line_end":646,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21129,"byte_end":21151,"line_start":658,"line_end":658,"column_start":5,"column_end":27},"name":"overflowing_div_euclid","qualname":"::IsInteger::overflowing_div_euclid","value":"pub fn overflowing_div_euclid(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.","sig":null,"attributes":[{"value":"/ Calculates the quotient of Euclidean division `self.div_euclid(rhs)`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20805,"byte_end":20878,"line_start":649,"line_end":649,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20880,"byte_end":20883,"line_start":650,"line_end":650,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the divisor along with a boolean indicating whether","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20885,"byte_end":20959,"line_start":651,"line_end":651,"column_start":2,"column_end":76}},{"value":"/ an arithmetic overflow would occur. If an overflow would occur then self","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":20961,"byte_end":21037,"line_start":652,"line_end":652,"column_start":2,"column_end":78}},{"value":"/ is returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21039,"byte_end":21055,"line_start":653,"line_end":653,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21057,"byte_end":21060,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21062,"byte_end":21074,"line_start":655,"line_end":655,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21076,"byte_end":21079,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21081,"byte_end":21124,"line_start":657,"line_end":657,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21514,"byte_end":21529,"line_start":669,"line_end":669,"column_start":5,"column_end":20},"name":"overflowing_rem","qualname":"::IsInteger::overflowing_rem","value":"pub fn overflowing_rem(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Calculates the remainder when `self` is divided by `rhs`.","sig":null,"attributes":[{"value":"/ Calculates the remainder when `self` is divided by `rhs`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21188,"byte_end":21249,"line_start":660,"line_end":660,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21251,"byte_end":21254,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the remainder after dividing along with a boolean","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21256,"byte_end":21328,"line_start":662,"line_end":662,"column_start":2,"column_end":74}},{"value":"/ indicating whether an arithmetic overflow would occur. If an overflow","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21330,"byte_end":21403,"line_start":663,"line_end":663,"column_start":2,"column_end":75}},{"value":"/ would occur then 0 is returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21405,"byte_end":21440,"line_start":664,"line_end":664,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21442,"byte_end":21445,"line_start":665,"line_end":665,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21447,"byte_end":21459,"line_start":666,"line_end":666,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21461,"byte_end":21464,"line_start":667,"line_end":667,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21466,"byte_end":21509,"line_start":668,"line_end":668,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21900,"byte_end":21922,"line_start":680,"line_end":680,"column_start":5,"column_end":27},"name":"overflowing_rem_euclid","qualname":"::IsInteger::overflowing_rem_euclid","value":"pub fn overflowing_rem_euclid(Self, Self) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Overflowing Euclidean remainder. Calculates `self.rem_euclid(rhs)`.","sig":null,"attributes":[{"value":"/ Overflowing Euclidean remainder. Calculates `self.rem_euclid(rhs)`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21566,"byte_end":21637,"line_start":671,"line_end":671,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21639,"byte_end":21642,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the remainder after dividing along with a boolean","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21644,"byte_end":21716,"line_start":673,"line_end":673,"column_start":2,"column_end":74}},{"value":"/ indicating whether an arithmetic overflow would occur. If an overflow","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21718,"byte_end":21791,"line_start":674,"line_end":674,"column_start":2,"column_end":75}},{"value":"/ would occur then 0 is returned.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21793,"byte_end":21828,"line_start":675,"line_end":675,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21830,"byte_end":21833,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21835,"byte_end":21847,"line_start":677,"line_end":677,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21849,"byte_end":21852,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ This function will panic if rhs is 0.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21854,"byte_end":21895,"line_start":679,"line_end":679,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22343,"byte_end":22358,"line_start":688,"line_end":688,"column_start":5,"column_end":20},"name":"overflowing_neg","qualname":"::IsInteger::overflowing_neg","value":"pub fn overflowing_neg(Self) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Negates self, overflowing if this is equal to the minimum value.","sig":null,"attributes":[{"value":"/ Negates self, overflowing if this is equal to the minimum value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":21959,"byte_end":22027,"line_start":682,"line_end":682,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22029,"byte_end":22032,"line_start":683,"line_end":683,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the negated version of self along with a boolean","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22034,"byte_end":22105,"line_start":684,"line_end":684,"column_start":2,"column_end":73}},{"value":"/ indicating whether an overflow happened. If `self` is the minimum value","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22107,"byte_end":22182,"line_start":685,"line_end":685,"column_start":2,"column_end":77}},{"value":"/ (e.g., `i32::MIN` for values of type `i32`), then the minimum value will","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22184,"byte_end":22260,"line_start":686,"line_end":686,"column_start":2,"column_end":78}},{"value":"/ be returned again and `true` will be returned for an overflow happening.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22262,"byte_end":22338,"line_start":687,"line_end":687,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22746,"byte_end":22761,"line_start":697,"line_end":697,"column_start":5,"column_end":20},"name":"overflowing_shl","qualname":"::IsInteger::overflowing_shl","value":"pub fn overflowing_shl(Self, u32) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Shifts self left by `rhs` bits.","sig":null,"attributes":[{"value":"/ Shifts self left by `rhs` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22384,"byte_end":22419,"line_start":690,"line_end":690,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22421,"byte_end":22424,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the shifted version of self along with a boolean","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22426,"byte_end":22497,"line_start":692,"line_end":692,"column_start":2,"column_end":73}},{"value":"/ indicating whether the shift value was larger than or equal to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22499,"byte_end":22569,"line_start":693,"line_end":693,"column_start":2,"column_end":72}},{"value":"/ number of bits. If the shift value is too large, then value is masked","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22571,"byte_end":22644,"line_start":694,"line_end":694,"column_start":2,"column_end":75}},{"value":"/ (N-1) where N is the number of bits, and this value is then used to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22646,"byte_end":22717,"line_start":695,"line_end":695,"column_start":2,"column_end":73}},{"value":"/ perform the shift.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22719,"byte_end":22741,"line_start":696,"line_end":696,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23160,"byte_end":23175,"line_start":706,"line_end":706,"column_start":5,"column_end":20},"name":"overflowing_shr","qualname":"::IsInteger::overflowing_shr","value":"pub fn overflowing_shr(Self, u32) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Shifts self right by `rhs` bits.","sig":null,"attributes":[{"value":"/ Shifts self right by `rhs` bits.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22797,"byte_end":22833,"line_start":699,"line_end":699,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22835,"byte_end":22838,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the shifted version of self along with a boolean","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22840,"byte_end":22911,"line_start":701,"line_end":701,"column_start":2,"column_end":73}},{"value":"/ indicating whether the shift value was larger than or equal to the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22913,"byte_end":22983,"line_start":702,"line_end":702,"column_start":2,"column_end":72}},{"value":"/ number of bits. If the shift value is too large, then value is masked","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":22985,"byte_end":23058,"line_start":703,"line_end":703,"column_start":2,"column_end":75}},{"value":"/ (N-1) where N is the number of bits, and this value is then used to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23060,"byte_end":23131,"line_start":704,"line_end":704,"column_start":2,"column_end":73}},{"value":"/ perform the shift.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23133,"byte_end":23155,"line_start":705,"line_end":705,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23400,"byte_end":23415,"line_start":712,"line_end":712,"column_start":5,"column_end":20},"name":"overflowing_pow","qualname":"::IsInteger::overflowing_pow","value":"pub fn overflowing_pow(Self, u32) -> (Self, bool)","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises self to the power of `exp`, using exponentiation by squaring.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23211,"byte_end":23283,"line_start":708,"line_end":708,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23285,"byte_end":23288,"line_start":709,"line_end":709,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the exponentiation along with a bool indicating","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23290,"byte_end":23360,"line_start":710,"line_end":710,"column_start":2,"column_end":72}},{"value":"/ whether an overflow happened.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23362,"byte_end":23395,"line_start":711,"line_end":711,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23528,"byte_end":23531,"line_start":715,"line_end":715,"column_start":5,"column_end":8},"name":"pow","qualname":"::IsInteger::pow","value":"pub fn pow(Self, u32) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.\n","sig":null,"attributes":[{"value":"/ Raises self to the power of `exp`, using exponentiation by squaring.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23451,"byte_end":23523,"line_start":714,"line_end":714,"column_start":2,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24138,"byte_end":24148,"line_start":732,"line_end":732,"column_start":5,"column_end":15},"name":"div_euclid","qualname":"::IsInteger::div_euclid","value":"pub fn div_euclid(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Calculates the quotient of Euclidean division of self by rhs.","sig":null,"attributes":[{"value":"/ Calculates the quotient of Euclidean division of self by rhs.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23559,"byte_end":23624,"line_start":717,"line_end":717,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23626,"byte_end":23629,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ This computes the integer `n` such that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23631,"byte_end":23674,"line_start":719,"line_end":719,"column_start":2,"column_end":45}},{"value":"/ `self = n * rhs + self.rem_euclid(rhs)`, with","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23676,"byte_end":23725,"line_start":720,"line_end":720,"column_start":2,"column_end":51}},{"value":"/ `0 <= self.rem_euclid(rhs) < rhs`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23727,"byte_end":23765,"line_start":721,"line_end":721,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23767,"byte_end":23770,"line_start":722,"line_end":722,"column_start":2,"column_end":5}},{"value":"/ In other words, the result is `self / rhs` rounded to the integer `n`","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23772,"byte_end":23845,"line_start":723,"line_end":723,"column_start":2,"column_end":75}},{"value":"/ such that `self >= n * rhs`. If `self > 0`, this is equal to round","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23847,"byte_end":23917,"line_start":724,"line_end":724,"column_start":2,"column_end":72}},{"value":"/ towards zero (the default in Rust); if `self < 0`, this is equal to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23919,"byte_end":23990,"line_start":725,"line_end":725,"column_start":2,"column_end":73}},{"value":"/ round towards +/- infinity.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":23992,"byte_end":24023,"line_start":726,"line_end":726,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24025,"byte_end":24028,"line_start":727,"line_end":727,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24030,"byte_end":24042,"line_start":728,"line_end":728,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24044,"byte_end":24047,"line_start":729,"line_end":729,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0 or the division results in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24049,"byte_end":24118,"line_start":730,"line_end":730,"column_start":2,"column_end":71}},{"value":"/ overflow.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24120,"byte_end":24133,"line_start":731,"line_end":731,"column_start":2,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24537,"byte_end":24547,"line_start":744,"line_end":744,"column_start":5,"column_end":15},"name":"rem_euclid","qualname":"::IsInteger::rem_euclid","value":"pub fn rem_euclid(Self, Self) -> Self","parent":{"krate":0,"index":145},"children":[],"decl_id":null,"docs":" Calculates the least nonnegative remainder of `self (mod rhs)`.","sig":null,"attributes":[{"value":"/ Calculates the least nonnegative remainder of `self (mod rhs)`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24177,"byte_end":24244,"line_start":734,"line_end":734,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24246,"byte_end":24249,"line_start":735,"line_end":735,"column_start":2,"column_end":5}},{"value":"/ This is done as if by the Euclidean division algorithm -- given","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24251,"byte_end":24318,"line_start":736,"line_end":736,"column_start":2,"column_end":69}},{"value":"/ `r = self.rem_euclid(rhs)`, `self = rhs * self.div_euclid(rhs) + r`, and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24320,"byte_end":24396,"line_start":737,"line_end":737,"column_start":2,"column_end":78}},{"value":"/ `0 <= r < abs(rhs)`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24398,"byte_end":24422,"line_start":738,"line_end":738,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24424,"byte_end":24427,"line_start":739,"line_end":739,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24429,"byte_end":24441,"line_start":740,"line_end":740,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24443,"byte_end":24446,"line_start":741,"line_end":741,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `rhs` is 0 or the division results in","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24448,"byte_end":24517,"line_start":742,"line_end":742,"column_start":2,"column_end":71}},{"value":"/ overflow.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24519,"byte_end":24532,"line_start":743,"line_end":743,"column_start":2,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":260},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24632,"byte_end":24640,"line_start":748,"line_end":748,"column_start":11,"column_end":19},"name":"IsSigned","qualname":"::IsSigned","value":"IsSigned: IsInteger + Neg","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"decl_id":null,"docs":" Declare that a type is a signed integer.\n","sig":null,"attributes":[{"value":"/ Declare that a type is a signed integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24577,"byte_end":24621,"line_start":747,"line_end":747,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24756,"byte_end":24767,"line_start":751,"line_end":751,"column_start":5,"column_end":16},"name":"checked_abs","qualname":"::IsSigned::checked_abs","value":"pub fn checked_abs(Self) -> Option<Self>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Checked absolute value. Computes `self.abs()`, returning `None` if\n `self == MIN`.\n","sig":null,"attributes":[{"value":"/ Checked absolute value. Computes `self.abs()`, returning `None` if","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24661,"byte_end":24731,"line_start":749,"line_end":749,"column_start":2,"column_end":72}},{"value":"/ `self == MIN`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24733,"byte_end":24751,"line_start":750,"line_end":750,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25179,"byte_end":25191,"line_start":760,"line_end":760,"column_start":5,"column_end":17},"name":"wrapping_abs","qualname":"::IsSigned::wrapping_abs","value":"pub fn wrapping_abs(Self) -> Self","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Wrapping (modular) absolute value. Computes `self.abs()`, wrapping\n around at the boundary of the type.","sig":null,"attributes":[{"value":"/ Wrapping (modular) absolute value. Computes `self.abs()`, wrapping","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24793,"byte_end":24863,"line_start":753,"line_end":753,"column_start":2,"column_end":72}},{"value":"/ around at the boundary of the type.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24865,"byte_end":24904,"line_start":754,"line_end":754,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24906,"byte_end":24909,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ The only case where such wrapping can occur is when one takes the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24911,"byte_end":24980,"line_start":756,"line_end":756,"column_start":2,"column_end":71}},{"value":"/ absolute value of the negative minimal value for the type this is a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24982,"byte_end":25053,"line_start":757,"line_end":757,"column_start":2,"column_end":73}},{"value":"/ positive value that is too large to represent in the type. In such a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25055,"byte_end":25127,"line_start":758,"line_end":758,"column_start":2,"column_end":74}},{"value":"/ case, this function returns `MIN` itself.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25129,"byte_end":25174,"line_start":759,"line_end":759,"column_start":2,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25558,"byte_end":25573,"line_start":768,"line_end":768,"column_start":5,"column_end":20},"name":"overflowing_abs","qualname":"::IsSigned::overflowing_abs","value":"pub fn overflowing_abs(Self) -> (Self, bool)","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25209,"byte_end":25251,"line_start":762,"line_end":762,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25253,"byte_end":25256,"line_start":763,"line_end":763,"column_start":2,"column_end":5}},{"value":"/ Returns a tuple of the absolute version of self along with a boolean","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25258,"byte_end":25330,"line_start":764,"line_end":764,"column_start":2,"column_end":74}},{"value":"/ indicating whether an overflow happened. If self is the minimum value","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25332,"byte_end":25405,"line_start":765,"line_end":765,"column_start":2,"column_end":75}},{"value":"/ (e.g., iN::MIN for values of type iN), then the minimum value will be","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25407,"byte_end":25480,"line_start":766,"line_end":766,"column_start":2,"column_end":75}},{"value":"/ returned again and true will be returned for an overflow happening.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25482,"byte_end":25553,"line_start":767,"line_end":767,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25964,"byte_end":25967,"line_start":778,"line_end":778,"column_start":5,"column_end":8},"name":"abs","qualname":"::IsSigned::abs","value":"pub fn abs(Self) -> Self","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":"\n # Overflow behavior","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25642,"byte_end":25645,"line_start":771,"line_end":771,"column_start":2,"column_end":5}},{"value":"/ # Overflow behavior","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25647,"byte_end":25670,"line_start":772,"line_end":772,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25672,"byte_end":25675,"line_start":773,"line_end":773,"column_start":2,"column_end":5}},{"value":"/ The absolute value of `iN::min_value()` cannot be represented as an","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25677,"byte_end":25748,"line_start":774,"line_end":774,"column_start":2,"column_end":73}},{"value":"/ `iN`, and attempting to calculate it will cause an overflow. This means","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25750,"byte_end":25825,"line_start":775,"line_end":775,"column_start":2,"column_end":77}},{"value":"/ that code in debug mode will trigger a panic on this case and optimized","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25827,"byte_end":25902,"line_start":776,"line_end":776,"column_start":2,"column_end":77}},{"value":"/ code will return `iN::min_value()` without a panic.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25904,"byte_end":25959,"line_start":777,"line_end":777,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26152,"byte_end":26158,"line_start":785,"line_end":785,"column_start":5,"column_end":11},"name":"signum","qualname":"::IsSigned::signum","value":"pub fn signum(Self) -> Self","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns a number representing sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number representing sign of `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":25985,"byte_end":26034,"line_start":780,"line_end":780,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26036,"byte_end":26039,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ - `0` if the number is zero","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26041,"byte_end":26072,"line_start":782,"line_end":782,"column_start":2,"column_end":33}},{"value":"/ - `1` if the number is positive","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26074,"byte_end":26109,"line_start":783,"line_end":783,"column_start":2,"column_end":37}},{"value":"/ - `-1` if the number is negative","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26111,"byte_end":26147,"line_start":784,"line_end":784,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26273,"byte_end":26284,"line_start":789,"line_end":789,"column_start":5,"column_end":16},"name":"is_positive","qualname":"::IsSigned::is_positive","value":"pub fn is_positive(Self) -> bool","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive and `false` if the number is zero\n or negative.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is positive and `false` if the number is zero","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26176,"byte_end":26250,"line_start":787,"line_end":787,"column_start":2,"column_end":76}},{"value":"/ or negative.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26252,"byte_end":26268,"line_start":788,"line_end":788,"column_start":2,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26399,"byte_end":26410,"line_start":793,"line_end":793,"column_start":5,"column_end":16},"name":"is_negative","qualname":"::IsSigned::is_negative","value":"pub fn is_negative(Self) -> bool","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative and `false` if the number is zero\n or positive.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is negative and `false` if the number is zero","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26302,"byte_end":26376,"line_start":791,"line_end":791,"column_start":2,"column_end":76}},{"value":"/ or positive.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26378,"byte_end":26394,"line_start":792,"line_end":792,"column_start":2,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":268},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26487,"byte_end":26497,"line_start":797,"line_end":797,"column_start":11,"column_end":21},"name":"IsUnsigned","qualname":"::IsUnsigned","value":"IsUnsigned: IsInteger","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"decl_id":null,"docs":" Declare that a type is an unsigned integer.\n","sig":null,"attributes":[{"value":"/ Declare that a type is an unsigned integer.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26429,"byte_end":26476,"line_start":796,"line_end":796,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26578,"byte_end":26593,"line_start":799,"line_end":799,"column_start":5,"column_end":20},"name":"is_power_of_two","qualname":"::IsUnsigned::is_power_of_two","value":"pub fn is_power_of_two(Self) -> bool","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Returns `true` if and only if `self == 2^k` for some `k`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if and only if `self == 2^k` for some `k`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26512,"byte_end":26573,"line_start":798,"line_end":798,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26903,"byte_end":26920,"line_start":806,"line_end":806,"column_start":5,"column_end":22},"name":"next_power_of_two","qualname":"::IsUnsigned::next_power_of_two","value":"pub fn next_power_of_two(Self) -> Self","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Returns the smallest power of two greater than or equal to `self`.","sig":null,"attributes":[{"value":"/ Returns the smallest power of two greater than or equal to `self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26611,"byte_end":26681,"line_start":801,"line_end":801,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26683,"byte_end":26686,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ When return value overflows (i.e., `self > (1 << (N-1))` for type `uN`),","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26688,"byte_end":26764,"line_start":803,"line_end":803,"column_start":2,"column_end":78}},{"value":"/ it panics in debug mode and return value is wrapped to 0 in release mode","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26766,"byte_end":26842,"line_start":804,"line_end":804,"column_start":2,"column_end":78}},{"value":"/ (the only situation in which method can return 0).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26844,"byte_end":26898,"line_start":805,"line_end":805,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27158,"byte_end":27183,"line_start":811,"line_end":811,"column_start":5,"column_end":30},"name":"checked_next_power_of_two","qualname":"::IsUnsigned::checked_next_power_of_two","value":"pub fn checked_next_power_of_two(Self) -> Option<Self>","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Returns the smallest power of two greater than or equal to `n`. If the\n next power of two is greater than the type’s maximum value, `None` is\n returned, otherwise the power of two is wrapped in `Some`.\n","sig":null,"attributes":[{"value":"/ Returns the smallest power of two greater than or equal to `n`. If the","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26938,"byte_end":27012,"line_start":808,"line_end":808,"column_start":2,"column_end":76}},{"value":"/ next power of two is greater than the type’s maximum value, `None` is","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27014,"byte_end":27089,"line_start":809,"line_end":809,"column_start":2,"column_end":75}},{"value":"/ returned, otherwise the power of two is wrapped in `Some`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27091,"byte_end":27153,"line_start":810,"line_end":810,"column_start":2,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":272},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27272,"byte_end":27279,"line_start":815,"line_end":815,"column_start":11,"column_end":18},"name":"IsFloat","qualname":"::IsFloat","value":"IsFloat: IsNumber + LowerExp + UpperExp + Neg + From<f32> + From<i8> + From<i16> +\nFrom<u8> + From<u16>","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317}],"decl_id":null,"docs":" Declare that a type is a floating-point number.\n","sig":null,"attributes":[{"value":"/ Declare that a type is a floating-point number.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27210,"byte_end":27261,"line_start":814,"line_end":814,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":273},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27453,"byte_end":27456,"line_start":827,"line_end":827,"column_start":7,"column_end":10},"name":"Raw","qualname":"::IsFloat::Raw","value":"type Raw: IsUnsigned;","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" The unsigned integer type of the same width as `Self`.\n","sig":null,"attributes":[{"value":"/ The unsigned integer type of the same width as `Self`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27388,"byte_end":27446,"line_start":826,"line_end":826,"column_start":2,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":274},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27542,"byte_end":27547,"line_start":830,"line_end":830,"column_start":8,"column_end":13},"name":"RADIX","qualname":"::IsFloat::RADIX","value":"u32","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of `f32`.\n","sig":null,"attributes":[{"value":"/ The radix or base of the internal representation of `f32`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27472,"byte_end":27534,"line_start":829,"line_end":829,"column_start":2,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":275},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27607,"byte_end":27622,"line_start":833,"line_end":833,"column_start":8,"column_end":23},"name":"MANTISSA_DIGITS","qualname":"::IsFloat::MANTISSA_DIGITS","value":"u32","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Number of significant digits in base 2.\n","sig":null,"attributes":[{"value":"/ Number of significant digits in base 2.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27556,"byte_end":27599,"line_start":832,"line_end":832,"column_start":2,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":276},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27695,"byte_end":27701,"line_start":836,"line_end":836,"column_start":8,"column_end":14},"name":"DIGITS","qualname":"::IsFloat::DIGITS","value":"u32","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Approximate number of significant digits in base 10.\n","sig":null,"attributes":[{"value":"/ Approximate number of significant digits in base 10.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27631,"byte_end":27687,"line_start":835,"line_end":835,"column_start":2,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":277},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27925,"byte_end":27932,"line_start":844,"line_end":844,"column_start":8,"column_end":15},"name":"EPSILON","qualname":"::IsFloat::EPSILON","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" [Machine epsilon] value for `f32`.","sig":null,"attributes":[{"value":"/ [Machine epsilon] value for `f32`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27710,"byte_end":27748,"line_start":838,"line_end":838,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27750,"byte_end":27753,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ This is the difference between `1.0` and the next larger representable","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27755,"byte_end":27829,"line_start":840,"line_end":840,"column_start":2,"column_end":76}},{"value":"/ number.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27831,"byte_end":27842,"line_start":841,"line_end":841,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27844,"byte_end":27847,"line_start":842,"line_end":842,"column_start":2,"column_end":5}},{"value":"/ [Machine epsilon]: https://en.wikipedia.org/wiki/Machine_epsilon","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27849,"byte_end":27917,"line_start":843,"line_end":843,"column_start":2,"column_end":70}}]},{"kind":"Const","id":{"krate":0,"index":278},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27982,"byte_end":27985,"line_start":847,"line_end":847,"column_start":8,"column_end":11},"name":"MIN","qualname":"::IsFloat::MIN","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Smallest finite `f32` value.\n","sig":null,"attributes":[{"value":"/ Smallest finite `f32` value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27942,"byte_end":27974,"line_start":846,"line_end":846,"column_start":2,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":279},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28044,"byte_end":28056,"line_start":850,"line_end":850,"column_start":8,"column_end":20},"name":"MIN_POSITIVE","qualname":"::IsFloat::MIN_POSITIVE","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Smallest positive normal `f32` value.\n","sig":null,"attributes":[{"value":"/ Smallest positive normal `f32` value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27995,"byte_end":28036,"line_start":849,"line_end":849,"column_start":2,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":280},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28105,"byte_end":28108,"line_start":853,"line_end":853,"column_start":8,"column_end":11},"name":"MAX","qualname":"::IsFloat::MAX","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Largest finite `f32` value.\n","sig":null,"attributes":[{"value":"/ Largest finite `f32` value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28066,"byte_end":28097,"line_start":852,"line_end":852,"column_start":2,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":281},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28195,"byte_end":28202,"line_start":856,"line_end":856,"column_start":8,"column_end":15},"name":"MIN_EXP","qualname":"::IsFloat::MIN_EXP","value":"i32","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ One greater than the minimum possible normal power of 2 exponent.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28118,"byte_end":28187,"line_start":855,"line_end":855,"column_start":2,"column_end":71}}]},{"kind":"Const","id":{"krate":0,"index":282},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28260,"byte_end":28267,"line_start":859,"line_end":859,"column_start":8,"column_end":15},"name":"MAX_EXP","qualname":"::IsFloat::MAX_EXP","value":"i32","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Maximum possible power of 2 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible power of 2 exponent.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28211,"byte_end":28252,"line_start":858,"line_end":858,"column_start":2,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":283},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28333,"byte_end":28343,"line_start":862,"line_end":862,"column_start":8,"column_end":18},"name":"MIN_10_EXP","qualname":"::IsFloat::MIN_10_EXP","value":"i32","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Minimum possible normal power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Minimum possible normal power of 10 exponent.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28276,"byte_end":28325,"line_start":861,"line_end":861,"column_start":2,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":284},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28402,"byte_end":28412,"line_start":865,"line_end":865,"column_start":8,"column_end":18},"name":"MAX_10_EXP","qualname":"::IsFloat::MAX_10_EXP","value":"i32","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Maximum possible power of 10 exponent.\n","sig":null,"attributes":[{"value":"/ Maximum possible power of 10 exponent.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28352,"byte_end":28394,"line_start":864,"line_end":864,"column_start":2,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":285},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28452,"byte_end":28455,"line_start":868,"line_end":868,"column_start":8,"column_end":11},"name":"NAN","qualname":"::IsFloat::NAN","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Not a Number (NaN).\n","sig":null,"attributes":[{"value":"/ Not a Number (NaN).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28421,"byte_end":28444,"line_start":867,"line_end":867,"column_start":2,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":286},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28492,"byte_end":28500,"line_start":871,"line_end":871,"column_start":8,"column_end":16},"name":"INFINITY","qualname":"::IsFloat::INFINITY","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Infinity (∞).\n","sig":null,"attributes":[{"value":"/ Infinity (∞).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28465,"byte_end":28484,"line_start":870,"line_end":870,"column_start":2,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":287},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28549,"byte_end":28561,"line_start":874,"line_end":874,"column_start":8,"column_end":20},"name":"NEG_INFINITY","qualname":"::IsFloat::NEG_INFINITY","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Negative infinity (−∞).\n","sig":null,"attributes":[{"value":"/ Negative infinity (−∞).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28510,"byte_end":28541,"line_start":873,"line_end":873,"column_start":2,"column_end":29}}]},{"kind":"Const","id":{"krate":0,"index":288},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28608,"byte_end":28610,"line_start":877,"line_end":877,"column_start":8,"column_end":10},"name":"PI","qualname":"::IsFloat::PI","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"/ Archimedes' constant (π)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28571,"byte_end":28600,"line_start":876,"line_end":876,"column_start":2,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":289},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28636,"byte_end":28645,"line_start":880,"line_end":880,"column_start":8,"column_end":17},"name":"FRAC_PI_2","qualname":"::IsFloat::FRAC_PI_2","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" π/2\n","sig":null,"attributes":[{"value":"/ π/2","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28620,"byte_end":28628,"line_start":879,"line_end":879,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":290},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28671,"byte_end":28680,"line_start":883,"line_end":883,"column_start":8,"column_end":17},"name":"FRAC_PI_3","qualname":"::IsFloat::FRAC_PI_3","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" π/3\n","sig":null,"attributes":[{"value":"/ π/3","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28655,"byte_end":28663,"line_start":882,"line_end":882,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":291},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28706,"byte_end":28715,"line_start":886,"line_end":886,"column_start":8,"column_end":17},"name":"FRAC_PI_4","qualname":"::IsFloat::FRAC_PI_4","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" π/4\n","sig":null,"attributes":[{"value":"/ π/4","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28690,"byte_end":28698,"line_start":885,"line_end":885,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":292},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28741,"byte_end":28750,"line_start":889,"line_end":889,"column_start":8,"column_end":17},"name":"FRAC_PI_6","qualname":"::IsFloat::FRAC_PI_6","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" π/6\n","sig":null,"attributes":[{"value":"/ π/6","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28725,"byte_end":28733,"line_start":888,"line_end":888,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":293},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28776,"byte_end":28785,"line_start":892,"line_end":892,"column_start":8,"column_end":17},"name":"FRAC_PI_8","qualname":"::IsFloat::FRAC_PI_8","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" π/8\n","sig":null,"attributes":[{"value":"/ π/8","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28760,"byte_end":28768,"line_start":891,"line_end":891,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":294},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28811,"byte_end":28820,"line_start":895,"line_end":895,"column_start":8,"column_end":17},"name":"FRAC_1_PI","qualname":"::IsFloat::FRAC_1_PI","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" 1/π\n","sig":null,"attributes":[{"value":"/ 1/π","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28795,"byte_end":28803,"line_start":894,"line_end":894,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":295},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28846,"byte_end":28855,"line_start":898,"line_end":898,"column_start":8,"column_end":17},"name":"FRAC_2_PI","qualname":"::IsFloat::FRAC_2_PI","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" 2/π\n","sig":null,"attributes":[{"value":"/ 2/π","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28830,"byte_end":28838,"line_start":897,"line_end":897,"column_start":2,"column_end":9}}]},{"kind":"Const","id":{"krate":0,"index":296},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28887,"byte_end":28901,"line_start":901,"line_end":901,"column_start":8,"column_end":22},"name":"FRAC_2_SQRT_PI","qualname":"::IsFloat::FRAC_2_SQRT_PI","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" 2/sqrt(π)\n","sig":null,"attributes":[{"value":"/ 2/sqrt(π)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28865,"byte_end":28879,"line_start":900,"line_end":900,"column_start":2,"column_end":15}}]},{"kind":"Const","id":{"krate":0,"index":297},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28930,"byte_end":28936,"line_start":904,"line_end":904,"column_start":8,"column_end":14},"name":"SQRT_2","qualname":"::IsFloat::SQRT_2","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" sqrt(2)\n","sig":null,"attributes":[{"value":"/ sqrt(2)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28911,"byte_end":28922,"line_start":903,"line_end":903,"column_start":2,"column_end":13}}]},{"kind":"Const","id":{"krate":0,"index":298},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28967,"byte_end":28980,"line_start":907,"line_end":907,"column_start":8,"column_end":21},"name":"FRAC_1_SQRT_2","qualname":"::IsFloat::FRAC_1_SQRT_2","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" 1/sqrt(2)\n","sig":null,"attributes":[{"value":"/ 1/sqrt(2)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28946,"byte_end":28959,"line_start":906,"line_end":906,"column_start":2,"column_end":15}}]},{"kind":"Const","id":{"krate":0,"index":299},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":29022,"byte_end":29023,"line_start":910,"line_end":910,"column_start":8,"column_end":9},"name":"E","qualname":"::IsFloat::E","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Euler’s number (e)\n","sig":null,"attributes":[{"value":"/ Euler’s number (e)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":28990,"byte_end":29014,"line_start":909,"line_end":909,"column_start":2,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":300},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":29063,"byte_end":29069,"line_start":913,"line_end":913,"column_start":8,"column_end":14},"name":"LOG2_E","qualname":"::IsFloat::LOG2_E","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" log<sub>2</sub>(e)\n","sig":null,"attributes":[{"value":"/ log<sub>2</sub>(e)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":29033,"byte_end":29055,"line_start":912,"line_end":912,"column_start":2,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":301},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":29110,"byte_end":29117,"line_start":916,"line_end":916,"column_start":8,"column_end":15},"name":"LOG10_E","qualname":"::IsFloat::LOG10_E","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" log<sub>10</sub>(e)\n","sig":null,"attributes":[{"value":"/ log<sub>10</sub>(e)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":29079,"byte_end":29102,"line_start":915,"line_end":915,"column_start":2,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":302},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":29144,"byte_end":29148,"line_start":919,"line_end":919,"column_start":8,"column_end":12},"name":"LN_2","qualname":"::IsFloat::LN_2","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" ln(2)\n","sig":null,"attributes":[{"value":"/ ln(2)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":29127,"byte_end":29136,"line_start":918,"line_end":918,"column_start":2,"column_end":11}}]},{"kind":"Const","id":{"krate":0,"index":303},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":29176,"byte_end":29181,"line_start":922,"line_end":922,"column_start":8,"column_end":13},"name":"LN_10","qualname":"::IsFloat::LN_10","value":"Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" ln(10)\n","sig":null,"attributes":[{"value":"/ ln(10)","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":29158,"byte_end":29168,"line_start":921,"line_end":921,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":35754,"byte_end":35760,"line_start":1129,"line_end":1129,"column_start":5,"column_end":11},"name":"is_nan","qualname":"::IsFloat::is_nan","value":"pub fn is_nan(Self) -> bool","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this value is `NaN`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":35707,"byte_end":35749,"line_start":1128,"line_end":1128,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":35886,"byte_end":35897,"line_start":1133,"line_end":1133,"column_start":5,"column_end":16},"name":"is_infinite","qualname":"::IsFloat::is_infinite","value":"pub fn is_infinite(Self) -> bool","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Returns `true` if this value is positive infinity or negative infinity,\n and `false` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this value is positive infinity or negative infinity,","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":35778,"byte_end":35853,"line_start":1131,"line_end":1131,"column_start":2,"column_end":77}},{"value":"/ and `false` otherwise.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":35855,"byte_end":35881,"line_start":1132,"line_end":1132,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":35984,"byte_end":35993,"line_start":1136,"line_end":1136,"column_start":5,"column_end":14},"name":"is_finite","qualname":"::IsFloat::is_finite","value":"pub fn is_finite(Self) -> bool","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if this number is neither infinite nor `NaN`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":35915,"byte_end":35979,"line_start":1135,"line_end":1135,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36172,"byte_end":36181,"line_start":1142,"line_end":1142,"column_start":5,"column_end":14},"name":"is_normal","qualname":"::IsFloat::is_normal","value":"pub fn is_normal(Self) -> bool","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, [subnormal], or\n `NaN`.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, [subnormal], or","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36011,"byte_end":36086,"line_start":1138,"line_end":1138,"column_start":2,"column_end":77}},{"value":"/ `NaN`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36088,"byte_end":36098,"line_start":1139,"line_end":1139,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36100,"byte_end":36103,"line_start":1140,"line_end":1140,"column_start":2,"column_end":5}},{"value":"/ [subnormal]: https://en.wixipedia.org/wiki/Denormal_number","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36105,"byte_end":36167,"line_start":1141,"line_end":1141,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36374,"byte_end":36382,"line_start":1147,"line_end":1147,"column_start":5,"column_end":13},"name":"classify","qualname":"::IsFloat::classify","value":"pub fn classify(Self) -> FpCategory","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.\n","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number. If only one property","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36199,"byte_end":36274,"line_start":1144,"line_end":1144,"column_start":2,"column_end":77}},{"value":"/ is going to be tested, it is generally faster to use the specific","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36276,"byte_end":36345,"line_start":1145,"line_end":1145,"column_start":2,"column_end":71}},{"value":"/ predicate instead.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36347,"byte_end":36369,"line_start":1146,"line_end":1146,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36536,"byte_end":36552,"line_start":1151,"line_end":1151,"column_start":5,"column_end":21},"name":"is_sign_positive","qualname":"::IsFloat::is_sign_positive","value":"pub fn is_sign_positive(Self) -> bool","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Returns `true` if `self` has a positive sign, including `+0.0`, `NaN`s\n with positive sign bit and positive infinity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has a positive sign, including `+0.0`, `NaN`s","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36406,"byte_end":36480,"line_start":1149,"line_end":1149,"column_start":2,"column_end":76}},{"value":"/ with positive sign bit and positive infinity.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36482,"byte_end":36531,"line_start":1150,"line_end":1150,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36700,"byte_end":36716,"line_start":1155,"line_end":1155,"column_start":5,"column_end":21},"name":"is_sign_negative","qualname":"::IsFloat::is_sign_negative","value":"pub fn is_sign_negative(Self) -> bool","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Returns `true` if `self` has a negative sign, including `-0.0`, `NaN`s\n with negative sign bit and negative infinity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has a negative sign, including `-0.0`, `NaN`s","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36570,"byte_end":36644,"line_start":1153,"line_end":1153,"column_start":2,"column_end":76}},{"value":"/ with negative sign bit and negative infinity.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36646,"byte_end":36695,"line_start":1154,"line_end":1154,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36793,"byte_end":36798,"line_start":1158,"line_end":1158,"column_start":5,"column_end":10},"name":"recip","qualname":"::IsFloat::recip","value":"pub fn recip(Self) -> Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Takes the reciprocal (inverse) of a number, `1/x`.\n","sig":null,"attributes":[{"value":"/ Takes the reciprocal (inverse) of a number, `1/x`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36734,"byte_end":36788,"line_start":1157,"line_end":1157,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36853,"byte_end":36863,"line_start":1161,"line_end":1161,"column_start":5,"column_end":15},"name":"to_degrees","qualname":"::IsFloat::to_degrees","value":"pub fn to_degrees(Self) -> Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Converts radians to degrees.\n","sig":null,"attributes":[{"value":"/ Converts radians to degrees.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36816,"byte_end":36848,"line_start":1160,"line_end":1160,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36918,"byte_end":36928,"line_start":1164,"line_end":1164,"column_start":5,"column_end":15},"name":"to_radians","qualname":"::IsFloat::to_radians","value":"pub fn to_radians(Self) -> Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Converts degrees to radians.\n","sig":null,"attributes":[{"value":"/ Converts degrees to radians.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36881,"byte_end":36913,"line_start":1163,"line_end":1163,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36994,"byte_end":36997,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8},"name":"max","qualname":"::IsFloat::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.\n","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":36946,"byte_end":36989,"line_start":1166,"line_end":1166,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37076,"byte_end":37079,"line_start":1170,"line_end":1170,"column_start":5,"column_end":8},"name":"min","qualname":"::IsFloat::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.\n","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37028,"byte_end":37071,"line_start":1169,"line_end":1169,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37503,"byte_end":37510,"line_start":1182,"line_end":1182,"column_start":5,"column_end":12},"name":"to_bits","qualname":"::IsFloat::to_bits","value":"pub fn to_bits(Self) -> Self::Raw","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Raw transmutation to `u32`.","sig":null,"attributes":[{"value":"/ Raw transmutation to `u32`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37110,"byte_end":37141,"line_start":1172,"line_end":1172,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37143,"byte_end":37146,"line_start":1173,"line_end":1173,"column_start":2,"column_end":5}},{"value":"/ This is currently identical to `transmute::<f32, u32>(self)` on all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37148,"byte_end":37219,"line_start":1174,"line_end":1174,"column_start":2,"column_end":73}},{"value":"/ platforms.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37221,"byte_end":37235,"line_start":1175,"line_end":1175,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37237,"byte_end":37240,"line_start":1176,"line_end":1176,"column_start":2,"column_end":5}},{"value":"/ See `from_bits` for some discussion of the portability of this operation","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37242,"byte_end":37318,"line_start":1177,"line_end":1177,"column_start":2,"column_end":78}},{"value":"/ (there are almost no issues).","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37320,"byte_end":37353,"line_start":1178,"line_end":1178,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37355,"byte_end":37358,"line_start":1179,"line_end":1179,"column_start":2,"column_end":5}},{"value":"/ Note that this function is distinct from `as` casting, which attempts to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37360,"byte_end":37436,"line_start":1180,"line_end":1180,"column_start":2,"column_end":78}},{"value":"/ preserve the *numeric* value, and not the bitwise value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37438,"byte_end":37498,"line_start":1181,"line_end":1181,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39024,"byte_end":39033,"line_start":1214,"line_end":1214,"column_start":5,"column_end":14},"name":"from_bits","qualname":"::IsFloat::from_bits","value":"pub fn from_bits(Self::Raw) -> Self","parent":{"krate":0,"index":272},"children":[],"decl_id":null,"docs":" Raw transmutation from `u32`.","sig":null,"attributes":[{"value":"/ Raw transmutation from `u32`.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37533,"byte_end":37566,"line_start":1184,"line_end":1184,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37568,"byte_end":37571,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ This is currently identical to `transmute::<u32, f32>(v)` on all","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37573,"byte_end":37641,"line_start":1186,"line_end":1186,"column_start":2,"column_end":70}},{"value":"/ platforms. It turns out this is incredibly portable, for two reasons:","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37643,"byte_end":37716,"line_start":1187,"line_end":1187,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37718,"byte_end":37721,"line_start":1188,"line_end":1188,"column_start":2,"column_end":5}},{"value":"/ - Floats and Ints have the same endianness on all supported platforms.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37723,"byte_end":37797,"line_start":1189,"line_end":1189,"column_start":2,"column_end":76}},{"value":"/ - IEEE-754 very precisely specifies the bit layout of floats.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37799,"byte_end":37864,"line_start":1190,"line_end":1190,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37866,"byte_end":37869,"line_start":1191,"line_end":1191,"column_start":2,"column_end":5}},{"value":"/ However there is one caveat: prior to the 2008 version of IEEE-754, how","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37871,"byte_end":37946,"line_start":1192,"line_end":1192,"column_start":2,"column_end":77}},{"value":"/ to interpret the NaN signaling bit wasn't actually specified. Most","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":37948,"byte_end":38018,"line_start":1193,"line_end":1193,"column_start":2,"column_end":72}},{"value":"/ platforms (notably x86 and ARM) picked the interpretation that was","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38020,"byte_end":38090,"line_start":1194,"line_end":1194,"column_start":2,"column_end":72}},{"value":"/ ultimately standardized in 2008, but some didn't (notably MIPS). As a","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38092,"byte_end":38165,"line_start":1195,"line_end":1195,"column_start":2,"column_end":75}},{"value":"/ result, all signaling NaNs on MIPS are quiet NaNs on x86, and","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38167,"byte_end":38232,"line_start":1196,"line_end":1196,"column_start":2,"column_end":67}},{"value":"/ vice-versa.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38234,"byte_end":38249,"line_start":1197,"line_end":1197,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38251,"byte_end":38254,"line_start":1198,"line_end":1198,"column_start":2,"column_end":5}},{"value":"/ Rather than trying to preserve signaling-ness cross-platform, this","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38256,"byte_end":38326,"line_start":1199,"line_end":1199,"column_start":2,"column_end":72}},{"value":"/ implementation favors preserving the exact bits. This means that","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38328,"byte_end":38396,"line_start":1200,"line_end":1200,"column_start":2,"column_end":70}},{"value":"/ any payloads encoded in NaNs will be preserved even if the result of","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38398,"byte_end":38470,"line_start":1201,"line_end":1201,"column_start":2,"column_end":74}},{"value":"/ this method is sent over the network from an x86 machine to a MIPS one.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38472,"byte_end":38547,"line_start":1202,"line_end":1202,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38549,"byte_end":38552,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ If the results of this method are only manipulated by the same","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38554,"byte_end":38620,"line_start":1204,"line_end":1204,"column_start":2,"column_end":68}},{"value":"/ architecture that produced them, then there is no portability concern.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38622,"byte_end":38696,"line_start":1205,"line_end":1205,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38698,"byte_end":38701,"line_start":1206,"line_end":1206,"column_start":2,"column_end":5}},{"value":"/ If the input isn't NaN, then there is no portability concern.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38703,"byte_end":38768,"line_start":1207,"line_end":1207,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38770,"byte_end":38773,"line_start":1208,"line_end":1208,"column_start":2,"column_end":5}},{"value":"/ If you don't care about signalingness (very likely), then there is no","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38775,"byte_end":38848,"line_start":1209,"line_end":1209,"column_start":2,"column_end":75}},{"value":"/ portability concern.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38850,"byte_end":38874,"line_start":1210,"line_end":1210,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38876,"byte_end":38879,"line_start":1211,"line_end":1211,"column_start":2,"column_end":5}},{"value":"/ Note that this function is distinct from `as` casting, which attempts to","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38881,"byte_end":38957,"line_start":1212,"line_end":1212,"column_start":2,"column_end":78}},{"value":"/ preserve the *numeric* value, and not the bitwise value.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":38959,"byte_end":39019,"line_start":1213,"line_end":1213,"column_start":2,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":318},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39125,"byte_end":39128,"line_start":1218,"line_end":1218,"column_start":11,"column_end":14},"name":"Is8","qualname":"::Is8","value":"Is8: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly eight bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly eight bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39063,"byte_end":39114,"line_start":1217,"line_end":1217,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":319},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39207,"byte_end":39211,"line_start":1221,"line_end":1221,"column_start":11,"column_end":15},"name":"Is16","qualname":"::Is16","value":"Is16: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly sixteen bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly sixteen bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39143,"byte_end":39196,"line_start":1220,"line_end":1220,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":320},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39293,"byte_end":39297,"line_start":1224,"line_end":1224,"column_start":11,"column_end":15},"name":"Is32","qualname":"::Is32","value":"Is32: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly thirty-two bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly thirty-two bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39226,"byte_end":39282,"line_start":1223,"line_end":1223,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":321},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39379,"byte_end":39383,"line_start":1227,"line_end":1227,"column_start":11,"column_end":15},"name":"Is64","qualname":"::Is64","value":"Is64: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly sixty-four bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly sixty-four bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39312,"byte_end":39368,"line_start":1226,"line_end":1226,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":322},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39479,"byte_end":39484,"line_start":1230,"line_end":1230,"column_start":11,"column_end":16},"name":"Is128","qualname":"::Is128","value":"Is128: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is exactly one hundred twenty-eight bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is exactly one hundred twenty-eight bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39398,"byte_end":39468,"line_start":1229,"line_end":1229,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":323},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39561,"byte_end":39569,"line_start":1233,"line_end":1233,"column_start":11,"column_end":19},"name":"AtLeast8","qualname":"::AtLeast8","value":"AtLeast8: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is eight or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is eight or more bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39499,"byte_end":39550,"line_start":1232,"line_end":1232,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":324},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39648,"byte_end":39657,"line_start":1236,"line_end":1236,"column_start":11,"column_end":20},"name":"AtLeast16","qualname":"::AtLeast16","value":"AtLeast16: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is sixteen or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is sixteen or more bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39584,"byte_end":39637,"line_start":1235,"line_end":1235,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":325},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39739,"byte_end":39748,"line_start":1239,"line_end":1239,"column_start":11,"column_end":20},"name":"AtLeast32","qualname":"::AtLeast32","value":"AtLeast32: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is thirty-two or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is thirty-two or more bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39672,"byte_end":39728,"line_start":1238,"line_end":1238,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":326},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39830,"byte_end":39839,"line_start":1242,"line_end":1242,"column_start":11,"column_end":20},"name":"AtLeast64","qualname":"::AtLeast64","value":"AtLeast64: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is sixty-four or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is sixty-four or more bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39763,"byte_end":39819,"line_start":1241,"line_end":1241,"column_start":1,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":327},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39935,"byte_end":39945,"line_start":1245,"line_end":1245,"column_start":11,"column_end":21},"name":"AtLeast128","qualname":"::AtLeast128","value":"AtLeast128: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is one hundred twenty-eight or more bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is one hundred twenty-eight or more bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39854,"byte_end":39924,"line_start":1244,"line_end":1244,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":328},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40023,"byte_end":40030,"line_start":1248,"line_end":1248,"column_start":11,"column_end":18},"name":"AtMost8","qualname":"::AtMost8","value":"AtMost8: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is eight or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is eight or fewer bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39960,"byte_end":40012,"line_start":1247,"line_end":1247,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":329},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40110,"byte_end":40118,"line_start":1251,"line_end":1251,"column_start":11,"column_end":19},"name":"AtMost16","qualname":"::AtMost16","value":"AtMost16: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is sixteen or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is sixteen or fewer bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40045,"byte_end":40099,"line_start":1250,"line_end":1250,"column_start":1,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":330},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40201,"byte_end":40209,"line_start":1254,"line_end":1254,"column_start":11,"column_end":19},"name":"AtMost32","qualname":"::AtMost32","value":"AtMost32: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is thirty-two or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is thirty-two or fewer bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40133,"byte_end":40190,"line_start":1253,"line_end":1253,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":331},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40292,"byte_end":40300,"line_start":1257,"line_end":1257,"column_start":11,"column_end":19},"name":"AtMost64","qualname":"::AtMost64","value":"AtMost64: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is sixty-four or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is sixty-four or fewer bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40224,"byte_end":40281,"line_start":1256,"line_end":1256,"column_start":1,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":332},"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40397,"byte_end":40406,"line_start":1260,"line_end":1260,"column_start":11,"column_end":20},"name":"AtMost128","qualname":"::AtMost128","value":"AtMost128: IsNumber","parent":null,"children":[],"decl_id":null,"docs":" Declare that a type is one hundred twenty-eight or fewer bits wide.\n","sig":null,"attributes":[{"value":"/ Declare that a type is one hundred twenty-eight or fewer bits wide.","span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40315,"byte_end":40386,"line_start":1259,"line_end":1259,"column_start":1,"column_end":72}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2318,"byte_end":2323,"line_start":99,"line_end":99,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":2994},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2327,"byte_end":2331,"line_start":100,"line_end":100,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2989},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2335,"byte_end":2339,"line_start":101,"line_end":101,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":3001},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2343,"byte_end":2348,"line_start":102,"line_end":102,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":3030},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2352,"byte_end":2357,"line_start":103,"line_end":103,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":2610},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2361,"byte_end":2365,"line_start":104,"line_end":104,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2999},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2369,"byte_end":2376,"line_start":105,"line_end":105,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2967},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2380,"byte_end":2387,"line_start":106,"line_end":106,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":11819},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2400,"byte_end":2409,"line_start":108,"line_end":108,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2640},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2419,"byte_end":2429,"line_start":109,"line_end":109,"column_start":4,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":2687},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2448,"byte_end":2453,"line_start":111,"line_end":111,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":9293},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2457,"byte_end":2464,"line_start":112,"line_end":112,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":9300},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2478,"byte_end":2485,"line_start":114,"line_end":114,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":7342},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2503,"byte_end":2510,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":7342},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2524,"byte_end":2527,"line_start":116,"line_end":116,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":7338},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2545,"byte_end":2548,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":7338},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2579,"byte_end":2582,"line_start":119,"line_end":119,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3056},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2615,"byte_end":2618,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3056},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2647,"byte_end":2656,"line_start":121,"line_end":121,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3087},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2674,"byte_end":2683,"line_start":122,"line_end":122,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3087},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2697,"byte_end":2700,"line_start":123,"line_end":123,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3061},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2733,"byte_end":2736,"line_start":124,"line_end":124,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3061},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2765,"byte_end":2774,"line_start":125,"line_end":125,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3091},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2792,"byte_end":2801,"line_start":126,"line_end":126,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3091},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2815,"byte_end":2818,"line_start":127,"line_end":127,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3066},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2851,"byte_end":2854,"line_start":128,"line_end":128,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3066},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2883,"byte_end":2892,"line_start":129,"line_end":129,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3095},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2910,"byte_end":2919,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3095},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2933,"byte_end":2936,"line_start":131,"line_end":131,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3071},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":2969,"byte_end":2972,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3071},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3001,"byte_end":3010,"line_start":133,"line_end":133,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3099},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3028,"byte_end":3037,"line_start":134,"line_end":134,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3099},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3051,"byte_end":3054,"line_start":135,"line_end":135,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3077},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3087,"byte_end":3090,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3077},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3119,"byte_end":3128,"line_start":137,"line_end":137,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3103},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":3146,"byte_end":3155,"line_start":138,"line_end":138,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3103},"to":{"krate":0,"index":124}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4298,"byte_end":4306,"line_start":175,"line_end":175,"column_start":2,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4310,"byte_end":4314,"line_start":176,"line_end":176,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":9499},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4318,"byte_end":4320,"line_start":177,"line_end":177,"column_start":4,"column_end":6},"kind":"SuperTrait","from":{"krate":1,"index":2645},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4324,"byte_end":4327,"line_start":178,"line_end":178,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":2676},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4331,"byte_end":4337,"line_start":179,"line_end":179,"column_start":4,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":9304},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4341,"byte_end":4349,"line_start":180,"line_end":180,"column_start":4,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":9306},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4353,"byte_end":4361,"line_start":181,"line_end":181,"column_start":4,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":9308},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4365,"byte_end":4370,"line_start":182,"line_end":182,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":9302},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4374,"byte_end":4380,"line_start":183,"line_end":183,"column_start":4,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3112},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4413,"byte_end":4419,"line_start":184,"line_end":184,"column_start":12,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3112},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4448,"byte_end":4460,"line_start":185,"line_end":185,"column_start":4,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3139},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4478,"byte_end":4490,"line_start":186,"line_end":186,"column_start":12,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3139},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4504,"byte_end":4509,"line_start":187,"line_end":187,"column_start":4,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":3117},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4542,"byte_end":4547,"line_start":188,"line_end":188,"column_start":12,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":3117},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4576,"byte_end":4587,"line_start":189,"line_end":189,"column_start":4,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3143},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4605,"byte_end":4616,"line_start":190,"line_end":190,"column_start":12,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":3143},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4630,"byte_end":4636,"line_start":191,"line_end":191,"column_start":4,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":3122},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4669,"byte_end":4675,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"kind":"SuperTrait","from":{"krate":1,"index":3122},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4704,"byte_end":4716,"line_start":193,"line_end":193,"column_start":4,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":3147},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4734,"byte_end":4746,"line_start":194,"line_end":194,"column_start":12,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":3147},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4760,"byte_end":4763,"line_start":195,"line_end":195,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3108},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4782,"byte_end":4789,"line_start":196,"line_end":196,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4797,"byte_end":4804,"line_start":197,"line_end":197,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4812,"byte_end":4819,"line_start":198,"line_end":198,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4828,"byte_end":4835,"line_start":199,"line_end":199,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4844,"byte_end":4851,"line_start":200,"line_end":200,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4860,"byte_end":4867,"line_start":201,"line_end":201,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4876,"byte_end":4883,"line_start":202,"line_end":202,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4892,"byte_end":4899,"line_start":203,"line_end":203,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4908,"byte_end":4915,"line_start":204,"line_end":204,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4925,"byte_end":4932,"line_start":205,"line_end":205,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4942,"byte_end":4949,"line_start":206,"line_end":206,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4960,"byte_end":4967,"line_start":207,"line_end":207,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2902},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4978,"byte_end":4985,"line_start":208,"line_end":208,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":4993,"byte_end":5000,"line_start":209,"line_end":209,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5008,"byte_end":5015,"line_start":210,"line_end":210,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5024,"byte_end":5031,"line_start":211,"line_end":211,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5040,"byte_end":5047,"line_start":212,"line_end":212,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5056,"byte_end":5063,"line_start":213,"line_end":213,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5072,"byte_end":5079,"line_start":214,"line_end":214,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5088,"byte_end":5095,"line_start":215,"line_end":215,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5104,"byte_end":5111,"line_start":216,"line_end":216,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5121,"byte_end":5128,"line_start":217,"line_end":217,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5138,"byte_end":5145,"line_start":218,"line_end":218,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5156,"byte_end":5163,"line_start":219,"line_end":219,"column_start":4,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2898},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5174,"byte_end":5177,"line_start":220,"line_end":220,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5208,"byte_end":5211,"line_start":221,"line_end":221,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5238,"byte_end":5247,"line_start":222,"line_end":222,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5263,"byte_end":5272,"line_start":223,"line_end":223,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5284,"byte_end":5287,"line_start":224,"line_end":224,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5318,"byte_end":5321,"line_start":225,"line_end":225,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5348,"byte_end":5357,"line_start":226,"line_end":226,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5373,"byte_end":5382,"line_start":227,"line_end":227,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5394,"byte_end":5397,"line_start":228,"line_end":228,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5428,"byte_end":5431,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5458,"byte_end":5467,"line_start":230,"line_end":230,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5483,"byte_end":5492,"line_start":231,"line_end":231,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5504,"byte_end":5507,"line_start":232,"line_end":232,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5538,"byte_end":5541,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5568,"byte_end":5577,"line_start":234,"line_end":234,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5593,"byte_end":5602,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5614,"byte_end":5617,"line_start":236,"line_end":236,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5649,"byte_end":5652,"line_start":237,"line_end":237,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5680,"byte_end":5689,"line_start":238,"line_end":238,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5706,"byte_end":5715,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5728,"byte_end":5731,"line_start":240,"line_end":240,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5763,"byte_end":5766,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5794,"byte_end":5803,"line_start":242,"line_end":242,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5820,"byte_end":5829,"line_start":243,"line_end":243,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5842,"byte_end":5845,"line_start":244,"line_end":244,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5877,"byte_end":5880,"line_start":245,"line_end":245,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5908,"byte_end":5917,"line_start":246,"line_end":246,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5934,"byte_end":5943,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5956,"byte_end":5959,"line_start":248,"line_end":248,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":5991,"byte_end":5994,"line_start":249,"line_end":249,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6022,"byte_end":6031,"line_start":250,"line_end":250,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6048,"byte_end":6057,"line_start":251,"line_end":251,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6070,"byte_end":6073,"line_start":252,"line_end":252,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6105,"byte_end":6108,"line_start":253,"line_end":253,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6136,"byte_end":6145,"line_start":254,"line_end":254,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6162,"byte_end":6171,"line_start":255,"line_end":255,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6184,"byte_end":6187,"line_start":256,"line_end":256,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6219,"byte_end":6222,"line_start":257,"line_end":257,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6250,"byte_end":6259,"line_start":258,"line_end":258,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6276,"byte_end":6285,"line_start":259,"line_end":259,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6298,"byte_end":6301,"line_start":260,"line_end":260,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6333,"byte_end":6336,"line_start":261,"line_end":261,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6364,"byte_end":6373,"line_start":262,"line_end":262,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6390,"byte_end":6399,"line_start":263,"line_end":263,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6412,"byte_end":6415,"line_start":264,"line_end":264,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6447,"byte_end":6450,"line_start":265,"line_end":265,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6478,"byte_end":6487,"line_start":266,"line_end":266,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6504,"byte_end":6513,"line_start":267,"line_end":267,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6526,"byte_end":6529,"line_start":268,"line_end":268,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6561,"byte_end":6564,"line_start":269,"line_end":269,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6592,"byte_end":6601,"line_start":270,"line_end":270,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6618,"byte_end":6627,"line_start":271,"line_end":271,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6640,"byte_end":6643,"line_start":272,"line_end":272,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6675,"byte_end":6678,"line_start":273,"line_end":273,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6706,"byte_end":6715,"line_start":274,"line_end":274,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6732,"byte_end":6741,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6754,"byte_end":6757,"line_start":276,"line_end":276,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6789,"byte_end":6792,"line_start":277,"line_end":277,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6820,"byte_end":6829,"line_start":278,"line_end":278,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6846,"byte_end":6855,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6868,"byte_end":6871,"line_start":280,"line_end":280,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6903,"byte_end":6906,"line_start":281,"line_end":281,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6934,"byte_end":6943,"line_start":282,"line_end":282,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6960,"byte_end":6969,"line_start":283,"line_end":283,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":6982,"byte_end":6985,"line_start":284,"line_end":284,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7018,"byte_end":7021,"line_start":285,"line_end":285,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7050,"byte_end":7059,"line_start":286,"line_end":286,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7077,"byte_end":7086,"line_start":287,"line_end":287,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7100,"byte_end":7103,"line_start":288,"line_end":288,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7136,"byte_end":7139,"line_start":289,"line_end":289,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7168,"byte_end":7177,"line_start":290,"line_end":290,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7195,"byte_end":7204,"line_start":291,"line_end":291,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7218,"byte_end":7221,"line_start":292,"line_end":292,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7254,"byte_end":7257,"line_start":293,"line_end":293,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7286,"byte_end":7295,"line_start":294,"line_end":294,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7313,"byte_end":7322,"line_start":295,"line_end":295,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7336,"byte_end":7339,"line_start":296,"line_end":296,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7372,"byte_end":7375,"line_start":297,"line_end":297,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7404,"byte_end":7413,"line_start":298,"line_end":298,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7431,"byte_end":7440,"line_start":299,"line_end":299,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7454,"byte_end":7457,"line_start":300,"line_end":300,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7491,"byte_end":7494,"line_start":301,"line_end":301,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7524,"byte_end":7533,"line_start":302,"line_end":302,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7552,"byte_end":7561,"line_start":303,"line_end":303,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7576,"byte_end":7579,"line_start":304,"line_end":304,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7613,"byte_end":7616,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7646,"byte_end":7655,"line_start":306,"line_end":306,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7674,"byte_end":7683,"line_start":307,"line_end":307,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7698,"byte_end":7701,"line_start":308,"line_end":308,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7735,"byte_end":7738,"line_start":309,"line_end":309,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7768,"byte_end":7777,"line_start":310,"line_end":310,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7796,"byte_end":7805,"line_start":311,"line_end":311,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3151},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7820,"byte_end":7823,"line_start":312,"line_end":312,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7857,"byte_end":7860,"line_start":313,"line_end":313,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":3133},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7890,"byte_end":7899,"line_start":314,"line_end":314,"column_start":4,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":7918,"byte_end":7927,"line_start":315,"line_end":315,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3156},"to":{"krate":0,"index":145}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24642,"byte_end":24651,"line_start":748,"line_end":748,"column_start":21,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":145},"to":{"krate":0,"index":260}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":24654,"byte_end":24657,"line_start":748,"line_end":748,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":3083},"to":{"krate":0,"index":260}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":26499,"byte_end":26508,"line_start":797,"line_end":797,"column_start":23,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":145},"to":{"krate":0,"index":268}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27282,"byte_end":27290,"line_start":816,"line_end":816,"column_start":2,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27294,"byte_end":27302,"line_start":817,"line_end":817,"column_start":4,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":9312},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27306,"byte_end":27314,"line_start":818,"line_end":818,"column_start":4,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":9314},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27318,"byte_end":27321,"line_start":819,"line_end":819,"column_start":4,"column_end":7},"kind":"SuperTrait","from":{"krate":1,"index":3083},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27325,"byte_end":27329,"line_start":820,"line_end":820,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2895},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27338,"byte_end":27342,"line_start":821,"line_end":821,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2895},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27350,"byte_end":27354,"line_start":822,"line_end":822,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2895},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27363,"byte_end":27367,"line_start":823,"line_end":823,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2895},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":27375,"byte_end":27379,"line_start":824,"line_end":824,"column_start":4,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2895},"to":{"krate":0,"index":272}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39130,"byte_end":39138,"line_start":1218,"line_end":1218,"column_start":16,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":318}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39213,"byte_end":39221,"line_start":1221,"line_end":1221,"column_start":17,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":319}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39299,"byte_end":39307,"line_start":1224,"line_end":1224,"column_start":17,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":320}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39385,"byte_end":39393,"line_start":1227,"line_end":1227,"column_start":17,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":321}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39486,"byte_end":39494,"line_start":1230,"line_end":1230,"column_start":18,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":322}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39571,"byte_end":39579,"line_start":1233,"line_end":1233,"column_start":21,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":323}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39659,"byte_end":39667,"line_start":1236,"line_end":1236,"column_start":22,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":324}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39750,"byte_end":39758,"line_start":1239,"line_end":1239,"column_start":22,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":325}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39841,"byte_end":39849,"line_start":1242,"line_end":1242,"column_start":22,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":326}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":39947,"byte_end":39955,"line_start":1245,"line_end":1245,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":327}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40032,"byte_end":40040,"line_start":1248,"line_end":1248,"column_start":20,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":328}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40120,"byte_end":40128,"line_start":1251,"line_end":1251,"column_start":21,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":329}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40211,"byte_end":40219,"line_start":1254,"line_end":1254,"column_start":21,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":330}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40302,"byte_end":40310,"line_start":1257,"line_end":1257,"column_start":21,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":331}},{"span":{"file_name":"/home/nbaiocchi/.cargo/registry/src/github.com-1ecc6299db9ec823/funty-1.2.0/src/lib.rs","byte_start":40408,"byte_end":40416,"line_start":1260,"line_end":1260,"column_start":22,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":124},"to":{"krate":0,"index":332}}]}